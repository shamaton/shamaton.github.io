<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on shamaton</title>
        <link>https://shamaton.dev/posts/</link>
        <description>Recent content in Posts on shamaton</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja-jp</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sun, 09 Jan 2022 11:20:09 +0000</lastBuildDate>
        <atom:link href="https://shamaton.dev/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>gRPCのCodecをmsgpackに変更する</title>
            <link>https://shamaton.dev/posts/2022010901/</link>
            <pubDate>Sun, 09 Jan 2022 11:20:09 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/2022010901/</guid>
            <description>お世話になっております。 しゃまとんです😊 gPRCのデフォルトシリアライザにはProtocol Buffersが使われています。 以前から、JSO</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです😊</p>
<p>gPRCのデフォルトシリアライザにはProtocol Buffersが使われています。<br>
以前から、JSONに置き換えることはこちらの記事で知っていたのですが、JSONに置き換えられるのならMessagePackにも出来るのかな？と思ったのでやってみました。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fqiita.com%2fyugui%2fitems%2f238dcdb75cd40d0f1ece" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>ちなみに Unity/C# では、MagicOnion というgRPC上にMessagePackがのっているフレームワークが公開されておりますね。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fCysharp%2fMagicOnion" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>手元で試す場合まずは、protocなどのコマンドを用意する必要がありますが、最新のバージョンを入れるようにしましょう！出力結果や実行オプションが違ってたりしました。<br>
しゃらくせぇ！って方は今回試したものをリポジトリにしているのでよしなにしてください。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fshamaton%2fgrpc-msgpack-sample" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>CodecはJSONに習って <code>encoding.Codec</code> を満たすようにしておけば良いです。（試していたときは難しいのでは&hellip;？と思っていたけど、そんなことはなかった。さすがgoogle）</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fgrpc%2fgrpc-go%2fblob%2fmaster%2fDocumentation%2fencoding.md" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>リポジトリにはgRPCのexampleにある <code>HelloRequest/HelloResponse</code> を使っていますが、
ここにはこれらのデータがinterfaceで入ってくるので、ただシリアライズすればよいのですね。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">MsgpackCodecName</span> = <span style="color:#e6db74">&#34;msgpack&#34;</span>

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">msgpackCodec</span> <span style="color:#66d9ef">struct</span> {
}

<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">c</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">msgpackCodec</span>) <span style="color:#a6e22e">Marshal</span>(<span style="color:#a6e22e">v</span> <span style="color:#66d9ef">interface</span>{}) ([]<span style="color:#66d9ef">byte</span>, <span style="color:#66d9ef">error</span>) {
	<span style="color:#75715e">// protoからgenerateされていればproto.Messageを満たすはず
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">msg</span>, <span style="color:#a6e22e">ok</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">v</span>.(<span style="color:#a6e22e">proto</span>.<span style="color:#a6e22e">Message</span>)
	<span style="color:#66d9ef">if</span> !<span style="color:#a6e22e">ok</span> {
		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Errorf</span>(<span style="color:#e6db74">&#34;not a proto message but %T: %v&#34;</span>, <span style="color:#a6e22e">v</span>, <span style="color:#a6e22e">v</span>)
	}

	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">msgpack</span>.<span style="color:#a6e22e">Marshal</span>(<span style="color:#a6e22e">msg</span>)
}

<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">c</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">msgpackCodec</span>) <span style="color:#a6e22e">Unmarshal</span>(<span style="color:#a6e22e">data</span> []<span style="color:#66d9ef">byte</span>, <span style="color:#a6e22e">v</span> <span style="color:#66d9ef">interface</span>{}) <span style="color:#66d9ef">error</span> {
	<span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">ok</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">v</span>.(<span style="color:#a6e22e">proto</span>.<span style="color:#a6e22e">Message</span>)
	<span style="color:#66d9ef">if</span> !<span style="color:#a6e22e">ok</span> {
		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Errorf</span>(<span style="color:#e6db74">&#34;not a proto message but %T: %v&#34;</span>, <span style="color:#a6e22e">v</span>, <span style="color:#a6e22e">v</span>)
	}
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">msgpack</span>.<span style="color:#a6e22e">Unmarshal</span>(<span style="color:#a6e22e">data</span>, <span style="color:#a6e22e">v</span>)
}

<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">c</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">msgpackCodec</span>) <span style="color:#a6e22e">Name</span>() <span style="color:#66d9ef">string</span> {
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">MsgpackCodecName</span>
}
</code></pre></div><p>あとはCodecをサーバ起動時に登録し、クライアントでは使うように設定すればよいです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#75715e">// server
</span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
	<span style="color:#a6e22e">encoding</span>.<span style="color:#a6e22e">RegisterCodec</span>()
}
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#75715e">// client
</span><span style="color:#75715e"></span><span style="color:#a6e22e">opts</span> <span style="color:#f92672">:=</span> []<span style="color:#a6e22e">grpc</span>.<span style="color:#a6e22e">DialOption</span>{
	<span style="color:#a6e22e">grpc</span>.<span style="color:#a6e22e">WithDefaultCallOptions</span>(<span style="color:#a6e22e">grpc</span>.<span style="color:#a6e22e">CallContentSubtype</span>(<span style="color:#a6e22e">encoding</span>.<span style="color:#a6e22e">MsgpackCodecName</span>)),
}
</code></pre></div><p>ここで、HelloRequestのコードを見てみましょう。JSONはタグが使われていますね。
msgpackはタグがありません。つけなくても動くのは動くんですが、JSONと同じようについてないのでなんとかしてつけたくなりました。（データとして使うメンバ以外はprivateになっているため）
どうやってやればいいのかというと<a href="https://github.com/protocolbuffers/protobuf-go/blob/fb30439f551a7e79e413e7b4f5f4dfb58e117d73/cmd/protoc-gen-go/internal_gengo/main.go#L700">protobuf-goのこの辺</a>をイジる必要があるんですね。
うまいこと注入できる感じだと良かったんだけどなーという印象。</p>
<p><a href="https://github.com/grpc/grpc-go/blob/master/examples/helloworld/helloworld/helloworld.pb.go#L48">https://github.com/grpc/grpc-go/blob/master/examples/helloworld/helloworld/helloworld.pb.go#L48</a></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">HelloRequest</span> <span style="color:#66d9ef">struct</span> {
	<span style="color:#a6e22e">state</span>         <span style="color:#a6e22e">protoimpl</span>.<span style="color:#a6e22e">MessageState</span>
	<span style="color:#a6e22e">sizeCache</span>     <span style="color:#a6e22e">protoimpl</span>.<span style="color:#a6e22e">SizeCache</span>
	<span style="color:#a6e22e">unknownFields</span> <span style="color:#a6e22e">protoimpl</span>.<span style="color:#a6e22e">UnknownFields</span>

	<span style="color:#a6e22e">Name</span> <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`protobuf:&#34;bytes,1,opt,name=name,proto3&#34; json:&#34;name,omitempty&#34;`</span>
}
</code></pre></div><p><a href="https://github.com/protocolbuffers/protobuf-go/blob/fb30439f551a7e79e413e7b4f5f4dfb58e117d73/cmd/protoc-gen-go/internal_gengo/main.go#L700">https://github.com/protocolbuffers/protobuf-go/blob/fb30439f551a7e79e413e7b4f5f4dfb58e117d73/cmd/protoc-gen-go/internal_gengo/main.go#L700</a></p>
<p>仕方がなかったので、protobuf-goをforkして、tagを設定している箇所でmsgpackも同じように設定してあげるようにしました。</p>
<p><a href="https://github.com/shamaton/protobuf-go/commit/56cfa3aa7824c592d2bcef9dcb098a293919b5bb#diff-9d6e6c652dbe94644b20e53076db2ae4306dd0a4e62aa48dbc2dd2690bffb8fcR405">https://github.com/shamaton/protobuf-go/commit/56cfa3aa7824c592d2bcef9dcb098a293919b5bb#diff-9d6e6c652dbe94644b20e53076db2ae4306dd0a4e62aa48dbc2dd2690bffb8fcR405</a></p>
<p>これを加えた上で protoc を実行すると&hellip;タグがつくようになりました 🙆</p>
<p><img src="https://user-images.githubusercontent.com/4637556/148683471-4f291db9-755d-4b97-88a2-1dfe8a7218f9.png" alt="image"></p>
<p>一応、この状態で実行してみると&hellip;
replyが返ってきます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">// go run ./cmd/client
2022/01/09 22:24:27 send bytes: 81 a4 6e 61 6d 65 a5 77 6f 72 6c 64
2022/01/09 22:24:27 recv bytes: 81 a7 6d 65 73 73 61 67 65 ac 48 65 6c 6c 6f 20 77 6f 72 6c 64 2e
2022/01/09 22:24:27 Greeting: Hello world.

// go run ./cmd/server
2022/01/09 22:24:27 recv bytes: 81 a4 6e 61 6d 65 a5 77 6f 72 6c 64
2022/01/09 22:24:27 call from world
2022/01/09 22:24:27 send bytes: 81 a7 6d 65 73 73 61 67 65 ac 48 65 6c 6c 6f 20 77 6f 72 6c 64 2e
</code></pre></div><p>また、Marshal/Unmarshalしているときのバイナリを確認してみると
当たり前なんですがmsgpackのデータ構造になっていますね。(81はfixmap)</p>
<p>protobuf-goを管理するのはつらいので、やるならmsgpackをjsonタグでも動くようにする&hellip;みたいなのがよいのかも&hellip;
と思いましたが、無理してやる必要はないと思いましたｗ</p>
<p>以上です〜👋</p>
]]></content>
        </item>
        
        <item>
            <title>[Ruby] msgpackの公式サイトを修正しました</title>
            <link>https://shamaton.dev/posts/679/</link>
            <pubDate>Thu, 25 Nov 2021 06:23:09 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/679/</guid>
            <description>お世話になっております。 しゃまとんです😊 shamaton/msgpackを作ったところから、たまにmsgpack.orgを見に行っていたので</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです😊</p>
<p><a href="https://github.com/shamaton/msgpack">shamaton/msgpack</a>を作ったところから、たまにmsgpack.orgを見に行っていたのですが、
ある時から表示がおかしくなっていました。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fmsgpack.org%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>なにがおかしいかというと、この公式サイトではgithub.comで公開されているmessagepackに関するパッケージを紹介してくれているんですね。
こんな感じで。</p>
<p><img src="https://user-images.githubusercontent.com/4637556/130205938-8225d1b5-fbae-4fcd-b816-f90d9bd6b4d4.png" alt="image"></p>
<p>それが出なくなっていたんです。これは切ない。</p>
<p><img src="https://user-images.githubusercontent.com/4637556/130206144-7396b287-b469-44f0-8526-ef5d8c7a70bf.png" alt="image"></p>
<p>気になって仕方がなくなったので、ちょっと調べてみることにしました。
サイトの生成にはrubyが使われていて、いけるかな〜どうかな〜という感じだったのですが試行錯誤することで、htmlの更新をするところにこぎつけました。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fmsgpack%2fwebsite" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>原因はというと、NokogoriでHTMLをパースするところが上手くいっておらず、すべてのパッケージで動作不良になってしまっていました。<br>
悲しい。😢</p>
<p>表示されるようになっていたのですが、一部パッケージが上手く取り込まれない感じになっていたのでその辺も合わせて修正。<br>
これ関連。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.blog%2fchangelog%2f2020-10-01-the-default-branch-for-newly-created-repositories-is-now-main%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>なんやかんやしてプルリクだして、マージしてもらいました！<br>
(いろんな人がコメントつけたりしてくれてました)</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fmsgpack%2fwebsite%2fpull%2f44" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>最終結果的には、言語ごとに表示されるようにして見やすくもできた😊</p>
<p><img src="https://user-images.githubusercontent.com/4637556/130207582-176440f0-00a0-419a-bd8a-03478e1414e5.png" alt="image"></p>
<p>以上です〜👋</p>
]]></content>
        </item>
        
        <item>
            <title>[Go] unsafe.Pointerを使うのをやめた</title>
            <link>https://shamaton.dev/posts/678/</link>
            <pubDate>Tue, 31 Aug 2021 13:50:09 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/678/</guid>
            <description>お世話になっております。 しゃまとんです😊 少し前にmsgpackとmsgpackgenを更新しました。 （個人的に）内部に割と大きめの変更点を入</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです😊</p>
<p>少し前にmsgpackとmsgpackgenを更新しました。</p>
<p>






<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fshamaton%2fmsgpack" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>








<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fshamaton%2fmsgpackgen" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
<p>（個人的に）内部に割と大きめの変更点を入れました。これまでstringのdecodeを行うときにunsafe.Pointerによるキャストを利用していたのですが
それをやめて通常のキャストを行うようにしました。</p>
<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">たしかに世の中ではどんな使われ方するかわからないし、少し速度落ちても安全に使えるほうが大事かなーと<a href="https://t.co/f0ROpA32Qr">https://t.co/f0ROpA32Qr</a></p>&mdash; しゃまとん (@shamaton) <a href="https://twitter.com/shamaton/status/1423281892053291010?ref_src=twsrc%5Etfw">August 5, 2021</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>ことの発端はmsgpackに立ったissueによるものです。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fshamaton%2fmsgpack%2fissues%2f25" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>msgpackを作っていた際に、パフォーマンスを意識して作っていたのですがstringに関する処理を早くできないかというところで、
unsafe.Pointerを使ったキャストを使うことにしました。<br>
これは知っていればいいのですが、<a href="https://play.golang.org/p/YQyb8ie8Qqd">Playground</a>で試してみてわかるようにバイト配列に変更を加えるとstringも変わってしまうのです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>

<span style="color:#f92672">import</span> (
  <span style="color:#e6db74">&#34;encoding/hex&#34;</span>
  <span style="color:#e6db74">&#34;fmt&#34;</span>
  <span style="color:#e6db74">&#34;os&#34;</span>

  <span style="color:#e6db74">&#34;github.com/shamaton/msgpack&#34;</span>
)

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
  <span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Struct</span> <span style="color:#66d9ef">struct</span> {
    <span style="color:#a6e22e">String</span> <span style="color:#66d9ef">string</span>
  }
  <span style="color:#a6e22e">v</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">Struct</span>{<span style="color:#a6e22e">String</span>: <span style="color:#e6db74">&#34;msgpack&#34;</span>}

  <span style="color:#a6e22e">d</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">msgpack</span>.<span style="color:#a6e22e">Marshal</span>(<span style="color:#a6e22e">v</span>)
  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
    panic(<span style="color:#a6e22e">err</span>)
  }
  <span style="color:#a6e22e">r</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">Struct</span>{}
  <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">msgpack</span>.<span style="color:#a6e22e">Unmarshal</span>(<span style="color:#a6e22e">d</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">r</span>)
  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
    panic(<span style="color:#a6e22e">err</span>)
  }
  <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Stderr</span>.<span style="color:#a6e22e">WriteString</span>(<span style="color:#a6e22e">hex</span>.<span style="color:#a6e22e">Dump</span>(<span style="color:#a6e22e">d</span>))
  <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">r</span>)
  <span style="color:#a6e22e">d</span>[len(<span style="color:#a6e22e">d</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">4</span>] = <span style="color:#e6db74">&#39;!&#39;</span>
  <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">r</span>)
}
</code></pre></div><p>結果がこうなります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">00000000  81 a6 53 74 72 69 6e 67  a7 6d 73 67 70 61 63 6b  |..String.msgpack|
{msgpack}
{msg!ack}
</code></pre></div><p>これって、結構危ない可能性あるなぁと。
基本いじることはないんだけど、いじらない可能性がないし、利用者から見たときにわけのわからない挙動になるかもしれないと。
パフォーマンスは大事なんだけど、安心して使えるのはもっと大事だよなぁということで変更することにしました。</p>
<p>でも変更するだけなのも尺だったので、少し改善もしました。
mapフォーマットを使った際のパフォーマンスの影響が大きかったので、そこに手をいれて遅くなるのを軽減しました。頭をひねれば出るもんだ。</p>
<p>そしてunsafeを使うなら、どこかにパッケージ名とかに明記しておくべきだなーと思いました。</p>
<p>ということでどちらもパッケージも安心してお使いいただけるはず！ということで引き続きよろしくお願いいたします🙇🙇🙇</p>
<p>以上です〜👋</p>
<p><em>（まだmsgpackgenはmsgpackの中では一番やで）</em> 🚀</p>
<h3 id="参考">参考</h3>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fqiita.com%2fmattn%2fitems%2f176459728ff4f854b165" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

]]></content>
        </item>
        
        <item>
            <title>[Go/GCP] Hugo&#43;GCSでwordpressからお引越し</title>
            <link>https://shamaton.dev/posts/677/</link>
            <pubDate>Wed, 18 Aug 2021 10:23:09 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/677/</guid>
            <description>お世話になっております。 しゃまとんです。 これまで運用していたドメインshamaton.orz.hmからブログの引っ越しを行いました。 (しばら</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>これまで運用していたドメイン<a href="https://shamaton.orz.hm">shamaton.orz.hm</a>からブログの引っ越しを行いました。<br>
(しばらくはまだ生きているんですが)</p>
<p>新しいドメインは <a href="https://shamaton.dev">shamaton.dev</a> です🎉</p>
<p>経緯としては、Wordpressの更新をするのを忘れていて、久しぶりに更新かけようかと思ったらできなくなったんですねｗ<br>
あー、これはだるいやつや。。触りたくなさがMAXだったので引っ越してしまうことにしました。</p>
<p>どうするのがいいかなぁと悩んで最初は <em>netlify + Hugo</em> を使った静的サイトに移行しよかなと思いました。</p>
<p>






<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fwww.netlify.com%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>








<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgohugo.io%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
<p>ググっても、結構記事が出てきて移行しやすそうですよね。<br>
ということで、まずはHugoの方をやっていきました。</p>
<h3 id="wordpress2hugo">Wordpress2Hugo</h3>
<p>まずは、これまでの記事たちをHugoに適応させるところから。
この辺を参考にexportして、画像ファイルのディレクトリを変更しました。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fwww.aguuu.com%2farchives%2f2018%2f05%2fhello_hugo%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>🤔（netlifyのところは端折られている）</p>
<p>次はテーマを選びます。私は <em>hello-friend-ng</em> にしました。
自分のJS/CSSを入れれるようになっていて、ダークテーマにも勝手に対応してくれます。すてき。</p>
<p>(テーマはsubmodle管理がよさそう)</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2frhazdon%2fhugo-theme-hello-friend-ng" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>前のドメインでは、bootstrapを使っていてそれに合うような形にしていたので、JS（主に画像ポップアップ表示のところ）で一苦労したんですが
functionsの機能を使って、lightboxをshortcode経由で呼べるようにしました。</p>
<p>






<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgohugo.io%2ffunctions%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>








<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2flokeshdhakar.com%2fprojects%2flightbox2%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
<p>ここからは記事が上手く表示されているかを地道に調整していきます&hellip;
記事があらかた整ったら、ビルドしてWebのどこかにもっていきます🚀🚀🚀</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e"># build</span>
hugo -t hello-friend-ng
</code></pre></div><h3 id="google-cloud-storage-gcs-にdeploy">Google Cloud Storage (GCS) にdeploy</h3>
<p>netfilyを検討しましたが、運用上の制約が気になるところがあり今回はGCSを使ったホスティングをすることにしました。
ここに書いてる内容がとても役に立ちました。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fqiita.com%2fmaejimayuto%2fitems%2fadffbbd632d4aa179480" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>一つだけすんなり行かなかったところとして、ロードバランサにIPを設定するところ。
先にIPを取得してから、ロードバランサ作成時につけようと思ったらつけられなくて謎だったので、結局ロードバランサ作成時にIPアドレスを作りました。
それ以外は読みすすめながら、Hello Worldまで行けると思います。</p>
<p>allUsesの設定方法（一般公開設定）はこの辺も参考になりそうです。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fqiita.com%2fmako0715%2fitems%2fa2049d31915f10f40681" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>テストページが見れるようになったら後は <code>hugo deploy</code> をすることで反映できます。config.tomlにdeploymentの設定をしましょう。<br>
今回はデプロイ対象は1つなのでnameは設定していません。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-toml" data-lang="toml">[<span style="color:#a6e22e">deployment</span>]
<span style="color:#a6e22e">order</span> = [<span style="color:#e6db74">&#34;.jpg$&#34;</span>, <span style="color:#e6db74">&#34;.gif$&#34;</span>, <span style="color:#e6db74">&#34;.png$&#34;</span>]

[[<span style="color:#a6e22e">deployment</span>.<span style="color:#a6e22e">targets</span>]]
<span style="color:#a6e22e">URL</span> = <span style="color:#e6db74">&#34;gs://バケット名(例えばexample.com)&#34;</span>
</code></pre></div><p><code>hugo deploy</code>の実行にはgcloudコマンドが使える状態になっている必要があります。
これからという方はセットアップしておきましょう。</p>
<p>






<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fcloud.google.com%2fsdk%2fdownloads%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>








<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fqiita.com%2fYumaInaura%2fitems%2fae7c20ba6def8245b522" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
<p>いざ実行の前に、ドライランして問題ないか確認してみましょう。
大丈夫なら、いざdeploy！</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e"># dry run</span>
hugo deploy --dryRun
<span style="color:#75715e"># deploy</span>
hugo deploy --confirm
</code></pre></div><p>実行したら、こんな感じで表示されます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Deploying to target &#34;&#34; (gs://shamaton.dev)
Identified xx file(s) to upload, totaling x.x MB, and 0 file(s) to delete.
Continue? (Y/n) y
Success!
</code></pre></div><p>あとは取得したドメインにアクセスして表示されればOK！<br>
もしCDN効かせてたら、ページが変わらないかもなのでアクセスしてないページ開いてみるとよいです！</p>
<p>以上です〜👋</p>
<h3 id="余談--netlify">余談 : netlify</h3>
<p>結局、試してみて使うのをやめたのですが、設定としてはnetlify側でDNSの設定をするだけで大丈夫でした。
freenomを検討されている方はこちらが参考になります。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fnote.com%2fremih%2fn%2fnf08104ee9966%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<h3 id="参考">参考</h3>
<p>lightbox導入</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fon-ze.com%2farchives%2f1715" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>導入を試みたが、うまく動かなかった</p>
<p>






<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgimmicklog.com%2fjquery%2f180%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>








<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fblog.ver001.com%2fjavascript-luminous%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
]]></content>
        </item>
        
        <item>
            <title>[Go] MessagePackのコードを生成するパッケージ(msgpackgen)を作りました</title>
            <link>https://shamaton.dev/posts/676/</link>
            <pubDate>Wed, 17 Mar 2021 10:23:09 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/676/</guid>
            <description>お世話になっております。 しゃまとんです。 GoのMessagePackパッケージ、msgpackgenをリリースしました。 以下、作った背景と使</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>GoのMessagePackパッケージ、<a href="https://github.com/shamaton/msgpackgen">msgpackgen</a>をリリースしました。







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fshamaton%2fmsgpackgen" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
<p>以下、作った背景と使い方を書いていきます。</p>
<h3 id="なぜ作ったの">なぜ作ったの？</h3>
<p>これは前段の話がありまして、実は私自身も後続ではありますが、GoでMessagePackのシリアライザを作ってリリースしています（<a href="https://github.com/shamaton/msgpack">msgpack</a>）。
速いは正義ということで、他ライブラリよりも速く実装できたので私が関与したサービスで使っていたのですが</p>
<blockquote>
<p>「ん〜、データをクライアント（フロントエンド）に返すときって、structに詰めた明瞭な型たち（intとかstringとか）を使うだろうし、それって専用のコードある方がより速く処理できるよな〜」</p>
<p>「例えばAPIサーバで、返すべきデータ定義が決まっているものだったら、それを知っているコードのほうが速く処理できるはずだよな〜」</p>
</blockquote>
<p>と漠然と思っていました。そこから幾月か経ち、こんな記事を目にしました。
<a href="https://tech.mfkessai.co.jp/2019/09/ebgen/">entityからコード自動生成した話 - Money Forward Kessai TECH BLOG</a>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2ftech.mfkessai.co.jp%2f2019%2f09%2febgen%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

あ、これ使ったら前考えたこと出来るかも&hellip;と思い、作り始め出来上がったのがmsgpackgenです。</p>
<h3 id="ベンチマーク">ベンチマーク</h3>
<p>今はこんな感じになっていて、<code>ShamatonGen</code>とsuffixについているものが今回紹介しているものになります。知っている範囲でGo製のMessagePackシリアライザと公式の<a href="https://github.com/golang/protobuf">Protobuf</a>や<a href="https://golang.org/pkg/encoding/json/">Json</a>をいれて比較してみました。今の所、一番速そうです&hellip;！
<img src="https://user-images.githubusercontent.com/4637556/107843994-23439e00-6e13-11eb-9303-296be7c24282.png" alt="a"></p>
<p>尚、結果が近しい<a href="https://github.com/tinylib/msgp"><code>tinylib</code></a>というパッケージもCode Generator付きのシリアライザです。実装の際に比較対象にしていましたが、そちらよりも簡単にコード生成できるような仕組みにするのも心がけました。
ということで、ぜひお試しいただきたい&hellip;!!</p>
<h3 id="使い方---コード生成">使い方 - コード生成</h3>
<p>まずはコード生成していきます。Goには<code>go generate</code>というコード生成を行う仕組みがあり、ファイルに決められたコメントを記載しておくことで、効力を発揮してくれます。例えばmain.goに</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#75715e">//go:generate go run github.com/shamaton/msgpackgen
</span></code></pre></div><p>と記載し、シェルで</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">go generate
</code></pre></div><p>とすると、main.goがあるディレクトリを含め、再帰的に配下のディレクトリまでコード生成可能な構造体（struct）を検出しコード生成を行います。出力ファイルは１ファイルにまとめられ、デフォルトのファイル名は<code>resolver.msgpackgen.go</code>で生成されます。</p>
<p>生成例:<a href="https://github.com/shamaton/msgpack_bench/blob/master/struct.go">これ</a>が<a href="https://github.com/shamaton/msgpack_bench/blob/master/resolver.msgpackgen.go">こう</a>なります</p>
<h3 id="使い方---シリアライズ">使い方 - シリアライズ</h3>
<p>シリアライズを有効にするために、アプリケーションの開始段階などで有効にするメソッドを呼んでおきます。例えばmain.goなどで&hellip;</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
	<span style="color:#75715e">// 登録 (resolver.msgpackgen.goにある)
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">RegisterGeneratedResolver</span>()
	
	<span style="color:#75715e">// http.Serveするなど
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">service</span>()
}
</code></pre></div><p>シリアライズ/デシリアライズは<code>json</code>パッケージのように<code>Marshal</code>/<code>Unmarshal</code>が用意されています。importに<code>github.com/shamaton/msgpackgen/msgpack</code>を追加してください。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">service</span>() {
    <span style="color:#a6e22e">v</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">RegisteredStruct</span>{}
    <span style="color:#a6e22e">b</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">msgpack</span>.<span style="color:#a6e22e">Marshal</span>(<span style="color:#a6e22e">v</span>)
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
        panic(<span style="color:#a6e22e">err</span>)
    }
    
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">vv</span> <span style="color:#a6e22e">RegisteredStruct</span>
    <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">msgpack</span>.<span style="color:#a6e22e">Unmarshal</span>(<span style="color:#a6e22e">b</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">vv</span>)
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
        panic(<span style="color:#a6e22e">err</span>)
    }
}
</code></pre></div><p>もし、<code>resolver.msgpackgen.go</code>に登録されていないデータが引数に渡された場合はこちらの<a href="https://github.com/shamaton/msgpack">msgpack</a>が呼ばれます。</p>
<h3 id="まとめ">まとめ</h3>
<p>msgpackgenを紹介させていただきました。より細かいことは<a href="https://github.com/shamaton/msgpackgen/blob/main/README.md">README</a>に書いてありますが、基本は説明したものだけで機能するようになると思います。試していただけると嬉しいです！</p>
<p>ぜひともよろしくお願いします！</p>
]]></content>
        </item>
        
        <item>
            <title>[Docker] 32bit環境のコンテナを作る</title>
            <link>https://shamaton.dev/posts/675/</link>
            <pubDate>Sun, 14 Jul 2019 10:23:09 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/675/</guid>
            <description>お世話になっております。 しゃまとんです。 先日、msgpackにissueが 立っていたので確認したところwindows/386 on Windows 10でbui</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>先日、<a href="https://github.com/shamaton/msgpack">msgpack</a>に<a href="https://github.com/shamaton/msgpack/issues/13">issue</a>が
立っていたので確認したところ<code>windows/386 on Windows 10</code>でbuildエラーになってしまうということだったので修正しておくことに。<br>
エラーになっている箇所を確認したところ、どうやらWindowsのOSは関係なく32bit環境だとエラーになってるぽいなーと思い、じゃあ32bit環境で試すかー。</p>
<p>ってそんな環境はねぇ！って一瞬思ったんですが&hellip;</p>
<p>32bitの環境だったら、Linuxでもいいから用意できたらいいかも<br>
Dockerでいけないだろうかと思ったら、そんなコンテナあるんですねー。</p>
<p><a href="https://hub.docker.com/r/i386/centos/">https://hub.docker.com/r/i386/centos/</a></p>
<p>ということで32bitなコンテナのテスト環境をつくっていきます。<br>
（CentOS7でも良さそうだったのに、今回は6でやりました）</p>
<p>上記のコンテナをベースにDockerfileを作りました。以前に似たようなことをしていたのですが、同様にgolang/gitを入れておきます。 ベースそのままだとyumがうまく動かないのでrepoファイルに対処を入れる必要がありました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-dockerfile" data-lang="dockerfile"><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> i386/centos:6</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span> <span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">LABEL</span> maintainer<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;shamaton&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span> <span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># define</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ARG</span> go_ver<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;1.12.7&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span> <span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># repo setting</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> sed -i <span style="color:#e6db74">&#39;s/$basearch/i386/g&#39;</span> /etc/yum.repos.d/CentOS-*.repo<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> yum clean all<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># root work</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> yum install -y sudo<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> useradd -m -d /home/docker -s /bin/bash docker <span style="color:#f92672">&amp;&amp;</span> echo <span style="color:#e6db74">&#34;docker:docker&#34;</span> | chpasswd<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> echo <span style="color:#e6db74">&#34;docker ALL=(ALL) NOPASSWD:ALL&#34;</span> &gt;&gt; /etc/sudoers<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span> <span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># install latest stable git</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> yum -y install <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    git <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    gcc <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    curl-devel <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    expat-devel <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    gettext-devel <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    openssl-devel <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    zlib-devel <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    perl-ExtUtils-MakeMaker <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    git clone https://github.com/git/git.git <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    cd git/ <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    git checkout <span style="color:#e6db74">`</span>git tag | sort -V | grep -v <span style="color:#e6db74">&#34;\-rc&#34;</span> | tail -1<span style="color:#e6db74">`</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    yum -y remove git <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    make prefix<span style="color:#f92672">=</span>/usr all <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    make prefix<span style="color:#f92672">=</span>/usr install <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    yum -y remove gcc <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    curl-devel <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    expat-devel <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    gettext-devel <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    openssl-devel <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    zlib-devel <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    perl-ExtUtils-MakeMaker <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    cd / <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    rm -rf /git<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span> <span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># install golang</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> curl -O https://storage.googleapis.com/golang/go<span style="color:#e6db74">${</span>go_ver<span style="color:#e6db74">}</span>.linux-386.tar.gz<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> tar -C /usr/local -xzf go<span style="color:#e6db74">${</span>go_ver<span style="color:#e6db74">}</span>.linux-386.tar.gz <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>rm go<span style="color:#e6db74">${</span>go_ver<span style="color:#e6db74">}</span>.linux-386.tar.gz<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span> <span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># change user docker</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">WORKDIR</span><span style="color:#e6db74"> /home/docker</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">USER</span><span style="color:#e6db74"> docker</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span> <span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># user work</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENV</span> PATH $PATH:/usr/local/go/bin<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> mkdir -p <span style="color:#e6db74">${</span>HOME<span style="color:#e6db74">}</span>/go<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENV</span> GOPATH /home/docker/go<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>次にbuildして立ち上げて見ましょう。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">docker build ./ -t centos6-i386-go-git
docker run -it --rm --name test123 centos6-i386-go-git bash
</code></pre></div><p>コンテナが起動したら、32bitでgolangとgitが使えるか確認しておきます</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ getconf LONG_BIT
<span style="color:#ae81ff">32</span>

$ git version
git version 2.22.0

$ go version
go version go1.12.7 linux/386
</code></pre></div><p>ついでにissueになっている挙動も確認しておきます</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ go get -d -v github.com/shamaton/msgpack
 github.com/shamaton/msgpack <span style="color:#f92672">(</span>download<span style="color:#f92672">)</span>

$ cd go/src/github.com/shamaton/msgpack

$ go test -v .
github.com/shamaton/msgpack/internal/encoding
internal/encoding/byte.go:22:14: constant <span style="color:#ae81ff">4294967295</span> overflows int
internal/encoding/byte.go:36:14: constant <span style="color:#ae81ff">4294967295</span> overflows int
internal/encoding/encoding.go:110:15: constant <span style="color:#ae81ff">4294967295</span> overflows int
internal/encoding/encoding.go:158:15: constant <span style="color:#ae81ff">4294967295</span> overflows int
internal/encoding/encoding.go:195:15: constant <span style="color:#ae81ff">4294967295</span> overflows int
internal/encoding/map.go:267:14: constant <span style="color:#ae81ff">4294967295</span> overflows int
internal/encoding/slice.go:107:14: constant <span style="color:#ae81ff">4294967295</span> overflows int
internal/encoding/struct.go:94:14: constant <span style="color:#ae81ff">4294967295</span> overflows int
internal/encoding/struct.go:141:14: constant <span style="color:#ae81ff">4294967295</span> overflows int
internal/encoding/struct.go:197:16: constant <span style="color:#ae81ff">4294967295</span> overflows int
internal/encoding/struct.go:197:16: too many errors
FAIL    github.com/shamaton/msgpack <span style="color:#f92672">[</span>build failed<span style="color:#f92672">]</span>
</code></pre></div><p>エラーでた！</p>
<p>ってことで、32bit環境になっているようです。（不具合を晒していく）</p>
<p>さぁ、修正しよう。（した）<br>
以上です。</p>
<p>あとから気づいたけど、こっちのほうが良かったかな&hellip;</p>
<p><a href="https://hub.docker.com/r/i386/alpine/">https://hub.docker.com/r/i386/alpine/</a></p>
]]></content>
        </item>
        
        <item>
            <title>[CI] concourseでUnityのビルドをCIしてみる – 動作編</title>
            <link>https://shamaton.dev/posts/668/</link>
            <pubDate>Sun, 07 Jul 2019 12:22:19 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/668/</guid>
            <description>前回の導入編につづいて、iOSのビルド作業ができるところまでやってみます！ （今回はArchiveまでを行ってみます。IPA出力は今回は割愛し</description>
            <content type="html"><![CDATA[<p>前回の導入編につづいて、iOSのビルド作業ができるところまでやってみます！<br>
（今回はArchiveまでを行ってみます。IPA出力は今回は割愛します。） また、この記事では事前にUnity側でTeam IDを設定していることを想定しています。 (<a href="https://developer.apple.com/jp/programs/">Developer Program</a>に入っている必要があります)</p>
<p>下記のSigning Team Idにわすれず入力しておきましょう</p>
<p><img src="https://i.gyazo.com/c60e100c80b7888ab77d69ee0458af2a.png" alt="image"></p>
<p>さて、通常はUnity上でiOSビルドを行いますが、CIではそのようなことができないのでUnityをbatchmodeで起動して<br>
ビルド実行用のメソッドを叩けるようにしておく必要があります。</p>
<p>下記クラスをAssets/EditorにBatchBuild.csを作成しておきましょう。<br>
Assets/Editorでなくても良いですが、必ずEditorディレクトリ配下に作成しておきます。</p>
<p>あ、Unityのプロジェクトはgithubに存在している想定です。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">using</span> UnityEngine;
<span style="color:#66d9ef">using</span> UnityEditor;
<span style="color:#66d9ef">using</span> System.IO;
<span style="color:#66d9ef">using</span> System.Linq;
<span style="color:#66d9ef">using</span> System.Collections;

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">BatchBuild</span>
{
    <span style="color:#75715e">// 出力先
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">string</span> OutputDir = <span style="color:#e6db74">&#34;Builds/&#34;</span>;

    <span style="color:#75715e">// 生成名
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">string</span> Android = <span style="color:#e6db74">&#34;out.apk&#34;</span>;
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">string</span> IOS = <span style="color:#e6db74">&#34;XcodeProject&#34;</span>;

    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> BuildOptions buildOptions = BuildOptions.Development;
<span style="color:#a6e22e">
</span><span style="color:#a6e22e">    [MenuItem(&#34;Build Android&#34;)]</span>
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> BuildAndroid()
    {
        <span style="color:#66d9ef">var</span> scenes = EditorBuildSettings.scenes.Where(s =&amp;gt; s.enabled).Select(s =&amp;gt; s.path).ToArray();

        <span style="color:#66d9ef">string</span> path = GetOutputPath();
        <span style="color:#66d9ef">if</span> (!Directory.Exists(path))
        {
            Directory.CreateDirectory(path);
        }

        <span style="color:#75715e">// 出力用のファイルを定義
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">var</span> outputFile = path + Android;
        <span style="color:#66d9ef">if</span> (File.Exists(outputFile))
        {
            File.Delete(outputFile);
        }

        <span style="color:#66d9ef">var</span> target = BuildTarget.Android;
        BuildPipeline.BuildPlayer(scenes, outputFile, target, buildOptions);
    }
<span style="color:#a6e22e">
</span><span style="color:#a6e22e">    [MenuItem(&#34;Build iOS&#34;)]</span>
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> BuildiOS()
    {
        <span style="color:#66d9ef">var</span> scenes = EditorBuildSettings.scenes.Where(s =&amp;gt; s.enabled).Select(s =&amp;gt; s.path).ToArray();

        <span style="color:#66d9ef">string</span> path = GetOutputPath();

        <span style="color:#66d9ef">if</span> (!Directory.Exists(path))
        {
            Directory.CreateDirectory(path);
        }

        <span style="color:#75715e">// 出力用のフォルダを設定
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">var</span> outputFile = path + IOS;
        <span style="color:#66d9ef">if</span> (Directory.Exists(outputFile))
        {
            Directory.Delete(outputFile, <span style="color:#66d9ef">true</span>);
        }

        <span style="color:#66d9ef">var</span> target = BuildTarget.iOS;
        BuildPipeline.BuildPlayer(scenes, outputFile, target, buildOptions);
    }

    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">string</span> GetOutputPath()
    {
        <span style="color:#66d9ef">string</span> projectDir = Application.dataPath + <span style="color:#e6db74">&#34;/../&#34;</span>;
        <span style="color:#66d9ef">string</span> path = Path.GetFullPath(projectDir);
        path += OutputDir;
        <span style="color:#66d9ef">return</span> path;
    }
}
</code></pre></div><p>次にパイプラインに設定するための構成をyamlファイルで作成します。</p>
<p>動作的には、resourcesで指定したリポジトリのmasterブランチが更新されたらjobが起動するようになっています。</p>
<p>ビルドしたいプロジェクト自体は別の場所でcloneしてあり、そちらを使い回すような想定にしています。<br>
Unityのプロジェクト自体はサイズ大きくなることが多くcloneやSwitch Platformにも時間がかかると思われるためです。</p>
<p>そんなことない、という場合はInputを設定すればOKです。<br>
ファイル名はbuild_unity.ymlとしておきます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#f92672">resources</span>:
  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Unity-Project</span>
    <span style="color:#f92672">type</span>: <span style="color:#ae81ff">git</span>
    <span style="color:#f92672">source</span>:
      <span style="color:#f92672">uri</span>: <span style="color:#ae81ff">Githubのリポジトリのアドレス</span> <span style="color:#75715e"># https://github.com/shamaton/hoge.git</span>
   <span style="color:#f92672">branch</span>: <span style="color:#ae81ff">master</span>

<span style="color:#f92672">jobs</span>:
  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">build-unity</span>
    <span style="color:#f92672">plan</span>: 
      - <span style="color:#f92672">get</span>: <span style="color:#ae81ff">Unity-Project</span>
        <span style="color:#f92672">trigger</span>: <span style="color:#66d9ef">true</span>
      - <span style="color:#f92672">task</span>: <span style="color:#ae81ff">let_us_build</span>
        <span style="color:#f92672">config</span>:
        <span style="color:#f92672">platform</span>: <span style="color:#ae81ff">darwin</span>
        <span style="color:#f92672">run</span>:
          <span style="color:#f92672">path</span>: <span style="color:#ae81ff">sh</span>
          <span style="color:#f92672">args</span>:
          - -<span style="color:#ae81ff">c</span>
          - |<span style="color:#e6db74">
</span><span style="color:#e6db74">            cd path/to/project
</span><span style="color:#e6db74">            git pull
</span><span style="color:#e6db74">            /Applications/Unity/Unity.app/Contents/MacOS/Unity -batchmode -quit -projectPath . -executeMethod BatchBuild.BuildiOS -logFile /dev/stdout
</span><span style="color:#e6db74">            cd ./Builds/XcodeProject</span>            
         <span style="color:#ae81ff">xcodebuild -configuration Release archive &lt;/code&gt;&lt;/pre&gt;</span>
</code></pre></div><p>ファイルが作成できたら、導入編でいれたflyコマンドを使って登録しましょう。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">fly -t sample login -c http://localhost:8080/ fly -t sample set-pipeline -p build_unity -c build_unity.yml
</code></pre></div><p>Apply configuration?と聞かれるのでyを選択します。 これで、Webを見てみるとbuild_unityが追加されてるはずなので、pausedの横にある再生マークをおして動くようにしておきます。</p>
<p><figure class="left">
    <img src="/images/posts/2019/06/image-2.png" width="500"/> 
</figure>

<figure class="left">
    <img src="/images/posts/2019/06/image.png" width="500"/> 
</figure>
</p>
<p>さらにbuild_unityをクリックすると詳細が見れるので、右上にあるプラスボタンを実行するとpipelineが動き出します。<br>
もしどこかで失敗してしまう場合はビルドしているコマンドをローカルで実行してみてください。</p>
<figure class="left">
    <img src="/images/posts/2019/06/image-1.png" width="500"/> 
</figure>

<p>今回の場合は最後に <code>ARCHIVE SUCCESSED</code> と出ればうまく動作した状態になります。</p>
<figure class="left">
    <img src="/images/posts/2019/06/image-3.png" width="200"/> 
</figure>

<p>IPA出力までやりたいんじゃ！という方はこちらなどを参照いただけると….！<br>
concourseで素敵なUnity CIライフが過ごせると良いですね…！<br>
以上です。</p>
<p>■ 参考 コンテナ側を使ったテストもやってみたのでyamlを載せておきます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#ae81ff">&lt;pre class=&#34;wp-block-preformatted&#34;&gt;resources:</span>
  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">msgpack</span>
    <span style="color:#f92672">type</span>: <span style="color:#ae81ff">git</span>
    <span style="color:#f92672">icon</span>: <span style="color:#ae81ff">github-circle</span>
    <span style="color:#f92672">source</span>:
      <span style="color:#f92672">uri</span>: <span style="color:#ae81ff">https://github.com/shamaton/msgpack.git</span>

  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">golang-1.12.x-image</span>
    <span style="color:#f92672">type</span>: <span style="color:#ae81ff">registry-image</span>
    <span style="color:#f92672">icon</span>: <span style="color:#ae81ff">docker</span>
    <span style="color:#f92672">source</span>:
      <span style="color:#f92672">repository</span>: <span style="color:#ae81ff">golang</span>
      <span style="color:#f92672">tag</span>: <span style="color:#ae81ff">1.12</span>-<span style="color:#ae81ff">stretch </span>

<span style="color:#f92672">task-config</span>: <span style="color:#75715e">&amp;task-config</span>
  <span style="color:#f92672">platform</span>: <span style="color:#ae81ff">linux</span>
  <span style="color:#f92672">inputs</span>:
    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">msgpack</span>
      <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/go/src/github.com/shamaton/msgpack</span>
  <span style="color:#f92672">run</span>:
    <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/bin/sh</span>
    <span style="color:#f92672">args</span>:
      - -<span style="color:#ae81ff">c</span>
      - |<span style="color:#e6db74">
</span><span style="color:#e6db74">        SRCPATH=$PWD/go/src/github.com/shamaton/msgpack
</span><span style="color:#e6db74">        GOPATH=$PWD/go
</span><span style="color:#e6db74">        cd $SRCPATH
</span><span style="color:#e6db74">        go get -t -v ./...
</span><span style="color:#e6db74">        go test -v ./...</span>        

<span style="color:#f92672">jobs</span>:
  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">golang-1.12</span>
    <span style="color:#f92672">public</span>: <span style="color:#66d9ef">true</span>
    <span style="color:#f92672">plan</span>:
      - <span style="color:#f92672">get</span>: <span style="color:#ae81ff">msgpack</span>
        <span style="color:#f92672">trigger</span>: <span style="color:#66d9ef">true</span>
      - <span style="color:#f92672">get</span>: <span style="color:#ae81ff">golang-1.12.x-image</span>
        <span style="color:#f92672">trigger</span>: <span style="color:#66d9ef">true</span>
      - <span style="color:#f92672">task</span>: <span style="color:#ae81ff">run-tests</span>
        <span style="color:#f92672">image</span>: <span style="color:#ae81ff">golang-1.12.x-image</span>
        <span style="color:#f92672">config</span>:
          <span style="color:#75715e">&amp;lt;&amp;lt;</span> : <span style="color:#75715e">*task-config</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>[CI] concourseでUnityのビルドをCIしてみる – 導入編</title>
            <link>https://shamaton.dev/posts/664/</link>
            <pubDate>Tue, 02 Jul 2019 13:49:22 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/664/</guid>
            <description>お世話になっております。 しゃまとんです。 Unityで開発をしているとビルド作業が煩わしくなって自動化したい…なんて話になると思います。 それで</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>Unityで開発をしているとビルド作業が煩わしくなって自動化したい…なんて話になると思います。<br>
それで導入となるとどのCI導入するのかという話になり、Jenkinsで環境構築をするのが主流なのかなと感じています。<br>
（<a href="https://travis-ci.org/">Travis CI</a>や<a href="https://circleci.com/">Circle CI</a>とかあるけど、ローカルな環境で〜という話）</p>
<p>ただ、世の中では<br>
「Jenkinsおじさん」<br>
という問題が各所で発生しており、辛い現状があるのも事実なようです。</p>
<p>Unityにおいては<a href="https://unity3d.com/jp/unity/features/cloud-build">Unity Cloud Build</a>がありますが、Unityのサービスなので他のプロダクト（例えばサーバサイドのAPIサービス）とかには使えません。<br>
できるなら、1つのCI環境で管理したいですよね。</p>
<p>私としては以下のような希望がありまして</p>
<ul>
<li>UnityのiOS / Androidビルドが行える</li>
<li>Unity以外プロダクトにも使える(サーバサイドのテスト、ひいてはデプロイ)</li>
<li>属人化しないと嬉しい（Infrastructure as Codeのようなもの）</li>
</ul>
<p>なにか他にいいしーあいないかなーと探してみたところ<a href="https://concourse-ci.org/">concourse</a>と出会いました。
concourseは比較的新しいOSSによるCI/CDツールのようですが、ヤフー等の企業でも導入が進んでいるようです。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fthinkit.co.jp%2farticle%2f11556" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>目立った特徴を見た感じだと</p>
<ul>
<li>dockerを使って、CI環境を構築できる</li>
<li>workerはコンテナ、ネイティブどちらでも動作可能</li>
<li>操作はすべてCLI</li>
<li>結果をGUIで確認できる<br>
(詳細は<a href="https://www.ossnews.jp/compare/Jenkins/Concourse_CI">こちら</a>にあります)</li>
</ul>
<p>workerがどちらでも動作するので、MacでUnityのビルド走らせつつ、コンテナでサーバサイドのテストとかできそう。<br>
ということで、要件を満たしてくれそうなのでやってみることにしました。<br>
ここから導入になるのですが、先人の記事を参考にしてこの記事も書いているため、新しいバージョンでは動作しない恐れがあります。<br>
この時、導入時にハマったところも含め記載するのですが、ご留意ください。</p>
<p>まず、docker/docker-composeの導入ができてない方は下記を参考にして、使えるようにしましょう。（他力本願）</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fupd.world%2fdocker-install-mac%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>








<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fqiita.com%2fzembutsu%2fitems%2fdd2209a663cae37dfa81" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>次に作業用ディレクトリを作成して、動作に必要な鍵を作っておきます。ssh-keygenを使えばいいのですが、
生成時のオプション指定に注意する必要がありました。</p>
<p><a href="https://github.com/concourse/concourse/issues/2590">github issue : panic: runtime error: invalid memory address or nil&hellip;</a></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">mkdir concourse_sample
cd concourse_sample

mkdir -p keys/web
ssh-keygen -t rsa -f ./keys/web/tsa_host_key -N <span style="color:#e6db74">&#39;&#39;</span> -m PEM
ssh-keygen -t rsa -f ./keys/web/session_signing_key -N <span style="color:#e6db74">&#39;&#39;</span> -m PEM

mkdir -p keys/worker
ssh-keygen -t rsa -f ./keys/worker/worker_key -N <span style="color:#e6db74">&#39;&#39;</span> -m PEM
ssh-keygen -t rsa -f ./keys/worker/darwin_worker_key -N <span style="color:#e6db74">&#39;&#39;</span> -m PEM

cat ./keys/worker/worker_key.pub &gt;&gt; ./keys/web/authorized_worker_keys
cat ./keys/worker/darwin_worker_key.pub &gt;&gt; ./keys/web/authorized_worker_keys

cp ./keys/web/tsa_host_key.pub ./keys/worker
</code></pre></div><p>できたら、docker-compose用のconcourse構成を下記のようにして作成します。</p>
<p>environmentは環境変数から設定しても構いません。CONCOURSE_EXTERNAL_URLは他のPCをworkerとして使う場合はlocalhostではなく、
IPアドレスかホスト名を設定してください。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#f92672">version</span>: <span style="color:#e6db74">&#39;3&#39;</span>
 <span style="color:#f92672">services</span>:
   <span style="color:#f92672">concourse-db</span>:
     <span style="color:#f92672">image</span>: <span style="color:#ae81ff">postgres</span>
     <span style="color:#f92672">environment</span>:
       <span style="color:#f92672">POSTGRES_DB</span>: <span style="color:#ae81ff">concourse</span>
       <span style="color:#f92672">POSTGRES_USER</span>: <span style="color:#ae81ff">concourse_user</span>
       <span style="color:#f92672">POSTGRES_PASSWORD</span>: <span style="color:#ae81ff">concourse_pass</span>
       <span style="color:#f92672">PGDATA</span>: <span style="color:#ae81ff">/database</span>
   
   <span style="color:#f92672">concourse-web</span>:
     <span style="color:#f92672">image</span>: <span style="color:#ae81ff">concourse/concourse</span>
     <span style="color:#f92672">command</span>: <span style="color:#ae81ff">web</span>
     <span style="color:#f92672">restart</span>: <span style="color:#ae81ff">unless-stopped</span>
     <span style="color:#f92672">depends_on</span>: [<span style="color:#ae81ff">concourse-db]</span>
     <span style="color:#f92672">ports</span>: [<span style="color:#e6db74">&#34;8080:8080&#34;</span>, <span style="color:#e6db74">&#34;2222:2222&#34;</span>]
     <span style="color:#f92672">volumes</span>: [<span style="color:#e6db74">&#34;./keys/web:/concourse-keys&#34;</span>]
     <span style="color:#f92672">environment</span>:
       <span style="color:#f92672">CONCOURSE_EXTERNAL_URL</span>: <span style="color:#ae81ff">http://localhost:8080</span>
       <span style="color:#f92672">CONCOURSE_BASIC_AUTH_USERNAME</span>: <span style="color:#ae81ff">auth_user</span>
       <span style="color:#f92672">CONCOURSE_BASIC_AUTH_PASSWORD</span>: <span style="color:#ae81ff">auth_pass</span>
       <span style="color:#f92672">CONCOURSE_POSTGRES_HOST</span>: <span style="color:#ae81ff">concourse-db</span>
       <span style="color:#f92672">CONCOURSE_POSTGRES_USER</span>: <span style="color:#ae81ff">concourse_user</span>
       <span style="color:#f92672">CONCOURSE_POSTGRES_DATABASE</span>: <span style="color:#ae81ff">concourse</span>
       <span style="color:#f92672">CONCOURSE_POSTGRES_PASSWORD</span>: <span style="color:#ae81ff">concourse_pass</span>
       <span style="color:#f92672">CONCOURSE_ADD_LOCAL_USER</span>: <span style="color:#ae81ff">test:test</span>
       <span style="color:#f92672">CONCOURSE_MAIN_TEAM_LOCAL_USER</span>: <span style="color:#ae81ff">test</span>
 
   <span style="color:#f92672">concourse-worker</span>:
     <span style="color:#f92672">image</span>: <span style="color:#ae81ff">concourse/concourse</span>
     <span style="color:#f92672">privileged</span>: <span style="color:#66d9ef">true</span>
     <span style="color:#f92672">depends_on</span>: [<span style="color:#ae81ff">concourse-web]</span>
     <span style="color:#f92672">command</span>: <span style="color:#ae81ff">worker</span>
     <span style="color:#f92672">volumes</span>: [<span style="color:#e6db74">&#34;./keys/worker:/concourse-keys&#34;</span>]
     <span style="color:#f92672">environment</span>:
       <span style="color:#f92672">CONCOURSE_TSA_HOST</span>: <span style="color:#ae81ff">concourse-web:2222</span>
</code></pre></div><p>用意できたら、docker-compose upしてみましょう。</p>
<p>はじめは正常に起動しているかログを確認したほうがよいでしょう。<br>
failed や unreachable などのワードが見えたら、どこかしらがうまく行ってないと思います。<br>
問題なければ、<a href="http://localhost:8080">http://localhost:8080</a>にアクセスすれば、welcome to concourseと表示されます。</p>
<figure class="left">
    <img src="/images/posts/2019/06/concourse1_login.png" width="600"/> 
</figure>

<p>test : testでログインできるかも確認してみましょう。</p>
<figure class="left">
    <img src="/images/posts/2019/06/concourse1_nopipe.png" width="600"/> 
</figure>

<p>次にネイティブで動くworkerを動作させます。<br>
動作させるには、concourseのCLIを使う必要があります。<a href="https://github.com/concourse/concourse/releases">こちら</a>から<br>
から各OSに適したものを取得してください。今回はmacなのでconcourse-X.X.X-darwin-amd64.tgzを取得しました。<br>
展開するとconcourse / flyコマンドがありますので、適宜パスを通すなどしましょう。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">tar -xvzf concourse-X.X.X-darwin-amd64.tgz
cd concourse
tar -xvzf fly-assets/fly-darwin-amd64.tgz

<span style="color:#75715e"># 下記のコマンドに適宜パスを通す</span>
./bin/concourse
./fly-assets/fly
</code></pre></div><p>workerの起動はホストや鍵を設定して行います。working directoryは勝手に生成されます。<br>
こちらも実行直後はログをみて、起動に失敗してないかチェックしてみましょう。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">concourse worker --work-dir ./working_sample <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    --tsa-host localhost:2222 <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    --tsa-public-key ./keys/worker/tsa_host_key.pub <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    --tsa-worker-private-key ./keys/worker/darwin_worker_key
</code></pre></div><p>worker.beacon-runner.beacon.registered等出ていれば良いと思います。</p>
<p>これで導入が終わりました。<br>
次は、pipelineを作って実行していきます！</p>
<p>■ 参考</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fblog.fenrir-inc.com%2fjp%2f2017%2f07%2fhow_to_build_ios_codes_by_concourse-ci.html" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>








<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fdev.classmethod.jp%2fserver-side%2fnetwork%2fopenssh78_potentially_incompatible_changes%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

]]></content>
        </item>
        
        <item>
            <title>[メモ] 2018年の振り返り</title>
            <link>https://shamaton.dev/posts/583/</link>
            <pubDate>Sun, 30 Dec 2018 13:18:52 +0900</pubDate>
            
            <guid>https://shamaton.dev/posts/583/</guid>
            <description>お世話になっております。 しゃまとんです。 年末なのでことしも一応（ちゃちゃっと）振り返ってみようかと思います。 wordpressのバージョンが</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>年末なのでことしも一応（ちゃちゃっと）振り返ってみようかと思います。
wordpressのバージョンが上がって、編集方法が思いっきり変わっている・・・ ちなみに昨年の振り返り。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fshamaton.dev%2fposts%2f513" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>去年は年末にアプリをリリースしてました。そこから運営していければいいなぁと思っていたのですが、なかなか難しいもので、年半ばでサービス運営を停止することにしました。</p>
<p>ただ外見からするとサービスに失敗しただけなのですが、学べた部分が大きく他の開発側でよりよくしていける見方だったり、改善ポイントが見つかったりしたのでよかったなーとプラスにとらえています。</p>
<p>今年はサービス的なアウトプットはなかったのですが、自分のWebページの刷新だったり、msgpackの公開だったり。あと記事も地道に追加したり。<br>
本当はもう1つくらい（OSS的な）したいことがあったのですが、余裕がなくできなかったのがちょっと残念。</p>
<p>Webページは前からちょっと変えたいな〜と思っていたので、年頭に刷新することにしました。もうすこしいい感じにと思っていたので、イケてそうな感じのbootstrap templateを探してきてレイアウト調整しました。<br>
（デザインセンス内のでとても助かります！）<br>
ついでに英語で書いてみようという試みもしました。</p>
<p><a href="https://shamaton.orz.hm/">https://shamaton.orz.hm/</a></p>
<p>msgpackは夏〜秋頃にちまちまと作業していて、使いやすくて既存ライブラリよりもパフォーマンスだすぞ！
みたいな感じでやり始めたんですが、一応それが出来ました。
これのおかげでバイナリデータを見て読めるようになったのはいい思い出です。
多分Unityやってなくて、<a href="https://github.com/neuecc/Zeroformatter">Zeroformatter</a>と<a href="https://github.com/neuecc/MessagePack-CSharp">MessagePack-CSharp</a>に出会わなければやってなかったでしょう。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fshamaton%2fmsgpack" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>個人的にはUnity / gRPCが気になっていたのでそれを試せたのもよかった。Unityには「魔法の玉ねぎ」的なものもありますが、
サーバかじっている人間としては素の状態ものを触ってみたいという感じだったので。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fshamaton.dev%2fposts%2f553" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>今後はUnity製アプリはサーバもC#になっていくんですかね〜。<br>
なんとなくコードがよめる状態とか、参照がなんちゃらとかは大規模開発になると効率にも繋がりそうですしね。</p>
<p>そんなこんなで2018年も終わるのですが、来年も形に拘らずいろいろな方面で吸収したりあるいはアウトプットできればいいな〜
とゆるい感じで考えております。</p>
<p>フォローしてくださっている方、記事を読んでくださっている方、いつもありがとうございます。それでは良いお年を。<br>
以上です。</p>
]]></content>
        </item>
        
        <item>
            <title>[Unity/Golang]データ圧縮にdeflateが使えなかった</title>
            <link>https://shamaton.dev/posts/548/</link>
            <pubDate>Tue, 18 Dec 2018 15:03:44 +0900</pubDate>
            
            <guid>https://shamaton.dev/posts/548/</guid>
            <description>お世話になっております。 しゃまとんです。 以前にデータ圧縮の記事を書いたのですが、 どうやら、Androidで利用しようとするとエラーになってし</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>以前にデータ圧縮の記事を書いたのですが、</p>









<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fshamaton.dev%2fposts%2f544" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>どうやら、Androidで利用しようとするとエラーになってしまうようです。<br>
よって、モバイル向けに利用する際には注意が必要でした。</p>
<p>Unityでは（私個人が）大体モバイル向けにビルドするため、
これだと使えないということで別の手を使って圧縮を行うように変更することにしました。<br>
deflateの代わりとしては、DotNetZipやMessagePackなども使えそうですが今回は<a href="https://icsharpcode.github.io/SharpZipLib/">SharpZibLib</a>を使ってみることにしました。</p>
<p>ちなみにライセンスはMITです。以前はGPLだったようですが変わったみたいですね。</p>
<p>導入にはこちらのサイトがとても参考になります。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fbaba-s.hatenablog.com%2fentry%2f2017%2f08%2f24%2f100000" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>ということで、以前のコードを書き直しました。<br>
Unity側はDeflateを使っていた箇所を置き換えるだけです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">using</span> System.IO;
<span style="color:#66d9ef">using</span> ICSharpCode.SharpZipLib.GZip;

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Compressor</span> {
  
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">byte</span>[] Compress(<span style="color:#66d9ef">byte</span>[] source) {
    MemoryStream ms = <span style="color:#66d9ef">new</span> MemoryStream();
    <span style="color:#66d9ef">var</span> CompressedStream = <span style="color:#66d9ef">new</span> GZipOutputStream(ms);

    CompressedStream.Write(source, <span style="color:#ae81ff">0</span>, source.Length);
    CompressedStream.Close();
    <span style="color:#66d9ef">return</span> ms.ToArray();
  }

  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">byte</span>[] Decompress(<span style="color:#66d9ef">byte</span>[] source) {
    MemoryStream ms = <span style="color:#66d9ef">new</span> MemoryStream(source);
    MemoryStream ms2 = <span style="color:#66d9ef">new</span> MemoryStream();

    <span style="color:#66d9ef">var</span> CompressedStream = <span style="color:#66d9ef">new</span> GZipInputStream(ms);

    <span style="color:#66d9ef">while</span> (<span style="color:#66d9ef">true</span>) {
      <span style="color:#66d9ef">int</span> rb = CompressedStream.ReadByte();
      <span style="color:#66d9ef">if</span> (rb == -<span style="color:#ae81ff">1</span>) {
        <span style="color:#66d9ef">break</span>;
      }
      ms2.WriteByte((<span style="color:#66d9ef">byte</span>)rb);
    }
    <span style="color:#66d9ef">return</span> ms2.ToArray();
  }
}
</code></pre></div><p>サーバー側も下記のように修正しておきます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">compress</span>(<span style="color:#a6e22e">target</span> <span style="color:#66d9ef">string</span>) ([]<span style="color:#66d9ef">byte</span>, <span style="color:#66d9ef">error</span>) {

    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">buf</span> <span style="color:#a6e22e">bytes</span>.<span style="color:#a6e22e">Buffer</span>
    <span style="color:#a6e22e">writer</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">gzip</span>.<span style="color:#a6e22e">NewWriter</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">buf</span>)

    <span style="color:#a6e22e">dat</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">bytes</span>.<span style="color:#a6e22e">NewBufferString</span>(<span style="color:#a6e22e">target</span>)
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">e</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">io</span>.<span style="color:#a6e22e">Copy</span>(<span style="color:#a6e22e">writer</span>, <span style="color:#a6e22e">dat</span>); <span style="color:#a6e22e">e</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
        <span style="color:#a6e22e">writer</span>.<span style="color:#a6e22e">Close</span>()
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">e</span>
    }

    <span style="color:#a6e22e">e</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">writer</span>.<span style="color:#a6e22e">Flush</span>()
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">e</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
        <span style="color:#a6e22e">writer</span>.<span style="color:#a6e22e">Close</span>()
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">e</span>
    }

    <span style="color:#a6e22e">e</span> = <span style="color:#a6e22e">writer</span>.<span style="color:#a6e22e">Close</span>()
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">e</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">e</span>
    }

    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">buf</span>.<span style="color:#a6e22e">Bytes</span>(), <span style="color:#66d9ef">nil</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">decompress</span>(<span style="color:#a6e22e">compressed</span> []<span style="color:#66d9ef">byte</span>) ([]<span style="color:#66d9ef">byte</span>, <span style="color:#66d9ef">error</span>) {
    <span style="color:#a6e22e">fr</span>, <span style="color:#a6e22e">e</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">gzip</span>.<span style="color:#a6e22e">NewReader</span>(<span style="color:#a6e22e">bytes</span>.<span style="color:#a6e22e">NewReader</span>(<span style="color:#a6e22e">compressed</span>))
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">e</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
        <span style="color:#a6e22e">fr</span>.<span style="color:#a6e22e">Close</span>()
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">e</span>
    }

    <span style="color:#a6e22e">d</span>, <span style="color:#a6e22e">e</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">ioutil</span>.<span style="color:#a6e22e">ReadAll</span>(<span style="color:#a6e22e">fr</span>)
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">e</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
        <span style="color:#a6e22e">fr</span>.<span style="color:#a6e22e">Close</span>()
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">e</span>
    }

    <span style="color:#a6e22e">e</span> = <span style="color:#a6e22e">fr</span>.<span style="color:#a6e22e">Close</span>()
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">e</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">e</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">d</span>, <span style="color:#66d9ef">nil</span>
}
</code></pre></div><p>これでAndroidでも使えるようになりました。<br>
めでたしめでたし。以上です。</p>
]]></content>
        </item>
        
        <item>
            <title>[Unity/Golang] 環境間でデータを圧縮して解凍してみる</title>
            <link>https://shamaton.dev/posts/544/</link>
            <pubDate>Sun, 25 Nov 2018 13:48:58 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/544/</guid>
            <description>お世話になっております。 しゃまとんです。 今回は、通信時に圧縮したデータを相互に送り合って使えるようにしたいなと思って試してみました。データを</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>今回は、通信時に圧縮したデータを相互に送り合って使えるようにしたいなと思って試してみました。データを小さくしたりリクエストの回数を減らしたほうがいいですよね。</p>
<p>今回もサーバ側はGolangです。</p>
<p>環境<br>
Unity2018.1f1<br>
Go1.10</p>
<p>まずはUnity側です。<br>
テキストデータを圧縮し、Base64化したものをサーバーにPOSTするものを作りました。<br>
またサーバーからのレスポンスを受け取って解凍するようにしました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">using</span> System;
<span style="color:#66d9ef">using</span> System.Collections;
<span style="color:#66d9ef">using</span> System.Text;
<span style="color:#66d9ef">using</span> UnityEngine;
<span style="color:#66d9ef">using</span> UnityEngine.Networking;

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Sample</span> : MonoBehaviour {
    
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> OnButton() {
    StartCoroutine(request());
  }

  IEnumerator request() {
    <span style="color:#66d9ef">var</span> message = <span style="color:#e6db74">&#34;send from unity!!&#34;</span>;
    <span style="color:#66d9ef">var</span> byteMessage = Encoding.UTF8.GetBytes(message);
    <span style="color:#66d9ef">var</span> comp = Compressor.Compress(byteMessage);
    <span style="color:#66d9ef">var</span> base64 = Convert.ToBase64String(comp, Base64FormattingOptions.InsertLineBreaks);

    WWWForm form = <span style="color:#66d9ef">new</span> WWWForm();
    form.AddField(<span style="color:#e6db74">&#34;data&#34;</span>, base64);

    UnityWebRequest www = UnityWebRequest.Post(<span style="color:#e6db74">&#34;http://localhost:8080/&#34;</span>, form);
    <span style="color:#66d9ef">yield</span> <span style="color:#66d9ef">return</span> www.SendWebRequest();

    <span style="color:#66d9ef">if</span> (www.isNetworkError) {
      Debug.Log(www.error);
    }
    <span style="color:#66d9ef">else</span> {
      <span style="color:#66d9ef">var</span> text = www.downloadHandler.text;
      <span style="color:#66d9ef">var</span> bytes = Convert.FromBase64String(text);
      <span style="color:#66d9ef">var</span> decomp = Compressor.Decompress(bytes);
      <span style="color:#66d9ef">var</span> result = Encoding.UTF8.GetString(decomp);
      Debug.Log(result);
    }
  }
}
</code></pre></div><p>圧縮の処理ですが、今回は外部DLL等を入れることなく使えるものを利用しました。<br>
簡単ですが、このような感じです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp:compressor.cs" data-lang="csharp:compressor.cs"><span style="color:#66d9ef">using</span> System.IO;
<span style="color:#66d9ef">using</span> System.IO.Compression;

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Compressor</span> {
  
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">byte</span>[] Compress(<span style="color:#66d9ef">byte</span>[] source) {
    MemoryStream ms = <span style="color:#66d9ef">new</span> MemoryStream();
    DeflateStream CompressedStream = <span style="color:#66d9ef">new</span> DeflateStream(ms, CompressionMode.Compress, <span style="color:#66d9ef">true</span>);

    CompressedStream.Write(source, <span style="color:#ae81ff">0</span>, source.Length);
    CompressedStream.Close();
    <span style="color:#66d9ef">return</span> ms.ToArray();
  }

  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">byte</span>[] Decompress(<span style="color:#66d9ef">byte</span>[] source) {
    MemoryStream ms = <span style="color:#66d9ef">new</span> MemoryStream(source);
    MemoryStream ms2 = <span style="color:#66d9ef">new</span> MemoryStream();

    DeflateStream CompressedStream = <span style="color:#66d9ef">new</span> DeflateStream(ms, CompressionMode.Decompress);

    <span style="color:#66d9ef">while</span> (<span style="color:#66d9ef">true</span>) {
      <span style="color:#66d9ef">int</span> rb = CompressedStream.ReadByte();
      <span style="color:#66d9ef">if</span> (rb == -<span style="color:#ae81ff">1</span>) {
        <span style="color:#66d9ef">break</span>;
      }
      ms2.WriteByte((<span style="color:#66d9ef">byte</span>)rb);
    }
    <span style="color:#66d9ef">return</span> ms2.ToArray();
  }
}
</code></pre></div><p>次にサーバですが、Unity側と同じ圧縮アルゴリズムを利用して処理を実装しました（当然ですが）。
実装の際、結構ハマっていたポイントがあるのですが、なぜかunexpected EOFというエラーが出てしまっていました。
原因は、圧縮処理を行うwriterのCloseを行わずしてデータを返却していたことでした。</p>
<p>これが結構厄介なところで、Goだとよく <code>defer writer.Close()</code> とかするのでそれでよいと思い込んでいたのですが、
Closeを行ってからじゃないと正しく処理されたデータを取得することができません。陥りがな罠に自分もハマっていました・・・。</p>
<p>処理自体はリクエストが来たらパラメータの解凍とデコードをして、その値プラスで追加メッセージをいれて、エンコードと圧縮をするようなものです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go:server.go" data-lang="go:server.go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>

<span style="color:#f92672">import</span> (
    <span style="color:#e6db74">&#34;bytes&#34;</span>
    <span style="color:#e6db74">&#34;compress/flate&#34;</span>
    <span style="color:#e6db74">&#34;encoding/base64&#34;</span>
    <span style="color:#e6db74">&#34;fmt&#34;</span>
    <span style="color:#e6db74">&#34;io&#34;</span>
    <span style="color:#e6db74">&#34;io/ioutil&#34;</span>
    <span style="color:#e6db74">&#34;log&#34;</span>
    <span style="color:#e6db74">&#34;net/http&#34;</span>
)

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
    <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">HandleFunc</span>(<span style="color:#e6db74">&#34;/&#34;</span>, <span style="color:#a6e22e">handler</span>)
    <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ListenAndServe</span>(<span style="color:#e6db74">&#34;:8080&#34;</span>, <span style="color:#66d9ef">nil</span>)
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">handler</span>(<span style="color:#a6e22e">w</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>, <span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>) {
    <span style="color:#a6e22e">data</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">FormValue</span>(<span style="color:#e6db74">&#34;data&#34;</span>)

    <span style="color:#a6e22e">dec</span>, <span style="color:#a6e22e">e</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">fromBase64</span>(<span style="color:#a6e22e">data</span>)
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">e</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
        <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">e</span>)
        <span style="color:#66d9ef">return</span>
    }
    <span style="color:#a6e22e">raw</span>, <span style="color:#a6e22e">e</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">decompress</span>(<span style="color:#a6e22e">dec</span>)
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">e</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
        <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">e</span>)
        <span style="color:#66d9ef">return</span>
    }

    <span style="color:#a6e22e">message</span> <span style="color:#f92672">:=</span> string(<span style="color:#a6e22e">raw</span>) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;send from server!!&#34;</span>
    <span style="color:#a6e22e">comp</span>, <span style="color:#a6e22e">e</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">compress</span>(<span style="color:#a6e22e">message</span>)
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">e</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
        <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">e</span>)
        <span style="color:#66d9ef">return</span>
    }

    <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Fprintf</span>(<span style="color:#a6e22e">w</span>, <span style="color:#e6db74">&#34;%s&#34;</span>, <span style="color:#a6e22e">toBase64</span>(<span style="color:#a6e22e">comp</span>))
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">compress</span>(<span style="color:#a6e22e">target</span> <span style="color:#66d9ef">string</span>) ([]<span style="color:#66d9ef">byte</span>, <span style="color:#66d9ef">error</span>) {

    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">buf</span> <span style="color:#a6e22e">bytes</span>.<span style="color:#a6e22e">Buffer</span>
    <span style="color:#a6e22e">writer</span>, <span style="color:#a6e22e">e</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">flate</span>.<span style="color:#a6e22e">NewWriter</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">buf</span>, <span style="color:#a6e22e">flate</span>.<span style="color:#a6e22e">DefaultCompression</span>)
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">e</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
        <span style="color:#a6e22e">writer</span>.<span style="color:#a6e22e">Close</span>()
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">e</span>
    }

    <span style="color:#a6e22e">dat</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">bytes</span>.<span style="color:#a6e22e">NewBufferString</span>(<span style="color:#a6e22e">target</span>)
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">e</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">io</span>.<span style="color:#a6e22e">Copy</span>(<span style="color:#a6e22e">writer</span>, <span style="color:#a6e22e">dat</span>); <span style="color:#a6e22e">e</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
        <span style="color:#a6e22e">writer</span>.<span style="color:#a6e22e">Close</span>()
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">e</span>
    }

    <span style="color:#a6e22e">e</span> = <span style="color:#a6e22e">writer</span>.<span style="color:#a6e22e">Flush</span>()
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">e</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
        <span style="color:#a6e22e">writer</span>.<span style="color:#a6e22e">Close</span>()
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">e</span>
    }

    <span style="color:#a6e22e">e</span> = <span style="color:#a6e22e">writer</span>.<span style="color:#a6e22e">Close</span>()
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">e</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">e</span>
    }

    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">buf</span>.<span style="color:#a6e22e">Bytes</span>(), <span style="color:#66d9ef">nil</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">decompress</span>(<span style="color:#a6e22e">compressed</span> []<span style="color:#66d9ef">byte</span>) ([]<span style="color:#66d9ef">byte</span>, <span style="color:#66d9ef">error</span>) {
    <span style="color:#a6e22e">fr</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">flate</span>.<span style="color:#a6e22e">NewReader</span>(<span style="color:#a6e22e">bytes</span>.<span style="color:#a6e22e">NewReader</span>(<span style="color:#a6e22e">compressed</span>))

    <span style="color:#a6e22e">strcuture</span>, <span style="color:#a6e22e">e</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">ioutil</span>.<span style="color:#a6e22e">ReadAll</span>(<span style="color:#a6e22e">fr</span>)
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">e</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
        <span style="color:#a6e22e">fr</span>.<span style="color:#a6e22e">Close</span>()
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">e</span>
    }

    <span style="color:#a6e22e">e</span> = <span style="color:#a6e22e">fr</span>.<span style="color:#a6e22e">Close</span>()
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">e</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">e</span>
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">strcuture</span>, <span style="color:#66d9ef">nil</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">fromBase64</span>(<span style="color:#a6e22e">text</span> <span style="color:#66d9ef">string</span>) ([]<span style="color:#66d9ef">byte</span>, <span style="color:#66d9ef">error</span>) {
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">base64</span>.<span style="color:#a6e22e">StdEncoding</span>.<span style="color:#a6e22e">DecodeString</span>(<span style="color:#a6e22e">text</span>)
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">toBase64</span>(<span style="color:#a6e22e">data</span> []<span style="color:#66d9ef">byte</span>) <span style="color:#66d9ef">string</span> {
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">base64</span>.<span style="color:#a6e22e">StdEncoding</span>.<span style="color:#a6e22e">EncodeToString</span>(<span style="color:#a6e22e">data</span>)
}
</code></pre></div><p>これでサーバ側の起動（go run server.goなど）しておいて、Unityを実行してみます。<br>
下のような感じで、サーバで文字が追加されたものを解凍することができました。</p>
<figure>
    <img src="/images/posts/2018/06/console.png"/> 
</figure>

<p>これで何か大きなデータをやり取りするときは相互にデータサイズを減らしていけそうです。<br>
以上です。</p>
<p>■ 参考</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fgurizuri0505.halfmoon.jp%2f20121211%2f52033" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>








<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fqiita.com%2fkenmazsyma%2fitems%2f65149ac736303238bff6" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

]]></content>
        </item>
        
        <item>
            <title>[Docker] CentOS6でwingを使わず最新のgitにする</title>
            <link>https://shamaton.dev/posts/567/</link>
            <pubDate>Sun, 04 Nov 2018 13:21:38 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/567/</guid>
            <description>お世話になっております。 しゃまとんです。 この前、Docker Hubに公開していたあるコンテナのリポジトリにissueが飛んできてたので確認し</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>この前、Docker Hubに公開していたあるコンテナのリポジトリにissueが飛んできてたので確認してみると、
「このコンテナのgolangのバージョンあげてや〜」みたいなのだったので対応することにしました。</p>
<p>対象のコンテナがCentOS 6で作られていて、コンテナにはgitとgolangがインストールされているものでした。<br>
じゃあgolangのバージョンだけ上げておくか〜ということで対応して、コンテナをビルドすると途中でエラーに。</p>
<p>原因はgit2.x系をインストールする際に使っていたwingリポジトリが使えなくなっていたことでした。
うーんこれは仕方がないということでgitを別の方法で入れることに。<br>
(実は他のところで生きているかもしれません)</p>
<p>手法としては至って単純で、とりあえず標準のgitをyum installした後に、
最新のgitをcloneしてきてビルドしておきかえるというものです。</p>
<p>バージョンはgithubのstableの最新をビルドするようにしました。<br>
Dockerfileはこちらになります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-dockerfile" data-lang="dockerfile"><span style="color:#66d9ef">From</span><span style="color:#e6db74"> centos:6</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">MAINTAINER</span><span style="color:#e6db74"> shamaton</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># define</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ARG</span> go_ver<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;1.10.4&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># root work</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> yum update -y<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> yum install -y sudo<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> useradd -m -d /home/docker -s /bin/bash docker <span style="color:#f92672">&amp;&amp;</span> echo <span style="color:#e6db74">&#34;docker:docker&#34;</span> | chpasswd<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> echo <span style="color:#e6db74">&#34;docker ALL=(ALL) NOPASSWD:ALL&#34;</span> &amp;gt;&amp;gt; /etc/sudoers<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># install latest stable git</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> yum -y install <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>git <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>gcc <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>curl-devel <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>expat-devel <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>gettext-devel <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>openssl-devel <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>zlib-devel <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>perl-ExtUtils-MakeMaker <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>git clone https://github.com/git/git.git <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>cd git/ <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>git checkout <span style="color:#e6db74">`</span>git tag | sort -V | grep -v <span style="color:#e6db74">&#34;\-rc&#34;</span> | tail -1<span style="color:#e6db74">`</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>yum -y remove git <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>make prefix<span style="color:#f92672">=</span>/usr all <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>make prefix<span style="color:#f92672">=</span>/usr install <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>cd / <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>rm -rf /git<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># install golang</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> curl -O https://storage.googleapis.com/golang/go<span style="color:#e6db74">${</span>go_ver<span style="color:#e6db74">}</span>.linux-amd64.tar.gz<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> tar -C /usr/local -xzf go<span style="color:#e6db74">${</span>go_ver<span style="color:#e6db74">}</span>.linux-amd64.tar.gz <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>rm go<span style="color:#e6db74">${</span>go_ver<span style="color:#e6db74">}</span>.linux-amd64.tar.gz<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># change user docker</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">WORKDIR</span><span style="color:#e6db74"> /home/docker</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">USER</span><span style="color:#e6db74"> docker</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># user work</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENV</span> PATH $PATH:/usr/local/go/bin<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> mkdir -p <span style="color:#e6db74">${</span>HOME<span style="color:#e6db74">}</span>/.packages<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENV</span> GOPATH /home/docker/.packages<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>大事なのは、#install latest stable gitのところですね。</p>
<p>git及びビルド用パッケージをインストールして、<br>
↓<br>
gitのlatest stableをclone<br>
↓<br>
とりあえずインストールしたgitをアンイストール<br>
↓<br>
make / make install</p>
<p>として最新版を使えるようにしました。<br>
ちなみに以前はこんなふうでした。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-dockerfile" data-lang="dockerfile"><span style="color:#75715e"># update git</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> cd /etc/yum.repos.d/ <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>curl -O http://wing-repo.net/wing/6/EL6.wing.repo <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>yum -y --enablerepo<span style="color:#f92672">=</span>wing install git<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>行数は増えました(見やすさのため)が、コマンド的には一行でまとめておきました。<br>
ただ、これはコンテナをビルドしたタイミングでバージョンに差異がでるので、気にする必要がある場合には、cloneするバージョンを指定するほうがいいかもですね。</p>
<p>以上です。</p>
]]></content>
        </item>
        
        <item>
            <title>[Golang]構造体のバイナリ化ができなかった</title>
            <link>https://shamaton.dev/posts/547/</link>
            <pubDate>Thu, 25 Oct 2018 13:53:39 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/547/</guid>
            <description>お世話になっております。 しゃまとんです。 Goで構造体をバイナリ化したいなぁと思って、調べてやってみていたのですが中々うまくいかない・・・ とい</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>Goで構造体をバイナリ化したいなぁと思って、調べてやってみていたのですが中々うまくいかない・・・
ということがあったのでメモ。</p>
<p>まず、単純にバイナリ化をするためには下記のような記述をすれば出来ます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
     
<span style="color:#f92672">import</span> (
    <span style="color:#e6db74">&#34;encoding/binary&#34;</span>
    <span style="color:#e6db74">&#34;encoding/hex&#34;</span>
    <span style="color:#e6db74">&#34;os&#34;</span>
)

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">st</span> <span style="color:#66d9ef">struct</span> {
    <span style="color:#a6e22e">Hoge</span> <span style="color:#66d9ef">int32</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
    <span style="color:#a6e22e">a</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">st</span>{<span style="color:#a6e22e">Hoge</span>: <span style="color:#ae81ff">1</span>}
    
    <span style="color:#a6e22e">out</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">hex</span>.<span style="color:#a6e22e">Dumper</span>(<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Stdout</span>)
    <span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">out</span>.<span style="color:#a6e22e">Close</span>()
    
    <span style="color:#a6e22e">binary</span>.<span style="color:#a6e22e">Write</span>(<span style="color:#a6e22e">out</span>, <span style="color:#a6e22e">binary</span>.<span style="color:#a6e22e">LittleEndian</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">a</span>)
}
</code></pre></div><p>go runすると、こんな感じですね。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">00000000  01 00 00 00                                       |....|
</code></pre></div><p>これを開発中のコードで試していたのですが、変換エラーが出てしまい困っていのたですが、
どうやらFixed Typeでないとダメであるということがわかりました。</p>
<p>簡単なところでいうと、スライスだったらstringだったりは決まった長さではないため、変換時にエラーにされてしまうようです。</p>
<p>自分の場合は、stringがどうやら原因だったようでできるものだと思いこんでいたのが、
ハマりポイントでした。Unity（C#）だと出来るので、まさかでした。</p>
<p>あと普段Goを書いていると使っているintもダメですね。
これは環境によって32/64bitが変わるそうなので、変換時にエラーになってしまいます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#75715e">// 下記は変換エラー
</span><span style="color:#75715e"></span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">st</span> <span style="color:#66d9ef">struct</span> {
    <span style="color:#a6e22e">A</span> []<span style="color:#66d9ef">int32</span>
    <span style="color:#a6e22e">B</span> <span style="color:#66d9ef">string</span>
    <span style="color:#a6e22e">C</span> <span style="color:#66d9ef">int</span>
}
</code></pre></div><p>どうしてもバイナリで扱いたい場合はシリアライザ等を使ってやるほうが良さそうですね。<br>
以上です。</p>
<p>■ 参考</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fqiita.com%2fcastaneai%2fitems%2f2441536860e624d3f8a0" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>








<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fgolang%2fgo%2fissues%2f13156" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

]]></content>
        </item>
        
        <item>
            <title>[Unity] 利用規約をつくったときのこと</title>
            <link>https://shamaton.dev/posts/490/</link>
            <pubDate>Sat, 13 Oct 2018 13:47:33 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/490/</guid>
            <description>お世話になっております。 しゃまとんです。 ユーザー入力ができるアプリを作ったときのお話です。 最初のバージョンを申請したところリジェクトになりま</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>ユーザー入力ができるアプリを作ったときのお話です。</p>
<p>最初のバージョンを申請したところリジェクトになりました。<br>
理由としてUser Generated Content(UGC)に関するものでした。原文はこのような感じです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Fixed Guideline 1.2 - Safety - User Generated Content
Your app enables users to post content anonymously but does not have the proper precautions in place.

Next Steps

To resolve this issue, please revise your app to implement all of the following precautions:

- Age rating must reflect 17+
- Require that users agree to terms (EULA) and these terms must make it clear that there is no tolerance for objectionable content or abusive users
- A method for filtering objectionable content
- A mechanism for users to flag objectionable content
- A mechanism for users to block abusive users
- A mechanism for users to immediately remove posts from the feed
- Developer must act on objectionable content reports within 24 hours by removing the content and ejecting the user who provided the offending content
- Developer must provide contact information in the app itself, giving users the ability to report inappropriate activity
</code></pre></div><p>まぁ、とりあえずGoogle翻訳を通しておくと&hellip;;</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">あなたのアプリでは、ユーザーは匿名でコンテンツを投稿できますが、適切な予防措置は講じていません。

次のステップ

この問題を解決するには、アプリを改訂して次の予防措置をすべて実施してください：

- 年齢層は17歳以上を反映する必要があります
- ユーザーが利用規約（EULA）に同意することを要求する。これらの条件は、好ましくないコンテンツや不正なユーザーに対しては許容範囲がないことを明確にしなければならない
- 好ましくないコンテンツをフィルタリングする方法
- ユーザーが不快なコンテンツにフラグを立てる仕組み
- ユーザーが不正なユーザーをブロックする仕組み
- ユーザーがフィードから投稿をすぐに削除する仕組み
- 開発者は、コンテンツを削除し、問題のコンテンツを提供したユーザーを取り除くことにより、好ましくないコンテンツレポートを24時間以内に実行する必要があります
- 開発者は、アプリケーション自体に連絡先情報を提供し、不適切な活動を報告する機能をユーザーに提供する必要があります
</code></pre></div><p>うむ、なるほど&hellip;と。たしかにその通りすぎて、突っぱねる返答など微塵もするできる感じじゃなかったので、
納得してくれそうな感じで対応することに。</p>
<p>ほとんどの内容はコンテンツ内容の対応と申請時の年齢設定で改善出来そうだなーと思っていたんですが、1つややこしいのが。</p>
<p>利用規約（End User License Agreement）</p>
<p>です。難しい文章とか硬い感じのしっかりした文章考えないといけないよなー&hellip;とうなっていたんですが、
こういうときは他のアプリを参考にするしかない！<br>
ということでコミュニケーションアプリといえば<a href="https://terms.line.me/line_terms/?lang=ja">LINEの利用規約</a>を参考にすることにしました。</p>
<p>（そもそもEULAとはという方はこちら）</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fe-words.jp%2fw%2fEULA.html" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>自分にアプリに必要なので読まざるを得ないとは言え<br>
利用規約をこんなにしっかり読むことは今までなかったです。。<br>
読んだらわかりやすい内容になっていることがわかったので、参考に自分のアプリ用の利用規約を作成しました。</p>
<p>あとはアプリに報告や問い合わせができるように機能を追加して、再度申請しました。<br>
これで申請が通り、無事リリースすることができました。</p>
<p>このようなものを作らなかったら経験できなかったことかもしれません。<br>
他のアプリ時に役に立つかもしれないし、勉強になりました。</p>
<p>以上です。</p>
]]></content>
        </item>
        
        <item>
            <title>[golang] MessagePackのシリアライザ(msgpack)を作りました</title>
            <link>https://shamaton.dev/posts/570/</link>
            <pubDate>Fri, 28 Sep 2018 13:02:59 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/570/</guid>
            <description>お世話になっております。 しゃまとんです。 ちょっとしたお知らせです。 タイトルの通りなんですが、golangで使えるMessagePackのシリ</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>ちょっとしたお知らせです。<br>
タイトルの通りなんですが、golangで使えるMessagePackのシリアライザを作りました。<br>
（🎉個人的にはパンパカパーン🎉）</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fshamaton%2fmsgpack" title="shamaton/msgpack" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>まず、MessagePackとはデータのシリアライズフォーマットの1つで効率の良い形式として知られています。よくJSONと比較・検証されて使われていることが多いですね。<br>
現在は多くの言語で使えるようになっており、言語間で何かデータのやり取りをするときに候補の1つになっています。</p>
<p><a href="https://msgpack.org/ja.html">公式</a>にもある通り、JSONよりも軽量で速いのが特徴です。</p>
<p>もちろんGo言語でもMessagePackが扱えるパッケージがすでにいくつか存在しており、使いたければ使える状況になっています。自分自身も使っていたのですが、とあるきっかけからpackageを覗いてみたところ、なんとなくもう少し速くできそうかなぁ…と思いました。</p>
<p>で、簡単な検証用ベンチマークコードを書いてみたところ、速くなりそうかなぁ…ということで書き始めたのが最初でした。コードを書き換えてはベンチマークを確認して…実装して…を繰り返しすすめていき、現在（2018.09時点）v1.0としてリリースできました。</p>
<p>エンドポイントの名称は迷ったんですが、いろいろ考えてEncode / Decodeにしました。<br>
呼び出しはこんな感じで。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
     
<span style="color:#f92672">import</span> (
    <span style="color:#e6db74">&#34;github.com/shamaton/msgpack&#34;</span>
)

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
    <span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Struct</span> <span style="color:#66d9ef">struct</span> {
        <span style="color:#a6e22e">String</span> <span style="color:#66d9ef">string</span>
    }
    <span style="color:#a6e22e">v</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">Struct</span>{<span style="color:#a6e22e">String</span>: <span style="color:#e6db74">&#34;msgpack&#34;</span>}
    
    <span style="color:#a6e22e">d</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">msgpack</span>.<span style="color:#a6e22e">Encode</span>(<span style="color:#a6e22e">v</span>)
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
        panic(<span style="color:#a6e22e">err</span>)
    }
    <span style="color:#a6e22e">r</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">Struct</span>{}
    <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">msgpack</span>.<span style="color:#a6e22e">Decode</span>(<span style="color:#a6e22e">d</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">r</span>)
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
        panic(<span style="color:#a6e22e">err</span>)
    }
}
</code></pre></div><p>単純に使うだけならEncode/Decodeを呼び出すだけです！<br>
引数は標準のパッケージencoding/jsonと同じ形にしてます。（置き換えが容易かも&hellip;！）</p>
<p>で、肝心のパフォーマンスですが、まずはシリアライズ。<br>
自分が知っている範囲で他のMessagePackやJSON等の別フォーマットと比較してみます。ベンチマークはおそらくユーザーが呼び出すであろうエンドポイントでとってみました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ go test -bench CompareEncode -benchmem
goos: darwin
goarch: amd64
pkg: github.com/shamaton/msgpack_bench
BenchmarkCompareEncodeShamaton-4             <span style="color:#ae81ff">1000000</span>          <span style="color:#ae81ff">1255</span> ns/op         <span style="color:#ae81ff">320</span> B/op          <span style="color:#ae81ff">3</span> allocs/op
BenchmarkCompareEncodeVmihailenco-4           <span style="color:#ae81ff">300000</span>          <span style="color:#ae81ff">4645</span> ns/op         <span style="color:#ae81ff">968</span> B/op         <span style="color:#ae81ff">14</span> allocs/op
BenchmarkCompareEncodeArrayShamaton-4        <span style="color:#ae81ff">1000000</span>          <span style="color:#ae81ff">1110</span> ns/op         <span style="color:#ae81ff">256</span> B/op          <span style="color:#ae81ff">3</span> allocs/op
BenchmarkCompareEncodeArrayVmihailenco-4      <span style="color:#ae81ff">300000</span>          <span style="color:#ae81ff">4387</span> ns/op         <span style="color:#ae81ff">968</span> B/op         <span style="color:#ae81ff">14</span> allocs/op
BenchmarkCompareEncodeUgorji-4               <span style="color:#ae81ff">1000000</span>          <span style="color:#ae81ff">1921</span> ns/op         <span style="color:#ae81ff">986</span> B/op         <span style="color:#ae81ff">11</span> allocs/op
BenchmarkCompareEncodeZeroformatter-4        <span style="color:#ae81ff">1000000</span>          <span style="color:#ae81ff">1890</span> ns/op         <span style="color:#ae81ff">744</span> B/op         <span style="color:#ae81ff">13</span> allocs/op
BenchmarkCompareEncodeJson-4                  <span style="color:#ae81ff">500000</span>          <span style="color:#ae81ff">3428</span> ns/op        <span style="color:#ae81ff">1224</span> B/op         <span style="color:#ae81ff">16</span> allocs/op
BenchmarkCompareEncodeGob-4                   <span style="color:#ae81ff">200000</span>         <span style="color:#ae81ff">11537</span> ns/op        <span style="color:#ae81ff">2824</span> B/op         <span style="color:#ae81ff">50</span> allocs/op
BenchmarkCompareEncodeProtocolBuffer-4        <span style="color:#ae81ff">500000</span>          <span style="color:#ae81ff">2338</span> ns/op         <span style="color:#ae81ff">792</span> B/op         <span style="color:#ae81ff">29</span> allocs/op
PASS
ok      github.com/shamaton/msgpack_bench   14.481s
</code></pre></div><p>Shamatonとついているものが今回リリースしたものになります。ArrayShamatonというのはMessagePackのフォーマットが軽量なパターンを採用しているものです（Unityでは<a href="https://github.com/neuecc/MessagePack-CSharp">MessagePack-CSharp</a>でおなじみですね？）。今回のケースでは通常のEncodeでも他のパッケージよりも性能よく動作させられたっぽいです。</p>
<p>次にデシリアライズです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ go test -bench CompareDecode -benchmem
goos: darwin
goarch: amd64
pkg: github.com/shamaton/msgpack_bench
BenchmarkCompareDecodeShamaton-4             <span style="color:#ae81ff">1000000</span>          <span style="color:#ae81ff">1393</span> ns/op         <span style="color:#ae81ff">512</span> B/op          <span style="color:#ae81ff">6</span> allocs/op
BenchmarkCompareDecodeVmihailenco-4           <span style="color:#ae81ff">300000</span>          <span style="color:#ae81ff">5393</span> ns/op        <span style="color:#ae81ff">1056</span> B/op         <span style="color:#ae81ff">33</span> allocs/op
BenchmarkCompareDecodeArrayShamaton-4        <span style="color:#ae81ff">2000000</span>           <span style="color:#ae81ff">990</span> ns/op         <span style="color:#ae81ff">512</span> B/op          <span style="color:#ae81ff">6</span> allocs/op
BenchmarkCompareDecodeArrayVmihailenco-4      <span style="color:#ae81ff">300000</span>          <span style="color:#ae81ff">4397</span> ns/op         <span style="color:#ae81ff">992</span> B/op         <span style="color:#ae81ff">22</span> allocs/op
BenchmarkCompareDecodeUgorji-4                <span style="color:#ae81ff">500000</span>          <span style="color:#ae81ff">2587</span> ns/op         <span style="color:#ae81ff">845</span> B/op         <span style="color:#ae81ff">12</span> allocs/op
BenchmarkCompareDecodeZeroformatter-4        <span style="color:#ae81ff">1000000</span>          <span style="color:#ae81ff">2350</span> ns/op         <span style="color:#ae81ff">976</span> B/op         <span style="color:#ae81ff">29</span> allocs/op
BenchmarkCompareDecodeJson-4                  <span style="color:#ae81ff">200000</span>          <span style="color:#ae81ff">8904</span> ns/op        <span style="color:#ae81ff">1216</span> B/op         <span style="color:#ae81ff">43</span> allocs/op
BenchmarkCompareDecodeGob-4                    <span style="color:#ae81ff">50000</span>         <span style="color:#ae81ff">34805</span> ns/op       <span style="color:#ae81ff">10172</span> B/op        <span style="color:#ae81ff">275</span> allocs/op
BenchmarkCompareDecodeProtocolBuffer-4       <span style="color:#ae81ff">1000000</span>          <span style="color:#ae81ff">1759</span> ns/op         <span style="color:#ae81ff">656</span> B/op         <span style="color:#ae81ff">19</span> allocs/op
PASS
ok      github.com/shamaton/msgpack_bench   16.946s
</code></pre></div><p>こちらも性能良く動作させられたっぽいです。ただProtocol Bufferはデータの形次第でパフォーマンス良くなることがありました（struct onlyな構成など）。まぁprotoファイルとかを準備しないといけないので、その点よいかなーと。</p>
<p>結果を見る感じだとArray呼び出しがパフォーマンスがやはり良いので、使えるならAsArrayを使うのが良さそうかなと思います。ベンチマークですが、こちらにコードがあるので何かあれば教えてください。</p>
<p>ということで、単純な呼び出しでMessagePack系では割と速いシリアライザを作ることが出来ました。よかったよかった。それと今回の実装で<a href="https://github.com/shamaton/zeroformatter">zeroformatter</a>側にも反映できそうなところもわかったので、対応できればなーと思っています。</p>
<p>あと余談ですが、タグでシリアライズ対象の設定ができたりとか、拡張エンコード・デコードにも対応させたりもしてます。（この辺はREADMEとかExampleに書く予定です）</p>
<p>よかったら使ってみてください！<br>
以上です。</p>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">I&#39;ve just published MessagePack Serializer(v1.0.0) for golang. Its performance is faster than the others. You can use simply. Please see and try it!! 🎉🎉🎉<a href="https://t.co/X4P5qNWOzH">https://t.co/X4P5qNWOzH</a><a href="https://twitter.com/hashtag/Golang?src=hash&amp;ref_src=twsrc%5Etfw">#Golang</a></p>&mdash; しゃまとん (@shamaton) <a href="https://twitter.com/shamaton/status/1045659310737346561?ref_src=twsrc%5Etfw">September 28, 2018</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

]]></content>
        </item>
        
        <item>
            <title>[gRPC] UnityとgolangでgRPCを使ってみる（iOSも）</title>
            <link>https://shamaton.dev/posts/563/</link>
            <pubDate>Thu, 09 Aug 2018 23:36:14 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/563/</guid>
            <description>お世話になっております。 しゃまとんです。 前回の記事でiOSで実行できなかったので、追加記事を作成しました。 こちらで一応iOSでもビルドが通る</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>前回の記事でiOSで実行できなかったので、追加記事を作成しました。</p>









<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fshamaton.dev%2fposts%2f553" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>こちらで一応iOSでもビルドが通るようになりました。<br>
簡単ですが以下、手順です。</p>
<p>まずは、gRPCのライブラリ群（Plugins）をまるっと入れ替えしました。<br>
前回の記事にリンクした<a href="https://github.com/grpc/grpc/issues/15013">issue</a>に書き込みをされているユーザーさんがUnity向けにビルドしたパッケージを置いてくれているのでそちらを使いました。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fjsmouret%2fgrpc-unity-package%2freleases" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>ただ、こちらでもそのままXcodeに持っていても別の原因でビルドが通りません。libresolvというライブラリへの参照が必要なので、UnityのiOSビルド時に参照が追加されるようにしておきます。こちらのコードはEditorフォルダを作成した配置しておきましょう。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">using</span> System.IO;
<span style="color:#66d9ef">using</span> UnityEngine;
<span style="color:#66d9ef">using</span> UnityEditor;
<span style="color:#66d9ef">using</span> UnityEditor.iOS.Xcode;
<span style="color:#66d9ef">using</span> UnityEditor.Callbacks;

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">XcodeSettings</span> {
<span style="color:#a6e22e">
</span><span style="color:#a6e22e">  [PostProcessBuildAttribute(0)]</span>
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> OnPostprocessBuild(BuildTarget buildTarget, <span style="color:#66d9ef">string</span> pathToBuiltProject) {

    <span style="color:#75715e">// Stop processing if target is NOT iOS
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (buildTarget != BuildTarget.iOS)
      <span style="color:#66d9ef">return</span>;

    <span style="color:#75715e">// Initialize PbxProject
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">var</span> projectPath = pathToBuiltProject + <span style="color:#e6db74">&#34;/Unity-iPhone.xcodeproj/project.pbxproj&#34;</span>;
    PBXProject proj = <span style="color:#66d9ef">new</span> PBXProject();
    proj.ReadFromFile(projectPath);
    <span style="color:#66d9ef">string</span> target = proj.TargetGuidByName(<span style="color:#e6db74">&#34;Unity-iPhone&#34;</span>);

    <span style="color:#75715e">// need libresolv for gRPC
</span><span style="color:#75715e"></span>    proj.AddFileToBuild(target, proj.AddFile(<span style="color:#e6db74">&#34;usr/lib/libresolv.9.dylib&#34;</span>, <span style="color:#e6db74">&#34;Frameworks/libresolv.9.dylib&#34;</span>, PBXSourceTree.Sdk));

    <span style="color:#75715e">// Apply settings
</span><span style="color:#75715e"></span>    File.WriteAllText(projectPath, proj.WriteToString());

  }
}
</code></pre></div><p>これでiOSビルドが通ります！<br>
これで実行してみた結果です。（しまった、こっちも文字が小さい。。）</p>
<figure class="center">
    <img src="/images/posts/2018/08/grpc_ios.png.jpeg" width="200"/> 
</figure>

<p>最初クライアントコードをそのままで確認していたのですが、なぜか返答が得られず困っていたので、
ボタンと追加してやってみたところ、返答がもらえました。<br>
最初のRPCではエラーっぽいんですけど、その後はうまくいくっていう。。。
ちょっと挙動がわからない部分があるので試してみる方は注意してやってみてください。</p>
<p>あと余談なんですが、アプリサイズが現状（2018/08時点）だとかなり膨らんでしまうっぽいです。
gRPCのライブラリサイズが大きいからだと思うのですが、この辺は今後に期待でしょうか。</p>
<p>以上です。</p>
]]></content>
        </item>
        
        <item>
            <title>[gRPC] UnityとgolangでgRPCを使ってみる（androidまで）</title>
            <link>https://shamaton.dev/posts/553/</link>
            <pubDate>Thu, 09 Aug 2018 13:57:14 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/553/</guid>
            <description>お世話になっております。 しゃまとんです。 前の記事でまずはgolangでgRPCを使って動作させてみました。 今回はclient側にUnityを</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>前の記事でまずはgolangでgRPCを使って動作させてみました。</p>









<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fshamaton.dev%2fposts%2f542" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>今回はclient側にUnityを使ってみたいと思います。<br>
実行環境はこんな感じでした。</p>
<p>Unity2018.1.1f1（OSはMacです）<br>
Go 1.10.3</p>
<p>まずUnityでgRPCを使うには.NETのバージョンを上げておく必要があります。<br>
Menu:Edit -&gt; Project Settings -&gt; Player -&gt; Configuration として図のように設定しておきます。</p>
<figure>
    <img src="/images/posts/2018/08/grpc_config.png"/> 
</figure>

<p>次にgRPC関連の必要なパッケージを用意しましょう。<br>
本当に最近（2018/08時点）ですが、公式でビルド済みのライブラリを用意してくれるようなりました！</p>
<p>まだexperimentalなので、ご注意くださいね<br>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fgrpc%2fgrpc%2fissues%2f15013" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
<p>ということでこちら（<a href="https://packages.grpc.io/">https://packages.grpc.io/</a>）にアクセスし、
Daily Builds of master Branchの項目の最新のBuild IDのリンクをクリックします。</p>
<figure>
    <img src="/images/posts/2018/08/grpc_download.png"/> 
</figure>

<p>するとパッケージのリストがあるので、Grpc.Toolsとgrpc_unity_packageをダウンロードしましょう。</p>
<figure>
    <img src="/images/posts/2018/08/grpc_download2.png"/> 
</figure>

<p>ダウンロードしたら、Unityで新規プロジェクトを作成し、とりあえず移動させておきます。</p>
<p>Grpc.Toolsはnupkgになっていますが、拡張子をzipに変更することで簡単に解凍することができます。
ただGUI上で解凍すると、フォルダ構成がうまく復元できないことがあったので、コマンドで実行するほうがよいかもしれません。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e"># できればフォルダを用意しておくとよい</span>
$ mkdir Grpc.Tools
 
<span style="color:#75715e"># zipに変更して解凍</span>
$ mv Grpc.Tools.1.15.0-dev.nupkg Grpc.Tools.1.15.0-dev.zip
$ unzip Grpc.Tools.1.15.0-dev.zip -d Grpc.Tools
Archive:  Grpc.Tools.1.15.0-dev.zip
  inflating: Grpc.Tools/_rels/.rels
  inflating: Grpc.Tools/Grpc.Tools.nuspec
  inflating: Grpc.Tools/tools/windows_x86/protoc.exe
  inflating: Grpc.Tools/tools/windows_x86/grpc_csharp_plugin.exe
  ...
  inflating: Grpc.Tools/tools/macosx_x64/protoc
  inflating: Grpc.Tools/tools/macosx_x64/grpc_csharp_plugin
  inflating: Grpc.Tools/<span style="color:#f92672">[</span>Content_Types<span style="color:#f92672">]</span>.xml
  inflating: Grpc.Tools/package/services/metadata/core-properties/8799bc730c0846ad904b28d32702ee35.psmdcp

<span style="color:#75715e"># 対象OSのtoolに実行権限を付与</span>
$ chmod +x Grpc.Tools/tools/macosx_x64/*
</code></pre></div><p>grpc_unity_packageはUnityで必要になるので、Assets配下にフォルダを作成して解凍します。
こちらはPluginsにすべて含まれた状態になるので、Assetsを対象にして解凍します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ unzip grpc_unity_package.1.15.0-dev.zip -d Assets
Archive:  grpc_unity_package.1.15.0-dev.zip
warning:  grpc_unity_package.1.15.0-dev.zip appears to use backslashes as path separators
  inflating: Assets/Plugins/Google.Protobuf.meta
  inflating: Assets/Plugins/Grpc.Core.meta
  inflating: Assets/Plugins/System.Interactive.Async.meta
  ...
  inflating: Assets/Plugins/System.Interactive.Async/lib/net45/System.Interactive.Async.dll
  inflating: Assets/Plugins/System.Interactive.Async/lib/net45/System.Interactive.Async.dll.meta
  inflating: Assets/Plugins/System.Interactive.Async/lib/net45/System.Interactive.Async.xml.meta
</code></pre></div><p>これでgolangと同じ準備ができた（はず）ので、protoファイルを作成して実装を進めていきます。基本的に前回のものと一緒ですが、namespaceだけ分けておくため、追記して何処かに配置しておきましょう。（本当は共通のものを参照しているとよい）</p>
<p>今回はGrpcSample（プロジェクト名）/protosに配置しました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-proto" data-lang="proto">syntax <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;proto3&#34;</span>;<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">#</span> <span style="color:#960050;background-color:#1e0010">これを追記
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">option</span> csharp_namespace <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Pj.Grpc.Sample&#34;</span>;<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#f92672">package</span> helloworld;<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>protoをC#に変換します。出力時に指定のフォルダがないとエラーになってしまうので、
事前に作成しておく必要があります。そして生成コマンドがgolangより長い。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e"># 出力先を作成</span>
$ mkdir -p Assets/Pj.Grpc

<span style="color:#75715e"># コード生成</span>
$ protoc -I protos --csharp_out Assets/Pj.Grpc <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>  --grpc_out Assets/Pj.Grpc protos/*.proto <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>  --plugin<span style="color:#f92672">=</span>protoc-gen-grpc<span style="color:#f92672">=</span>Grpc.Tools/tools/macosx_x64/grpc_csharp_plugin

<span style="color:#75715e"># 確認</span>
$ ls Assets/Pj.Grpc
Helloworld.cs     HelloworldGrpc.cs
</code></pre></div><p>それでは生成したコードを利用して、クライアントを書きます。
適当なシーンを作成しUI.Textを参照させておいてください。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">using</span> System.Collections;
<span style="color:#66d9ef">using</span> System.Collections.Generic;
<span style="color:#66d9ef">using</span> UnityEngine;
<span style="color:#66d9ef">using</span> UnityEngine.UI;
<span style="color:#66d9ef">using</span> Grpc.Core;
<span style="color:#66d9ef">using</span> Pj.Grpc.Sample;

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Sample</span> : MonoBehaviour {

  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> ip = <span style="color:#e6db74">&#34;127.0.0.1&#34;</span>;
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> port = <span style="color:#e6db74">&#34;9999&#34;</span>;

  <span style="color:#66d9ef">public</span> Text text;

  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">void</span> Start() {
    text.text = <span style="color:#e6db74">&#34;wait reply...&#34;</span>;
    Say();
  }

  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">void</span> Say() {
    Channel channel = <span style="color:#66d9ef">new</span> Channel(ip + <span style="color:#e6db74">&#34;:&#34;</span> + port, ChannelCredentials.Insecure);

    <span style="color:#66d9ef">var</span> client = <span style="color:#66d9ef">new</span> Greeter.GreeterClient(channel);
    <span style="color:#66d9ef">string</span> user = <span style="color:#e6db74">&#34;editor&#34;</span>;
<span style="color:#75715e">#if UNITY_ANDROID &amp;&amp; !UNITY_EDITOR
</span><span style="color:#75715e"></span>    user = <span style="color:#e6db74">&#34;android&#34;</span>;
<span style="color:#75715e">#elif UNITY_IOS &amp;&amp; !UNITY_EDITOR
</span><span style="color:#75715e"></span>    user = <span style="color:#e6db74">&#34;ios&#34;</span>;
<span style="color:#75715e">#endif
</span><span style="color:#75715e"></span>
    <span style="color:#66d9ef">var</span> reply = client.SayHello(<span style="color:#66d9ef">new</span> HelloRequest { Name = user });
    Debug.Log(<span style="color:#e6db74">&#34;reply: &#34;</span> + reply.Message);
    text.text = <span style="color:#e6db74">&#34;reply: &#34;</span> + reply.Message;

    channel.ShutdownAsync().Wait();
  }
}
</code></pre></div><p>それではserver.goを実行した状態で、Unityの再生を開始すると…<br>
replyがきます！</p>
<figure>
    <img src="/images/posts/2018/08/grpc_unity_editor.gif"/> 
</figure>

<p>一応サーバーはこうなります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ go run server.go
2018/08/09 22:35:34 call from editor
</code></pre></div><p>最後に端末で動作確認してみたいと思います。
Project SettingsのIdentificationを初期値から適当に使わなさそうな名前に変更しておきましょう。</p>
<figure>
    <img src="/images/posts/2018/08/grpc_id.png"/> 
</figure>

<p>あとはSwitch PlatformしてAndroid / iOSビルドするだけ！と思っていたのですが、iOSではビルドエラーになってしまうようでした。。。Androidでの実行結果だけ残しておきます。</p>
<figure>
    <img src="/images/posts/2018/08/grpc_android.png"/> 
</figure>

<p>文字が小さくてすいません。。<br>
以上です。</p>
<p>追記：iOSもできました！</p>









<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fshamaton.dev%2fposts%2f563" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>■ 参考<br>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fqiita.com%2fjhorikawa_err%2fitems%2ff75539ffe6cd7a360f65" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
]]></content>
        </item>
        
        <item>
            <title>[gRPC] golangでgRPCを使ってみる</title>
            <link>https://shamaton.dev/posts/542/</link>
            <pubDate>Wed, 08 Aug 2018 13:45:46 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/542/</guid>
            <description>お世話になっております。 しゃまとんです。 gRPC触ってみたいぞ！ってことで、Unity x golang x gRPC を試してみましょう。 今回はよくある方のgola</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>gRPC触ってみたいぞ！ってことで、Unity x golang x gRPC を試してみましょう。<br>
今回はよくある方のgolangです。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgrpc.io%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>まずは必要なパッケージたちを準備していきましょう。<br>
gRPCはprotoファイルを作成して、そこから各言語毎のソースコードを生成します。<br>
そのためgolang用のgrpcのダウンロードとprotocコマンドを使えるようにしておきます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e"># golang用のgRPCパッケージを取得</span>
go get -u google.golang.org/grpc

<span style="color:#75715e"># protocを使えるようにする</span>
<span style="color:#75715e"># go get -u github.com/golang/protobuf/protoc-gen-go でもOK（要PATH設定）</span>
brew install protobuf

<span style="color:#75715e">#　確認</span>
protoc --version
libprotoc 3.*.*
</code></pre></div><p>protocのバージョンは3以上にしましょう（何も考えなければそうなる）</p>
<p>それではGOPATHの通ったどこかに作業用ディレクトリを作成し、まずはprotoファイルを作成します。今回はgrpctestとしました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e"># 作業用フォルダ作成</span>
cd $GOPATH/src
mkdir grpctest
cd grpctest

<span style="color:#75715e"># protoファイルの置き場</span>
mkdir helloworld
touch helloworld.proto
</code></pre></div><p>protoファイルは公式と同じ感じです！</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-proto" data-lang="proto">syntax <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;proto3&#34;</span>;<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#f92672">package</span> helloworld;<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">// The greeting service definition.
</span><span style="color:#75715e"></span><span style="color:#66d9ef">service</span> Greeter {<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#75715e">// Sends a greeting
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">rpc</span> SayHello (HelloRequest) <span style="color:#66d9ef">returns</span> (HelloReply) {}<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>}<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">// The request message containing the user&#39;s name.
</span><span style="color:#75715e"></span><span style="color:#66d9ef">message</span> <span style="color:#a6e22e">HelloRequest</span> {<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#66d9ef">string</span> name <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>}<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">// The response message containing the greetings
</span><span style="color:#75715e"></span><span style="color:#66d9ef">message</span> <span style="color:#a6e22e">HelloReply</span> {<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>  <span style="color:#66d9ef">string</span> <span style="color:#66d9ef">message</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>}<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>用意できたらコードを生成してみましょう。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e"># goのコードを生成</span>
protoc --go_out<span style="color:#f92672">=</span>plugins<span style="color:#f92672">=</span>grpc:. ./helloworld/*.proto

<span style="color:#75715e"># 確認（pb.goが作成されている）</span>
ls helloworld/
helloworld.pb.go helloworld.proto
</code></pre></div><p>次にclient / serverのコードを作成します。先程生成したpb.goを利用しつつコードを書く感じですね。まずはserverです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>

<span style="color:#f92672">import</span> (
    <span style="color:#e6db74">&#34;log&#34;</span>
    <span style="color:#e6db74">&#34;net&#34;</span>

    <span style="color:#a6e22e">pb</span> <span style="color:#e6db74">&#34;grpctest/helloworld&#34;</span>
    <span style="color:#e6db74">&#34;golang.org/x/net/context&#34;</span>
    <span style="color:#e6db74">&#34;google.golang.org/grpc&#34;</span>
)

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">service</span> <span style="color:#66d9ef">struct</span>{}

<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">s</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">service</span>) <span style="color:#a6e22e">SayHello</span>(<span style="color:#a6e22e">ctx</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Context</span>, <span style="color:#a6e22e">req</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">pb</span>.<span style="color:#a6e22e">HelloRequest</span>) (<span style="color:#f92672">*</span><span style="color:#a6e22e">pb</span>.<span style="color:#a6e22e">HelloReply</span>, <span style="color:#66d9ef">error</span>) {
    <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;call from&#34;</span>, <span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">Name</span>)
    <span style="color:#a6e22e">rsp</span> <span style="color:#f92672">:=</span> new(<span style="color:#a6e22e">pb</span>.<span style="color:#a6e22e">HelloReply</span>)
    <span style="color:#a6e22e">rsp</span>.<span style="color:#a6e22e">Message</span> = <span style="color:#e6db74">&#34;Hello &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">Name</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;.&#34;</span>
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">rsp</span>, <span style="color:#66d9ef">nil</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {

    <span style="color:#a6e22e">l</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">net</span>.<span style="color:#a6e22e">Listen</span>(<span style="color:#e6db74">&#34;tcp&#34;</span>, <span style="color:#e6db74">&#34;:9999&#34;</span>)
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
        <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatalln</span>(<span style="color:#a6e22e">err</span>)
    }
    <span style="color:#a6e22e">s</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">grpc</span>.<span style="color:#a6e22e">NewServer</span>()
    <span style="color:#a6e22e">pb</span>.<span style="color:#a6e22e">RegisterGreeterServer</span>(<span style="color:#a6e22e">s</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">service</span>{})
    <span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">Serve</span>(<span style="color:#a6e22e">l</span>)

}
</code></pre></div><p>次にclientです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>

<span style="color:#f92672">import</span> (
    <span style="color:#e6db74">&#34;log&#34;</span>
    <span style="color:#e6db74">&#34;os&#34;</span>
    <span style="color:#e6db74">&#34;time&#34;</span>

    <span style="color:#e6db74">&#34;golang.org/x/net/context&#34;</span>
    <span style="color:#e6db74">&#34;google.golang.org/grpc&#34;</span>
    <span style="color:#a6e22e">pb</span> <span style="color:#e6db74">&#34;grpctest/helloworld&#34;</span>
)

<span style="color:#66d9ef">const</span> (
    <span style="color:#a6e22e">address</span>     = <span style="color:#e6db74">&#34;localhost:9999&#34;</span>
    <span style="color:#a6e22e">defaultName</span> = <span style="color:#e6db74">&#34;world&#34;</span>
)

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
    <span style="color:#75715e">// Set up a connection to the server.
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">conn</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">grpc</span>.<span style="color:#a6e22e">Dial</span>(<span style="color:#a6e22e">address</span>, <span style="color:#a6e22e">grpc</span>.<span style="color:#a6e22e">WithInsecure</span>())
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
        <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatalf</span>(<span style="color:#e6db74">&#34;did not connect: %v&#34;</span>, <span style="color:#a6e22e">err</span>)
    }
    <span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">conn</span>.<span style="color:#a6e22e">Close</span>()
    <span style="color:#a6e22e">c</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">pb</span>.<span style="color:#a6e22e">NewGreeterClient</span>(<span style="color:#a6e22e">conn</span>)

    <span style="color:#75715e">// Contact the server and print out its response.
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">name</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">defaultName</span>
    <span style="color:#66d9ef">if</span> len(<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Args</span>) <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">gt</span>; <span style="color:#ae81ff">1</span> {
        <span style="color:#a6e22e">name</span> = <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Args</span>[<span style="color:#ae81ff">1</span>]
    }
    <span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">cancel</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">WithTimeout</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Background</span>(), <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Second</span>)
    <span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">cancel</span>()
    <span style="color:#a6e22e">r</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">SayHello</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">pb</span>.<span style="color:#a6e22e">HelloRequest</span>{<span style="color:#a6e22e">Name</span>: <span style="color:#a6e22e">name</span>})
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
        <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatalf</span>(<span style="color:#e6db74">&#34;could not greet: %v&#34;</span>, <span style="color:#a6e22e">err</span>)
    }
    <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;Greeting: %s&#34;</span>, <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">Message</span>)
}
</code></pre></div><p>それでは実行してみましょう！ターミナルを2つ用意して&hellip;
先にserverを実行してからclientを実行してみると下記のように表示されます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e"># client</span>
$ go run client.go
2018/08/08 21:50:43 Greeting: Hello world.

$ go run client.go shamaton
2018/08/08 21:50:47 Greeting: Hello shamaton.

<span style="color:#75715e"># server</span>
$ go run server.go
2018/08/08 21:50:43 call from world
2018/08/08 21:50:47 call from shamaton
</code></pre></div><p>こんな感じでgolang単体で動作するようになりました！<br>
次はクライアントをUnityにして、動作させてみたいと思います。</p>
<p>以上です。</p>









<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fshamaton.dev%2fposts%2f553" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>■ 参考</p>
<p>






<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fqiita.com%2foohira%2fitems%2f63b5ccb2bf1a913659d6" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>








<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fblog.fenrir-inc.com%2fjp%2f2016%2f10%2fgrpc-go.html" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>








<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgrpc.io%2fdocs%2fquickstart%2fgo.html" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
]]></content>
        </item>
        
        <item>
            <title>[GCP] CloudSQLのデータをCSV出力するには</title>
            <link>https://shamaton.dev/posts/517/</link>
            <pubDate>Sun, 29 Jul 2018 14:06:10 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/517/</guid>
            <description>お世話になっております。 しゃまとんです。 GCPのマネージドデータベースであるCloudSQLにて、DBからCSV化を行いたいと思いもろもろを</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>GCPのマネージドデータベースであるCloudSQLにて、DBからCSV化を行いたいと思いもろもろを調べていたのですが、
ちょっと手こずったのでメモしておきたいと思います。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fcloud.google.com%2fsql%3fhl%3dja" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>CSV出力はどのようにするかぐぐってみると、よく出てくるのが</p>
<p><code>SELECT ... INTO OUTFILE</code></p>
<p>でのやり方です。</p>
<p>ですが、これをCloudSQLに対して実行すると</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Access denied for user user@cloudsqlproxy~% (using password: YES)
</code></pre></div><p>ようなエラーとなり拒否されてしまいます。<br>
これは公式にもあるのですが、CloudSQLではOUTFILEがサポートされていません。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fcloud.google.com%2fsql%2fdocs%2ffeatures%3fhl%3dja" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>やり方として、CloudStorageに対してエクスポートする手法を公式で説明していますが
いちいち経由するのがちと煩わしいなというところで、別の対処法でCSV化することができます。</p>
<p>やり方は結構シンプルでシェル上でデータを取得（SELECT）して、出力された文字を置換していくだけです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">mysql -h localhost --protocol TCP -P <span style="color:#ae81ff">3306</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>  -uuser -ppassword <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>  -e <span style="color:#e6db74">&#34;select * from user;&#34;</span> | sed -e <span style="color:#e6db74">&#39;s/^/&#34;/g&#39;</span> | sed -e <span style="color:#e6db74">&#39;s/$/&#34;/g&#39;</span> | sed -e <span style="color:#e6db74">&#39;s/\t/&#34;,&#34;/g&#39;</span> &gt; ./output.csv
</code></pre></div><p>上記の例では、全ての項目に対して「&quot;」ではさみ、カンマで区切ったものになります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">&#34;id&#34;,&#34;name&#34;
&#34;1&#34;,&#34;taro&#34;
&#34;2&#34;,&#34;jiro&#34;
</code></pre></div><p>これでシェル上では対応できるのですが、自分はスクリプト化したかったのでGoで同じような処理をするものを書いてみました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">db2csv</span>(<span style="color:#a6e22e">user</span>, <span style="color:#a6e22e">pass</span>, <span style="color:#a6e22e">host</span>, <span style="color:#a6e22e">port</span>,　<span style="color:#a6e22e">dataBase</span>, <span style="color:#a6e22e">tableName</span> <span style="color:#66d9ef">string</span>) {
    
    <span style="color:#a6e22e">csvFileName</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">tableName</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;.csv&#34;</span>

    <span style="color:#a6e22e">dataSQL</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;SELECT * FROM &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">tableName</span>
    <span style="color:#a6e22e">ret</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">execCommand</span>(
        <span style="color:#e6db74">&#34;mysql&#34;</span>, <span style="color:#e6db74">&#34;-h&#34;</span>, <span style="color:#a6e22e">host</span>, <span style="color:#e6db74">&#34;--protocol&#34;</span>, <span style="color:#e6db74">&#34;TCP&#34;</span>, <span style="color:#e6db74">&#34;-P&#34;</span>, <span style="color:#a6e22e">port</span>, <span style="color:#e6db74">&#34;-u&#34;</span><span style="color:#f92672">+</span><span style="color:#a6e22e">user</span>, <span style="color:#e6db74">&#34;-p&#34;</span><span style="color:#f92672">+</span><span style="color:#a6e22e">pass</span>, <span style="color:#a6e22e">dataBase</span>, <span style="color:#e6db74">&#34;-e&#34;</span>, <span style="color:#a6e22e">dataSQL</span>,
    )

    <span style="color:#a6e22e">scanner</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">bufio</span>.<span style="color:#a6e22e">NewScanner</span>(<span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">NewReader</span>(string(<span style="color:#a6e22e">ret</span>)))
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">columns</span> []<span style="color:#66d9ef">string</span>
    <span style="color:#a6e22e">isHeaderChecked</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">false</span>
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">scanner</span>.<span style="color:#a6e22e">Scan</span>() {
        <span style="color:#a6e22e">str</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;&#34;</span>
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">isHeaderChecked</span> {
            <span style="color:#a6e22e">str</span> = <span style="color:#e6db74">&#34;\&#34;&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">scanner</span>.<span style="color:#a6e22e">Text</span>() <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;\&#34;&#34;</span>
            <span style="color:#a6e22e">str</span> = <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">Replace</span>(<span style="color:#a6e22e">str</span>, <span style="color:#e6db74">&#34;\t&#34;</span>, <span style="color:#e6db74">&#34;\&#34;,\&#34;&#34;</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
        } <span style="color:#66d9ef">else</span> {
            <span style="color:#a6e22e">str</span> = <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">Replace</span>(<span style="color:#a6e22e">scanner</span>.<span style="color:#a6e22e">Text</span>(), <span style="color:#e6db74">&#34;\t&#34;</span>, <span style="color:#e6db74">&#34;,&#34;</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
            <span style="color:#a6e22e">isHeaderChecked</span> = <span style="color:#66d9ef">true</span>
        }
        <span style="color:#a6e22e">columns</span> = append(<span style="color:#a6e22e">columns</span>, <span style="color:#a6e22e">str</span>)
    }
    <span style="color:#a6e22e">columnStr</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">Join</span>(<span style="color:#a6e22e">columns</span>, <span style="color:#e6db74">&#34;\n&#34;</span>)

    <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">ioutil</span>.<span style="color:#a6e22e">WriteFile</span>(<span style="color:#a6e22e">csvFileName</span>, []byte(<span style="color:#a6e22e">columnStr</span>), <span style="color:#ae81ff">0644</span>)
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
        panic(<span style="color:#a6e22e">err</span>)
    }
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">execCommand</span>(<span style="color:#a6e22e">command</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">args</span> <span style="color:#f92672">...</span><span style="color:#66d9ef">string</span>) []<span style="color:#66d9ef">byte</span> {

    <span style="color:#a6e22e">path</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">exec</span>.<span style="color:#a6e22e">LookPath</span>(<span style="color:#a6e22e">command</span>)
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
        panic(<span style="color:#a6e22e">err</span>)
    }

    <span style="color:#a6e22e">cmd</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">exec</span>.<span style="color:#a6e22e">Command</span>(<span style="color:#a6e22e">path</span>, <span style="color:#a6e22e">args</span><span style="color:#f92672">...</span>)

    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">stdErr</span>, <span style="color:#a6e22e">stdOut</span> <span style="color:#a6e22e">bytes</span>.<span style="color:#a6e22e">Buffer</span>
    <span style="color:#a6e22e">cmd</span>.<span style="color:#a6e22e">Stderr</span> = <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">stdErr</span>
    <span style="color:#a6e22e">cmd</span>.<span style="color:#a6e22e">Stdout</span> = <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">stdOut</span>

    <span style="color:#75715e">// exec
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">cmd</span>.<span style="color:#a6e22e">Run</span>()
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
        <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">stdErr</span>.<span style="color:#a6e22e">String</span>())
        panic(<span style="color:#a6e22e">err</span>)
    }

    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">stdOut</span>.<span style="color:#a6e22e">Bytes</span>()
}
</code></pre></div><p>シェルスクリプトと若干違うのですが、最初の行のカラムには「&quot;」をつけないようにしています。
CSVからINSERT文を生成するさいに邪魔になっていたので。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">id,name
&#34;1&#34;,&#34;taro&#34;
&#34;2&#34;,&#34;jiro&#34;
</code></pre></div><p>最初は、シェルの処理をそのままGo内で使おうとしていたのですが、なかなかうまくいかなかった（パイプが結構めんどい）ので、
他の機能を使って同じような処理を行いました。</p>
<p>ちなみに、メモリコピーが走ったりするので、簡易的なスクリプト等にとどめていただけると幸いです。<br>
以上です。</p>
<p>■ 参考</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fqiita.com%2fkurkuru%2fitems%2f9daee5e9d18d0a7154d5" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

]]></content>
        </item>
        
        <item>
            <title>[Unity] 申請用のスクリーンショットをエディタで作る</title>
            <link>https://shamaton.dev/posts/478/</link>
            <pubDate>Sat, 14 Jul 2018 02:52:06 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/478/</guid>
            <description>お世話になっております。 しゃまとんです。 iOS/Androidのアプリ申請時に何かしらのスクリーンショットが必要なわけで、 ことだまっぷのとき</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>iOS/Androidのアプリ申請時に何かしらのスクリーンショットが必要なわけで、
ことだまっぷのときにも色々な解像度の素材を用意しないといけないのか&hellip;と嫌な感じになっていました。</p>
<p>ところが、そんなことも無いようでiOSで5.5インチサイズと12.9インチのものがあれば良くなったようです。
（昔はもっと面倒だった気が）</p>
<p>詳しくはこの辺をみるとよさそうです。</p>
<p><a href="http://help.apple.com/itunes-connect/developer/#/dev4e413fcb8">http://help.apple.com/itunes-connect/developer/#/dev4e413fcb8</a><br>
<a href="http://help.apple.com/itunes-connect/developer/#/devd274dd925">http://help.apple.com/itunes-connect/developer/#/devd274dd925</a></p>
<p>Androidに関しては細かい指定がなかったので、iOSで作ったものをそのまま利用することにしました。</p>
<p>で、肝心のスクリーンショットはどうしたらいいのかですが、
端末でキャプチャして転送してみたいなのも面倒だなということでエディタ上でキャプチャしてしまうことにしました。
（広告とか、デバック表示とか消すもの楽ですし）</p>
<p>まず指定の解像度でキャプチャできるようにUnityエディタで設定をします。<br>
Gameビューの左上にあるAspectの部分を選択すると、一番下にプラスボタンがあるので押すと、
どのような条件にするのか聞かれるので解像度を指定します。</p>
<p><figure>
    <img src="/images/posts/2017/12/ss1.png"/> 
</figure>

<figure>
    <img src="/images/posts/2017/12/ss2.png"/> 
</figure>
</p>
<p>次にコレをキャプチャするためのコードを組みます。<br>
メニューから選択してキャプチャする形式にしました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">using</span> System.Collections;
<span style="color:#66d9ef">using</span> System.Collections.Generic;
<span style="color:#66d9ef">using</span> System.IO;
<span style="color:#66d9ef">using</span> UnityEditor;
<span style="color:#66d9ef">using</span> UnityEngine;

<span style="color:#75715e">/////////////////////////////////////////////////////////////////////////////////////////////////
</span><span style="color:#75715e">/// &lt;summary&gt;
</span><span style="color:#75715e">/// スクリーンショット機能
</span><span style="color:#75715e">/// &lt;summary&gt;
</span><span style="color:#75715e">/////////////////////////////////////////////////////////////////////////////////////////////////
</span><span style="color:#75715e"></span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Screenshot</span> {

  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">string</span> outputDir = <span style="color:#e6db74">&#34;ScreenShots/&#34;</span>;
  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">string</span> fileName = <span style="color:#e6db74">&#34;capture.png&#34;</span>;

  <span style="color:#75715e">/////////////////////////////////////////////////////////////////////////////////////////////////
</span><span style="color:#75715e"></span>  <span style="color:#75715e">/// &lt;summary&gt;
</span><span style="color:#75715e"></span>  <span style="color:#75715e">/// キャプチャ
</span><span style="color:#75715e"></span>  <span style="color:#75715e">/// &lt;summary&gt;
</span><span style="color:#75715e"></span>  <span style="color:#75715e">/////////////////////////////////////////////////////////////////////////////////////////////////
</span><span style="color:#75715e"></span><span style="color:#a6e22e">  [MenuItem(&#34;Tools/Screen Shot&#34;)]</span>
  <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> Capture() {
    <span style="color:#66d9ef">string</span> path = getOutputPath();
    <span style="color:#66d9ef">if</span> (!Directory.Exists(path)) {
      Directory.CreateDirectory(path);
    }

    <span style="color:#66d9ef">string</span> fn = path + fileName;
    Application.CaptureScreenshot(fn);

    Debug.Log(<span style="color:#e6db74">&#34;captured .. &#34;</span> + fn);
  }

  <span style="color:#75715e">/////////////////////////////////////////////////////////////////////////////////////////////////
</span><span style="color:#75715e"></span>  <span style="color:#75715e">/// &lt;summary&gt;
</span><span style="color:#75715e"></span>  <span style="color:#75715e">/// パスを取得
</span><span style="color:#75715e"></span>  <span style="color:#75715e">/// &lt;summary&gt;
</span><span style="color:#75715e"></span>  <span style="color:#75715e">/////////////////////////////////////////////////////////////////////////////////////////////////
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">string</span> getOutputPath() {
    <span style="color:#75715e">// Assetsは文字列に含めてはいけない
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">string</span> projectDir = Application.dataPath + <span style="color:#e6db74">&#34;/../&#34;</span>;
    <span style="color:#66d9ef">string</span> path       = Path.GetFullPath(projectDir); 
    path += outputDir;
    <span style="color:#66d9ef">return</span> path;
  }
}
</code></pre></div><p>エディタ上ではScaleが1倍表示されないケースになると思いますが、
キャプチャを取得してみると指定の解像度でスクリーンショットが取得できています。</p>
<figure>
    <img src="/images/posts/2017/12/ss3.png"/> 
</figure>

<p>必要ならこれにキャプションとかいれて、申請に追加すればOKですね！！<br>
以上です。</p>
<p>■ 参考







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fdocs.unity3d.com%2fjp%2f540%2fScriptReference%2fApplication.CaptureScreenshot.html" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>








<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fmagnaga.com%2funity%2f2016%2f05%2f03%2fscreen_shot%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
]]></content>
        </item>
        
        <item>
            <title>[Unity] 常に使えるグローバルなコルーチンを用意する</title>
            <link>https://shamaton.dev/posts/448/</link>
            <pubDate>Sun, 24 Jun 2018 22:27:15 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/448/</guid>
            <description>お世話になっております。 しゃまとんです。 Unityにはコルーチンという機能がありますが、GameObjectがInActiveな場合使うこと</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>Unityにはコルーチンという機能がありますが、GameObjectがInActiveな場合使うことができません。<br>
自分自身がアクティブでも親がInActiveであれば、同様の状態になります。</p>
<p>例えば、ある画像を表示前にロードして切り替えておきたい…みたいなことがあるとします。<br>
ただSpriteを差し替える対象のImageのゲームオブジェクトはfalseになっていてStartCoroutineできない。。。
といった状況になるかもしれません。</p>
<figure>
    <img src="/images/posts/2017/12/a.png"/> 
</figure>

<p>基本的には自分の管理下でコルーチン制御するほうがいいと思うのですが、
こういう場合にグローバルなコルーチンを作っておくことでそちらに処理を移譲することができます。</p>
<p>コードはこんな感じです。<br>
ただ実行したい<code>IEnumrator</code>をもらって実行するだけです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">using</span> System.Collections;
<span style="color:#66d9ef">using</span> System.Collections.Generic;
<span style="color:#66d9ef">using</span> UnityEngine;

<span style="color:#75715e">/////////////////////////////////////////////////////////////////////////////////////////////////
</span><span style="color:#75715e">/// &lt;summary&gt;
</span><span style="color:#75715e">/// Coroutine for inactive or static class.
</span><span style="color:#75715e">/// &lt;summary&gt;
</span><span style="color:#75715e">/////////////////////////////////////////////////////////////////////////////////////////////////
</span><span style="color:#75715e"></span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">GlobalCoroutine</span> : MonoBehaviour {

  <span style="color:#75715e">// singleton
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> GlobalCoroutine instance;

  <span style="color:#75715e">/////////////////////////////////////////////////////////////////////////////////////////////////
</span><span style="color:#75715e"></span>  <span style="color:#75715e">/// &lt;summary&gt;
</span><span style="color:#75715e"></span>  <span style="color:#75715e">/// Run the specified routine.
</span><span style="color:#75715e"></span>  <span style="color:#75715e">/// &lt;summary&gt;
</span><span style="color:#75715e"></span>  <span style="color:#75715e">/////////////////////////////////////////////////////////////////////////////////////////////////
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> Coroutine Run(IEnumerator routine) {
    <span style="color:#75715e">// check and create GameObject.
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (instance == <span style="color:#66d9ef">null</span>) {
      GameObject obj = <span style="color:#66d9ef">new</span> GameObject();
      obj.name = <span style="color:#e6db74">&#34;GlobalCoroutine&#34;</span>;
      instance = obj.AddComponent&amp;lt;GlobalCoroutine&amp;gt;();
      DontDestroyOnLoad(obj);
    }

    <span style="color:#66d9ef">return</span> instance.StartCoroutine(instance.routine(routine));
  }

  <span style="color:#75715e">/////////////////////////////////////////////////////////////////////////////////////////////////
</span><span style="color:#75715e"></span>  <span style="color:#75715e">/// &lt;summary&gt;
</span><span style="color:#75715e"></span>  <span style="color:#75715e">/// execute routine
</span><span style="color:#75715e"></span>  <span style="color:#75715e">/// &lt;summary&gt;
</span><span style="color:#75715e"></span>  <span style="color:#75715e">/////////////////////////////////////////////////////////////////////////////////////////////////
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">private</span> IEnumerator routine(IEnumerator src) {
    <span style="color:#66d9ef">yield</span> <span style="color:#66d9ef">return</span> StartCoroutine(src);
  }
}
</code></pre></div><p>このクラスはシングルトンで一度生成したら以降はずっと使えるようにしました。なるべくnewしたくないので。<br>
呼び出し側の例はこういう感じで。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">void</span> sample() {
  GlobalCoroutine.Run(routine());
}

<span style="color:#66d9ef">private</span> IEnumerator routine() {
  Debug.Log(<span style="color:#e6db74">&#34;1&#34;</span>);
  <span style="color:#66d9ef">yield</span> <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span>;
  Debug.Log(<span style="color:#e6db74">&#34;2&#34;</span>);
  <span style="color:#66d9ef">yield</span> <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span>;
  Debug.Log(<span style="color:#e6db74">&#34;3&#34;</span>);
  <span style="color:#66d9ef">yield</span> <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span>;
}
</code></pre></div><p>今回はサンプルで汎用的なダイアログを作って、シングルトンで使いまわすの想定して実装してみました。
（ここでは処理は抜粋しています）<br>
staticメソッド内でプレハブからインスタンス生成するのですが、StartCoroutineは使えないため処理を移譲しています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp">  <span style="color:#75715e">/////////////////////////////////////////////////////////////////////////////////////////////////
</span><span style="color:#75715e"></span>  <span style="color:#75715e">/// &lt;summary&gt;
</span><span style="color:#75715e"></span>  <span style="color:#75715e">/// Create this instance.
</span><span style="color:#75715e"></span>  <span style="color:#75715e">/// &lt;summary&gt;
</span><span style="color:#75715e"></span>  <span style="color:#75715e">/////////////////////////////////////////////////////////////////////////////////////////////////
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> Coroutine Create() {
    <span style="color:#66d9ef">if</span> (instance != <span style="color:#66d9ef">null</span>) {
      <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span>;
    }
    <span style="color:#66d9ef">return</span> GlobalCoroutine.Run(create());
  }

  <span style="color:#75715e">/////////////////////////////////////////////////////////////////////////////////////////////////
</span><span style="color:#75715e"></span>  <span style="color:#75715e">/// &lt;summary&gt;
</span><span style="color:#75715e"></span>  <span style="color:#75715e">/// Create this instance.
</span><span style="color:#75715e"></span>  <span style="color:#75715e">/// &lt;summary&gt;
</span><span style="color:#75715e"></span>  <span style="color:#75715e">/////////////////////////////////////////////////////////////////////////////////////////////////
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> IEnumerator create() {

    <span style="color:#66d9ef">var</span> req = Resources.LoadAsync(AssetName);
    <span style="color:#66d9ef">while</span> (!req.isDone) {
      <span style="color:#66d9ef">yield</span> <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span>;
    }

    GameObject prefab = req.asset <span style="color:#66d9ef">as</span> GameObject;
    Instantiate(prefab);
    <span style="color:#66d9ef">yield</span> <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span>;
  }
</code></pre></div><p>今回のサンプルは下記URLに置いておきました。<br>
<!-- raw HTML omitted --><a href="https://github.com/shamaton/GlobalCoroutine">https://github.com/shamaton/GlobalCoroutine</a><!-- raw HTML omitted --><br>
確認動作させたものはこちらです。</p>
<figure>
    <img src="/images/posts/2017/12/test.gif"/> 
</figure>

<p>どうにもならんときに使えるかもです。<br>
以上です。</p>
<p>■ 参考<br>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fqiita.com%2fnaoK%2fitems%2f55fb18bd348cfaa92708" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
]]></content>
        </item>
        
        <item>
            <title>[Unity] クラスをKeyにしたDictionaryを作るには</title>
            <link>https://shamaton.dev/posts/389/</link>
            <pubDate>Mon, 11 Jun 2018 13:46:11 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/389/</guid>
            <description>お世話になっております。 しゃまとんです。 以前からclassをkeyにしたDictionaryって出来ないのかなーと思っていて、 仕方なくnew</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>以前からclassをkeyにしたDictionaryって出来ないのかなーと思っていて、
仕方なくnewなんかしてイケてないなーと思いながら実装していたのですが、
こっちの方が良さげなのでメモしておきたいと思います。</p>
<p>やり方はただSystem.Typeを使えば良かったのですね。という話でした。<br>
ということで下記のような感じで確認コードを書いて適当なオブジェクトに付けておきます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">using</span> System.Collections;
<span style="color:#66d9ef">using</span> System.Collections.Generic;
<span style="color:#66d9ef">using</span> UnityEngine;

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">TypeMap</span> : MonoBehaviour {

  <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">private</span> Dictionary&lt;System.Type, <span style="color:#66d9ef">string</span>&gt; map = <span style="color:#66d9ef">new</span> Dictionary&lt;System.Type, <span style="color:#66d9ef">string</span>&gt;() {
    {<span style="color:#66d9ef">typeof</span>(TestA),  <span style="color:#e6db74">&#34;This is A&#34;</span>},
    <span style="color:#75715e">// {typeof(TestB),  &#34;This is B&#34;},
</span><span style="color:#75715e"></span>    {<span style="color:#66d9ef">typeof</span>(TestC),  <span style="color:#e6db74">&#34;This is C&#34;</span>},
  };

  <span style="color:#75715e">// Use this for initialization
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">void</span> Start () {
    log&lt;TestA&gt;();
    log&lt;TestB&gt;();
    log&lt;TestC&gt;();
  }

  <span style="color:#75715e">// check
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">void</span> log&lt;T&gt;() {
    System.Type type = <span style="color:#66d9ef">typeof</span>(T);
    <span style="color:#66d9ef">if</span> (map.ContainsKey(type)) {
      Debug.Log(map[type]);
    } <span style="color:#66d9ef">else</span> {
      Debug.Log(<span style="color:#e6db74">&#34;not found type!!&#34;</span>);
    }
  }
}

<span style="color:#75715e">// sample classes
</span><span style="color:#75715e"></span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">TestA</span> {}
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">TestB</span> {}
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">TestC</span> {}
</code></pre></div><p>準備ができたら実行してみます。<br>
下図のような感じでclassをKeyにして、Valueを取得することができました。</p>
<figure>
    <img src="/images/posts/2017/03/typemap.png"/> 
</figure>

<p>これだけだと何に使うのという感じなんですが、例えば指定のクラスに対して、
指定のメソッドを実行するとか、指定のリクエストをするとか&hellip;でしょうか？<br>
何にせよ、つっかえが取れた感じなので今後に活かせそうかなと思います！</p>
<p>何かに参考になれば幸いです。<br>
以上です。</p>
]]></content>
        </item>
        
        <item>
            <title>[GKE] kube-legoを使ってドメインからアクセスできるようにする</title>
            <link>https://shamaton.dev/posts/477/</link>
            <pubDate>Tue, 15 May 2018 22:41:44 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/477/</guid>
            <description>お世話になっております。 しゃまとんです。 GKEでサービスをある程度作って公開しようとなったとき、HTTPSで通信させたくなります。 というもの</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>GKEでサービスをある程度作って公開しようとなったとき、HTTPSで通信させたくなります。<br>
というものアプリだとHTTPSを推奨していたり、Webサービスなら検索に影響したりするからです。</p>
<p>GKEでどう実現したらいいのか、まだあまり詳しくはないのですがKubernetes上でHTTPSを簡単に実現できるkube-legoというものが
あるのでそちらを利用してやってみました。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fjetstack%2fkube-lego" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>まずはリポジトリをクローンして、設定ファイルを変更します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e"># 取得</span>
git clone https://github.com/jetstack/kube-lego.git

<span style="color:#75715e"># ファイル編集</span>
cd kube-lego
vim examples/gce/lego/configmap.yaml
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
<span style="color:#f92672">metadata</span>:
  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">kube-lego</span>
  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">kube-lego</span>
<span style="color:#f92672">data</span>:
  <span style="color:#75715e"># modify this to specify your address（ここを自分のメールアドレスにする）</span>
  <span style="color:#f92672">lego.email</span>: <span style="color:#e6db74">&#34;your.address@example.com&#34;</span>
  <span style="color:#75715e"># configure letsencrypt&#39;s production api</span>
  <span style="color:#f92672">lego.url</span>: <span style="color:#e6db74">&#34;https://acme-v01.api.letsencrypt.org/directory&#34;</span>
<span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ConfigMap</span>
</code></pre></div><p>これで環境にapplyします。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ kubectl apply -f  kube-lego/examples/gce/lego

<span style="color:#75715e"># 3つ生成される</span>
namespace <span style="color:#e6db74">&#34;kube-lego&#34;</span> created
configmap <span style="color:#e6db74">&#34;kube-lego&#34;</span> created
deployment <span style="color:#e6db74">&#34;kube-lego&#34;</span> created
</code></pre></div><p>独自ドメインでのアクセスには静的IPが必要なので、GCPのコンソール等から操作して取得しておきましょう。
（VPCネットワーク　→　外部IPアドレス）</p>
<p>もしくは下記コマンドで作成しましょう。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">gcloud compute addresses create example-ip --global
</code></pre></div><p>次にドメインですが、<a href="https://px.a8.net/svt/ejp?a8mat=2TE6SZ+7KOJUA+50+2HHVNM">お名前.com</a>とかどこでもいいですが
今回は無料で取得できる[freenom][2]を利用してみました。
こんな感じで簡単に確認できるので希望するものがとれれば選びましょう。
取得できたら、CloudDNSでドメインを登録し、Aレコード取得したIPアドレスを設定しておきます。（黒塗りして申し訳ないですが&hellip;）</p>
<figure>
    <img src="/images/posts/2017/12/2.png"/> 
</figure>

<hr>
<figure>
    <img src="/images/posts/2017/12/3.png"/> 
</figure>

<p>freenom側でもnameserverを設定しておきます。<br>
Services → MyDomains → ManageDomain → Management Tools → Nameserversで設定できます。例なのでE1のところは登録時で変わると思います。</p>
<figure>
    <img src="/images/posts/2017/12/4.png"/> 
</figure>

<p>これでドメインとIPの紐付けができたので、後はWebサーバ的な返答を返すものを用意していきます。
Goで簡単に動作するものを用意しました。image化については<a href="/posts/494">こちら</a>を参照してください。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>

<span style="color:#f92672">import</span> (
  <span style="color:#e6db74">&#34;fmt&#34;</span>
  <span style="color:#e6db74">&#34;net/http&#34;</span>
)

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">String</span> <span style="color:#66d9ef">string</span>

<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">s</span> <span style="color:#a6e22e">String</span>) <span style="color:#a6e22e">ServeHTTP</span>(<span style="color:#a6e22e">w</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>, <span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>) {
  <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Fprint</span>(<span style="color:#a6e22e">w</span>, <span style="color:#a6e22e">s</span>)
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
  <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Handle</span>(<span style="color:#e6db74">&#34;/&#34;</span>, <span style="color:#a6e22e">String</span>(<span style="color:#e6db74">&#34;ok&#34;</span>))
  <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Handle</span>(<span style="color:#e6db74">&#34;/health&#34;</span>, <span style="color:#a6e22e">String</span>(<span style="color:#e6db74">&#34;health&#34;</span>))
  <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ListenAndServe</span>(<span style="color:#e6db74">&#34;localhost:9999&#34;</span>, <span style="color:#66d9ef">nil</span>)
}
</code></pre></div><p>これをPodとして配置したいので、設定ファイル(deployment.yaml)を作ります。雑ですがこんな感じです。<br>
Port:9999でListenし、Serviceで80ポートで通信できるようにしておきます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">apps/v1beta1</span>
<span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Deployment</span>
<span style="color:#f92672">metadata</span>:
  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">app</span>
<span style="color:#f92672">spec</span>:
  <span style="color:#f92672">replicas</span>: <span style="color:#ae81ff">2</span>
  <span style="color:#f92672">template</span>:
    <span style="color:#f92672">metadata</span>:
      <span style="color:#f92672">labels</span>:
        <span style="color:#f92672">name</span>: <span style="color:#ae81ff">app</span>
    <span style="color:#f92672">spec</span>:
      <span style="color:#f92672">containers</span>:
      - <span style="color:#f92672">image</span>: <span style="color:#ae81ff">asia.gcr.io/（プロジェクトID）/（コンテナ名）:（タグ）</span>
        <span style="color:#f92672">imagePullPolicy</span>: <span style="color:#ae81ff">Always</span>
        <span style="color:#f92672">name</span>: <span style="color:#ae81ff">app</span>
        <span style="color:#f92672">ports</span>:
        - <span style="color:#f92672">containerPort</span>: <span style="color:#ae81ff">9999</span>
        <span style="color:#f92672">livenessProbe</span>:
          <span style="color:#f92672">httpGet</span>:
            <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/health</span>
            <span style="color:#f92672">port</span>: <span style="color:#ae81ff">9999</span>
---
<span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
<span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Service</span>
<span style="color:#f92672">metadata</span>:
  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">app</span>
<span style="color:#f92672">spec</span>:
  <span style="color:#f92672">selector</span>:
    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">app</span>
  <span style="color:#f92672">type</span>: <span style="color:#ae81ff">NodePort</span>
  <span style="color:#f92672">ports</span>:
    - <span style="color:#f92672">port</span>: <span style="color:#ae81ff">80</span>
      <span style="color:#f92672">targetPort</span>: <span style="color:#ae81ff">9999</span>
</code></pre></div><p>最後にkube-legoを使うingressを用意します。設定ファイル(ingress.yaml)はこちら。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">extensions/v1beta1</span>
<span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Ingress</span>
<span style="color:#f92672">metadata</span>:
  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">app</span>
  <span style="color:#f92672">annotations</span>:
    <span style="color:#f92672">kubernetes.io/ingress.global-static-ip-name</span>: <span style="color:#e6db74">&#34;example-ip&#34;</span>
    <span style="color:#f92672">kubernetes.io/ingress.class</span>: <span style="color:#e6db74">&#34;gce&#34;</span>
    <span style="color:#f92672">kubernetes.io/tls-acme</span>: <span style="color:#e6db74">&#34;true&#34;</span>
<span style="color:#f92672">spec</span>:
  <span style="color:#f92672">tls</span>:
  - <span style="color:#f92672">secretName</span>: <span style="color:#ae81ff">example-ip-tls</span>
    <span style="color:#f92672">hosts</span>:
      - <span style="color:#ae81ff">example.com</span>
  <span style="color:#f92672">rules</span>:
    - <span style="color:#f92672">host</span>: <span style="color:#ae81ff">example.com</span>
      <span style="color:#f92672">http</span>:
        <span style="color:#f92672">paths</span>:
        - <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/</span>
          <span style="color:#f92672">backend</span>:
            <span style="color:#f92672">serviceName</span>: <span style="color:#ae81ff">app</span>
            <span style="color:#f92672">servicePort</span>: <span style="color:#ae81ff">80</span>
  <span style="color:#f92672">backend</span>:
    <span style="color:#f92672">serviceName</span>: <span style="color:#ae81ff">app</span>
    <span style="color:#f92672">servicePort</span>: <span style="color:#ae81ff">80</span>
</code></pre></div><p>こちらを適応させましょう。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">kubectl apply -f deployment.yaml
kubectl apply -f ingress.yaml
</code></pre></div><p>実行後、設定されるまでに時間がかかるのでログをみておくと状態がわかるので安心です。<br>
下記コマンドを実行しておいたときのログ例も載せておきます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">kubectl logs -f --namespace kube-lego <span style="color:#66d9ef">$(</span>kubectl get pod --namespace kube-lego -l app<span style="color:#f92672">=</span>kube-lego -o name<span style="color:#66d9ef">)</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text"> level=info msg=&#34;created an ACME account (registration url: https://acme-v01.api.letsencrypt.org/acme/reg/24364503)&#34; context=acme
 level=info msg=&#34;Attempting to create new secret&#34; context=secret name=kube-lego-account namespace=kube-lego
 level=info msg=&#34;Secret successfully stored&#34; context=secret name=kube-lego-account namespace=kube-lego
 level=debug msg=&#34;testing reachability of http://example.com/.well-known/acme-challenge/_selftest&#34; context=acme domain=example.com
 
 # 最初は404
 level=debug msg=&#34;error while authorizing: reachability test failed: wrong status code &#39;404&#39;&#34; context=acme domain=example.com
 level=warning msg=&#34;authorization failed after 1m0s: reachability test failed: wrong status code &#39;404&#39;&#34; context=acme domain=example.com
 level=error msg=&#34;Error while processing certificate requests: no domain could be authorized successfully&#34; context=kubelego
 level=debug msg=&#34;worker: done processing true&#34; context=kubelego
 level=debug msg=&#34;worker: begin processing true&#34; context=kubelego
 level=debug msg=reset context=provider provider=gce
 level=debug msg=finalize context=provider provider=gce
 level=debug msg=&#34;setting up svc endpoint&#34; context=provider namespace=default pod_ip=10.16.0.9 provider=gce
 level=debug msg=reset context=provider provider=nginx
 level=debug msg=finalize context=provider provider=nginx
 level=info msg=&#34;disable provider no TLS hosts found&#34; context=provider provider=nginx
 level=info msg=&#34;process certificate requests for ingresses&#34; context=kubelego
 level=debug msg=&#34;UPDATE ingress/default/app&#34; context=kubelego
 level=debug msg=&#34;UPDATE ingress/default/app&#34; context=kubelego
 level=debug msg=&#34;testing reachability of http://example.com/.well-known/acme-challenge/_selftest&#34; context=acme domain=example.com
 level=debug msg=&#34;error while authorizing: reachability test failed: wrong status code &#39;404&#39;&#34; context=acme domain=example.com
 level=warning msg=&#34;authorization failed after 1m0s: reachability test failed: wrong status code &#39;404&#39;&#34; context=acme domain=example.com
 level=error msg=&#34;Error while processing certificate requests: no domain could be authorized successfully&#34; context=kubelego
 level=debug msg=&#34;worker: done processing true&#34; context=kubelego
 level=debug msg=&#34;worker: begin processing true&#34; context=kubelego
 level=debug msg=&#34;setting up svc endpoint&#34; context=provider namespace=default pod_ip=10.16.0.9 provider=gce
 level=debug msg=&#34;testing reachability of http://example.com/.well-known/acme-challenge/_selftest&#34; context=acme domain=example.com

　# 502になった
 level=debug msg=&#34;error while authorizing: reachability test failed: wrong status code &#39;502&#39;&#34; context=acme domain=example.com
 level=debug msg=&#34;responding to challenge request&#34; basePath=&#34;/.well-known/acme-challenge&#34; context=acme host=example.com token=&#34;QxQNZDyx5ZnMR7LP_7KbHLal5T3y7DOSr2YZmUrv6QU&#34;
 level=debug msg=&#34;got authorization: &amp;{URI:https://acme-v01.api.letsencrypt.org/acme/challenge/bdYLpT-18ASFdaclX6ZX_f7FSdK1CLJhPlNsdt42_MQ/2487891091 Status:valid Identifier:{Type: Value:} Challenges:[] Combinations:[]}&#34; context=acme domain=example.com

 # 成功
 level=info msg=&#34;authorization successful&#34; context=acme domain=example.com
 level=info msg=&#34;successfully got certificate: domains=[example.com] url=https://acme-v01.api.letsencrypt.org/acme/cert/0380189d6956fc46add22b4c13ed3d190e2e&#34; context=acme
^C
</code></pre></div><p>これで指定のドメインにアクセスしてみると&hellip;</p>
<figure>
    <img src="/images/posts/2017/12/5.png"/> 
</figure>

<p>httpsでアクセスすることができました！（ドメインは伏せました）<br>
とりあえずこれでいけそうですね！</p>
<p>以上です。</p>
<p>■ 参考</p>
<p>






<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fqiita.com%2fapstndb%2fitems%2f2fef0a80d4510516cb1f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>








<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fqiita.com%2fesplo%2fitems%2fbd2e36cfae797d0d480a" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>








<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fqiita.com%2fteekay%2fitems%2f135dc67e39f24997019e" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>








<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fwww.compiere-distribution-lab.net%2fidempiere-lab%2finstall-advance%2fgoogle-cloud-dns%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
]]></content>
        </item>
        
        <item>
            <title>[GCP] kubernetesでノードを新しく用意してPodを移動させてみる</title>
            <link>https://shamaton.dev/posts/496/</link>
            <pubDate>Sun, 29 Apr 2018 14:26:22 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/496/</guid>
            <description>お世話になっております。 しゃまとんです。 kubernetesでサーバー運営をする際、ノード上の配置される様々なPodでサービス運営を行うわけ</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>kubernetesでサーバー運営をする際、ノード上の配置される様々なPodでサービス運営を行うわけですが、
今回試しに移動させてみました。</p>
<p>背景としては、アプリがヒットした場合（なかなかそんなことない）、各サービスをスケールアウトさせないといけなかったり、
ヒットしない場合（よくある）スケールダウンさせないといけなかったりします。</p>
<p>私は、コマンドで全てを操作できるほど熟知してはないので適時Webコンソールで対応しました。
ちなみに動作環境では下記のPodが動作していました。</p>
<ul>
<li>Redisクラスタ（master x 3, slave x 3)</li>
<li>APIサーバ（2台）</li>
<li>Ubuntu（Redisクラスタ操作用）※運用には必要ない</li>
</ul>
<p>これらのPodを移動させる必要があります。調べてみた感じだとdrainを使うことによって、
指定のノードからノードにpodを移動できるようですが、Redisクラスタが最小構成で組まれていたため、
手動でPodを新しいノードへ移動させることにしました。<br>
（Redisクラスタも、新しいノードにslaveを余分作っておけばdrainで行けそうな気がします）</p>
<p>仮にこのようなノード構成だとします。<br>
実際のノードは<code>kubectl get node</code>で確認できます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">gke-current-pool-1
gke-current-pool-2
gke-current-pool-3
gke-new-pool-1
gke-new-pool-1
gke-new-pool-1
</code></pre></div><p>まずは削除したいノードにこれ以上Podが生成されないようにしておきます。<br>
実行後にノードのステータスを確認すると、Ready,SchedulingDisabledになっていることがわかります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ kubectl cordon gke-current-pool-1
node <span style="color:#e6db74">&#34;gke-current-pool-1&#34;</span> cordoned
$ kubectl cordon gke-current-pool-2
node <span style="color:#e6db74">&#34;gke-current-pool-2&#34;</span> cordoned
$ kubectl cordon gke-current-pool-3
node <span style="color:#e6db74">&#34;gke-current-pool-3&#34;</span> cordoned
</code></pre></div><p>これで移動させる準備ができたのでRedisを1つ移動させてみます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">kubectl apply -f redis-6.yaml
kubectl delete -f redis-6.yaml
kubectl create -f redis-6.yaml

<span style="color:#75715e"># クラスタ構成を更新するのでUbuntu側でredis-trib.rbを実行しておきます</span>
redis-trib.rb add-node --slave 10.19.255.6:6379 10.19.255.1:6379
&gt;&gt;&gt; Send CLUSTER MEET to node 10.19.255.6:6379 to make it join the cluster.

<span style="color:#75715e"># クラスタに接続して、ノード情報を確認します @ root</span>

redis-cli -h redis -c
redis:6379&gt; cluster nodes
e43cb2f05e9e8265ceb0ebfb443a2674cfaaf440 10.16.1.10:6379 master - <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">1512833161767</span> <span style="color:#ae81ff">2</span> connected 5461-10922
f2d55c8de1f7b568d4272e6d961f9b6e8e86bbf1 10.16.2.10:6379 slave,fail 80a53be9d7281ba560d81af3e0c3c89416d2c10a <span style="color:#ae81ff">1512832594104</span> <span style="color:#ae81ff">1512832593000</span> <span style="color:#ae81ff">6</span> disconnected
80a53be9d7281ba560d81af3e0c3c89416d2c10a 10.16.0.7:6379 master - <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">1512833161265</span> <span style="color:#ae81ff">3</span> connected 10923-16383
ca68d56f6e92a077c1e907d5c2614cbc90176667 10.16.5.2:6379 slave 80a53be9d7281ba560d81af3e0c3c89416d2c10a <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">1512833160262</span> <span style="color:#ae81ff">3</span> connected
5f25d4a85c5c20ce16f6b0f9688566e23ea85ce9 10.16.2.8:6379 slave 26502f5d58cf84327911e9cb2578243b46e0eb89 <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">1512833161265</span> <span style="color:#ae81ff">4</span> connected
0fb050edb5fe569fa31dea20133833854c73cf35 10.16.2.9:6379 myself,slave e43cb2f05e9e8265ceb0ebfb443a2674cfaaf440 <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">5</span> connected
26502f5d58cf84327911e9cb2578243b46e0eb89 10.16.1.9:6379 master - <span style="color:#ae81ff">0</span> <span style="color:#ae81ff">1512833160765</span> <span style="color:#ae81ff">1</span> connected 0-5460
</code></pre></div><p>1つfailになっていますが、稼働中のmaster/slaveが3つずつあることがわかります。<br>
もしデータが入っていれば、getして確認してみるのもいいですね。<br>
これで新しいノードに移動できることがわかったので、全てのredis（今回は1〜5）に対して実行していきます。
（移動した際のキャプチャ取るのを忘れた。。）</p>
<p>全て実行するとfailなものが残っているので、気持ち悪い場合は対処しておきます。<br>
下記コマンドできれいになります。（はず）</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">./redis-trib.rb call 10.16.3.3:6379 CLUSTER FORGET 5f25d4a85c5c20ce16f6b0f9688566e23ea85ce9
</code></pre></div><p>APIサーバーは使い捨てのコンテナになっているので、podを指定して削除してみました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">kubectl delete pod app-1127512366-6759r
kubectl delete pod app-1127512366-nghkf
</code></pre></div><p>最終的にpodはこのようになりました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">NAME          READY       STATUS      RESTARTS    AGE
app-1127512366-6759r    2/2     Running     0       13d
app-1127512366-nghkf    2/2     Running     1       13d
redis-1-61ztz       1/1     Running     0       22d
redis-2-56sxf       1/1     Running     0       22d
redis-3-tf1qf       1/1     Running     0       22d
redis-4-jgqck       1/1     Running     0       22d
redis-5-63kt9       1/1     Running     0       22d
redis-6-t0jjt       1/1     Running     0       22d
ubuntu          1/1     Running     0       7m

↓

NAME            READY       STATUS      RESTARTS    AGE
app-1127512366-3dwz1    2/2     Running     0       3m
app-1127512366-n1k2j    2/2     Running     1       1m
redis-1-wvpnj       1/1     Running     0       11m
redis-2-wqsf4       1/1     Running     0       14m
redis-3-phjld       1/1     Running     0       17m
redis-4-19l64       1/1     Running     0       19m
redis-5-tndn5       1/1     Running     0       22m
redis-6-7283h       1/1     Running     0       23m
</code></pre></div><p>移動させたら不要なノードは削除しておきます。<br>
Webコンソールからでも削除可能です。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">gcloud container node-pools delete current-node-pool
</code></pre></div><p>今回は手動で行ったので、すこし手間のかかる作業になってしまいました。drain使うのが多分いいですね。
kubernetesは耐障害性があるので、この辺を把握しておくとちょっとよいかもですね。<br>
以上です。</p>
<p>■ 参考</p>
<p>






<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fshepherdmaster.hateblo.jp%2fentry%2f2015%2f07%2f21%2f044119" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>








<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fblog.applibot.co.jp%2fblog%2f2016%2f12%2f27%2fkubernetes-zero-downtime%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
]]></content>
        </item>
        
        <item>
            <title>[GCP] GKEでredis-clusterを自力で作ってみた（ボツ）</title>
            <link>https://shamaton.dev/posts/462/</link>
            <pubDate>Mon, 09 Apr 2018 15:06:13 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/462/</guid>
            <description>お世話になっております。 しゃまとんです。 前にredis-clusterを試してみた記事を作成したのですが、今回はGKEでクラスタを作ってみる</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>前に<a href="/posts/461">redis-clusterを試してみた記事</a>を作成したのですが、今回はGKEでクラスタを作ってみることにしました。
というのもWebDB PRESSで特集されていてやってみようと思ったのがきっかけです。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fgihyo.jp%2fmagazine%2fwdpress%2farchive%2f2017%2fvol99" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>という記事なんですが、結局、ボツに至ったものになります。
作業ログとして残しておきたいと思います。本自体はとても勉強になりました。</p>
<p>やったこととしては独自のredisコンテナ作成し、起動時に自分の名前に沿ってmaster/slaveを判断して、
clusterに参加するといったものです。それではまずredisイメージファイル（Dockerfile）になります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-dockerfile" data-lang="dockerfile"><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> redis:3.2.4-alpine</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">MAINTAINER</span><span style="color:#e6db74"> shamaton</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> apk add --update bind-tools curl <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    rm -rf /var/cache/apk/*<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> bootstrap.sh /bootstrap.sh<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> redis.conf /conf/redis.conf<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">CMD</span> [<span style="color:#e6db74">&#34;redis-server&#34;</span>, <span style="color:#e6db74">&#34;/conf/redis.conf&#34;</span>]<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>公式にRedisコンテナに起動スクリプトと設定ファイル（conf）を追加しています。<br>
起動スクリプト(bootstrap.sh)と設定ファイル(redis.conf)は下記のような感じです。
スクリプトにはchmodで実行権限をつけておいてください（chmod +x）</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e">#!/bin/sh
</span><span style="color:#75715e"></span><span style="color:#75715e"># set -e</span>

SEQ_START<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>
SEQ_END<span style="color:#f92672">=</span><span style="color:#ae81ff">16383</span>

PET_NUMBER<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>cat /etc/podinfo/pod_name | cut -d- -f3<span style="color:#66d9ef">)</span>
PET_ORDINAL<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>expr <span style="color:#e6db74">${</span>PET_NUMBER<span style="color:#e6db74">}</span> % <span style="color:#e6db74">${</span>REPLICA_SIZE<span style="color:#e6db74">}</span><span style="color:#66d9ef">)</span>

MASTER_NUMBER<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>expr <span style="color:#e6db74">${</span>PET_NUMBER<span style="color:#e6db74">}</span> - <span style="color:#e6db74">${</span>PET_ORDINAL<span style="color:#e6db74">}</span><span style="color:#66d9ef">)</span>

<span style="color:#75715e"># master server setting</span>
<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">${</span>PET_ORDINAL<span style="color:#e6db74">}</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;0&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
  GROUP_NUM<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>expr <span style="color:#e6db74">${</span>REPLICA_NUM<span style="color:#e6db74">}</span> / <span style="color:#e6db74">${</span>REPLICA_SIZE<span style="color:#e6db74">}</span><span style="color:#66d9ef">)</span>
  GROUP_END_INDEX<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>expr <span style="color:#e6db74">${</span>GROUP_NUM<span style="color:#e6db74">}</span> - 1<span style="color:#66d9ef">)</span>

  SEQ_PER<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>expr <span style="color:#e6db74">${</span>SEQ_END<span style="color:#e6db74">}</span> / <span style="color:#e6db74">${</span>GROUP_NUM<span style="color:#e6db74">}</span><span style="color:#66d9ef">)</span>

  GROUP_INDEX<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>expr <span style="color:#e6db74">${</span>PET_NUMBER<span style="color:#e6db74">}</span> / <span style="color:#e6db74">${</span>REPLICA_SIZE<span style="color:#e6db74">}</span><span style="color:#66d9ef">)</span>

  SET_SEQ_START<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>expr <span style="color:#e6db74">${</span>SEQ_PER<span style="color:#e6db74">}</span> <span style="color:#ae81ff">\*</span> <span style="color:#e6db74">${</span>GROUP_INDEX<span style="color:#e6db74">}</span> + 1<span style="color:#66d9ef">)</span>
  SET_SEQ_END<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>expr <span style="color:#e6db74">${</span>SET_SEQ_START<span style="color:#e6db74">}</span> + <span style="color:#e6db74">${</span>SEQ_PER<span style="color:#e6db74">}</span> - 1<span style="color:#66d9ef">)</span>

  <span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">${</span>GROUP_INDEX<span style="color:#e6db74">}</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;0&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
    SET_SEQ_START<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>
  <span style="color:#66d9ef">fi</span>

  <span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">${</span>GROUP_INDEX<span style="color:#e6db74">}</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>GROUP_END_INDEX<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
    SET_SEQ_END<span style="color:#f92672">=</span><span style="color:#e6db74">${</span>SEQ_END<span style="color:#e6db74">}</span>
  <span style="color:#66d9ef">fi</span>

  echo <span style="color:#e6db74">&#34;cluster set seq : </span><span style="color:#e6db74">${</span>SET_SEQ_START<span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">${</span>SET_SEQ_END<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>

  redis-cli cluster addslots <span style="color:#66d9ef">$(</span>seq <span style="color:#e6db74">${</span>SET_SEQ_START<span style="color:#e6db74">}</span> <span style="color:#e6db74">${</span>SET_SEQ_END<span style="color:#e6db74">}</span><span style="color:#66d9ef">)</span>
<span style="color:#66d9ef">fi</span>

<span style="color:#75715e"># meet redis-cluster-0</span>
<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> ! <span style="color:#e6db74">${</span>PET_NUMBER<span style="color:#e6db74">}</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;0&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>

  MASTER_ZERO_FULLNAME<span style="color:#f92672">=</span>redis-cluster-0.redis-cluster.default.svc.cluster.local
  MASTER_ZERO_IP<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>host <span style="color:#e6db74">${</span>MASTER_ZERO_FULLNAME<span style="color:#e6db74">}</span> | cut -d <span style="color:#e6db74">&#39; &#39;</span> -f 4<span style="color:#66d9ef">)</span>

  echo <span style="color:#e6db74">&#34;MASTER_ZERO_IP : </span><span style="color:#e6db74">${</span>MASTER_ZERO_IP<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>

  redis-cli cluster meet <span style="color:#e6db74">${</span>MASTER_ZERO_IP<span style="color:#e6db74">}</span> <span style="color:#ae81ff">6379</span>
<span style="color:#66d9ef">fi</span>

sleep <span style="color:#ae81ff">1</span>

<span style="color:#75715e"># slave server setting</span>
<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> ! <span style="color:#e6db74">${</span>PET_ORDINAL<span style="color:#e6db74">}</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;0&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>

  MASTER_FULLNAME<span style="color:#f92672">=</span>redis-cluster-<span style="color:#e6db74">${</span>MASTER_NUMBER<span style="color:#e6db74">}</span>.redis-cluster.default.svc.cluster.local
  MASTER_IP<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>host <span style="color:#e6db74">${</span>MASTER_FULLNAME<span style="color:#e6db74">}</span> | cut -d <span style="color:#e6db74">&#39; &#39;</span> -f 4<span style="color:#66d9ef">)</span>

  echo <span style="color:#e6db74">&#34;MASTER_IP : </span><span style="color:#e6db74">${</span>MASTER_IP<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>

  MASTER_ID<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>redis-cli cluster nodes | grep <span style="color:#e6db74">${</span>MASTER_IP<span style="color:#e6db74">}</span> | cut -d <span style="color:#e6db74">&#39; &#39;</span> -f 1<span style="color:#66d9ef">)</span>

  echo <span style="color:#e6db74">&#34;MASTER_ID : </span><span style="color:#e6db74">${</span>MASTER_ID<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>

  redis-cli cluster replicate <span style="color:#e6db74">${</span>MASTER_ID<span style="color:#e6db74">}</span>
<span style="color:#66d9ef">fi</span>

wait
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">appendonly yes
cluster-enabled yes
cluster-require-full-coverage no
cluster-node-timeout 5000
cluster-config-file nodes.conf
cluster-require-full-coverage yes
cluster-migration-barrier 1
protected-mode no
</code></pre></div><p>用意できたら、イメージを作成して<a href="https://cloud.google.com/container-registry/docs/overview?hl=ja">Container Registry</a>に追加します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">docker build -t redis-cluster:<span style="color:#e6db74">${</span>version<span style="color:#e6db74">}</span> .
docker tag redis-cluster:<span style="color:#e6db74">${</span>version<span style="color:#e6db74">}</span> asia.gcr.io/your_project_id/redis-cluster:<span style="color:#e6db74">${</span>version<span style="color:#e6db74">}</span>
gcloud docker -- push asia.gcr.io/your_project_id/redis-cluster:<span style="color:#e6db74">${</span>version<span style="color:#e6db74">}</span>
</code></pre></div><p>それではクラスタを作成して、redisクラスタをKubernetes上で作成してみましょう。<br>
配置にひつようなyamlファイル(cluster.yaml)は下記のようになります。（プロジェクトIDは置き換えてください）</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#75715e">#</span>
<span style="color:#75715e"># Redis Cluster service</span>
<span style="color:#75715e">#</span>
<span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
<span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Service</span>
<span style="color:#f92672">metadata</span>:
  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">redis-cluster</span>
  <span style="color:#f92672">labels</span>:
    <span style="color:#f92672">app</span>: <span style="color:#ae81ff">redis-cluster</span>
<span style="color:#f92672">spec</span>:
  <span style="color:#f92672">ports</span>:
  - <span style="color:#f92672">port</span>: <span style="color:#ae81ff">6379</span>
    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">redis</span>
  <span style="color:#f92672">clusterIP</span>: <span style="color:#ae81ff">None</span>
  <span style="color:#f92672">selector</span>:
    <span style="color:#f92672">app</span>: <span style="color:#ae81ff">redis-cluster</span>
---
<span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">apps/v1beta1</span>
<span style="color:#f92672">kind</span>: <span style="color:#ae81ff">StatefulSet</span>
<span style="color:#f92672">metadata</span>:
  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">redis-cluster</span>
<span style="color:#f92672">spec</span>:
  <span style="color:#f92672">serviceName</span>: <span style="color:#ae81ff">redis-cluster</span>
  <span style="color:#f92672">replicas</span>: <span style="color:#ae81ff">6</span>
  <span style="color:#f92672">template</span>:
    <span style="color:#f92672">metadata</span>:
      <span style="color:#f92672">labels</span>:
        <span style="color:#f92672">app</span>: <span style="color:#ae81ff">redis-cluster</span>
    <span style="color:#f92672">spec</span>:
      <span style="color:#f92672">containers</span>:
      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">redis-cluster</span>
        <span style="color:#f92672">image</span>: <span style="color:#ae81ff">asia.gcr.io/your_project_id/redis-cluster:${version}</span>
        <span style="color:#f92672">imagePullPolicy</span>: <span style="color:#ae81ff">Always</span>
        <span style="color:#f92672">lifecycle</span>:
          <span style="color:#f92672">postStart</span>:
            <span style="color:#f92672">exec</span>:
              <span style="color:#f92672">command</span>: [ <span style="color:#e6db74">&#34;/bootstrap.sh&#34;</span> ]
        <span style="color:#f92672">ports</span>:
          - <span style="color:#f92672">containerPort</span>: <span style="color:#ae81ff">6379</span>
            <span style="color:#f92672">name</span>: <span style="color:#ae81ff">client</span>
          - <span style="color:#f92672">containerPort</span>: <span style="color:#ae81ff">16379</span>
            <span style="color:#f92672">name</span>: <span style="color:#ae81ff">gossip</span>
        <span style="color:#f92672">readinessProbe</span>:
          <span style="color:#f92672">exec</span>:
            <span style="color:#f92672">command</span>:
            - <span style="color:#ae81ff">sh</span>
            - -<span style="color:#ae81ff">c</span>
            - <span style="color:#e6db74">&#34;redis-cli -h $(hostname) ping&#34;</span>
          <span style="color:#f92672">initialDelaySeconds</span>: <span style="color:#ae81ff">15</span>
          <span style="color:#f92672">timeoutSeconds</span>: <span style="color:#ae81ff">5</span>
        <span style="color:#f92672">livenessProbe</span>:
          <span style="color:#f92672">exec</span>:
            <span style="color:#f92672">command</span>:
            - <span style="color:#ae81ff">sh</span>
            - -<span style="color:#ae81ff">c</span>
            - <span style="color:#e6db74">&#34;redis-cli -h $(hostname) ping&#34;</span>
          <span style="color:#f92672">initialDelaySeconds</span>: <span style="color:#ae81ff">20</span>
          <span style="color:#f92672">periodSeconds</span>: <span style="color:#ae81ff">3</span>
        <span style="color:#f92672">env</span>:
          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">POD_NAME</span>
            <span style="color:#f92672">valueFrom</span>:
              <span style="color:#f92672">fieldRef</span>:
                <span style="color:#f92672">fieldPath</span>: <span style="color:#ae81ff">metadata.name</span>
          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">POD_NAMESPACE</span>
            <span style="color:#f92672">valueFrom</span>:
              <span style="color:#f92672">fieldRef</span>:
                <span style="color:#f92672">fieldPath</span>: <span style="color:#ae81ff">metadata.namespace</span>
          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">REPLICA_NUM</span>
            <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#34;6&#34;</span>
          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">REPLICA_SIZE</span>
            <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#34;2&#34;</span>
        <span style="color:#f92672">volumeMounts</span>:
        - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">podinfo</span>
          <span style="color:#f92672">mountPath</span>: <span style="color:#ae81ff">/etc/podinfo</span>
          <span style="color:#f92672">readOnly</span>: <span style="color:#66d9ef">false</span>
      <span style="color:#f92672">volumes</span>:
      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">podinfo</span>
        <span style="color:#f92672">downwardAPI</span>:
          <span style="color:#f92672">items</span>:
            - <span style="color:#f92672">path</span>: <span style="color:#e6db74">&#34;labels&#34;</span>
              <span style="color:#f92672">fieldRef</span>:
                <span style="color:#f92672">fieldPath</span>: <span style="color:#ae81ff">metadata.labels</span>
            - <span style="color:#f92672">path</span>: <span style="color:#e6db74">&#34;annotations&#34;</span>
              <span style="color:#f92672">fieldRef</span>:
                <span style="color:#f92672">fieldPath</span>: <span style="color:#ae81ff">metadata.annotations</span>
            - <span style="color:#f92672">path</span>: <span style="color:#e6db74">&#34;pod_name&#34;</span>
              <span style="color:#f92672">fieldRef</span>:
                <span style="color:#f92672">fieldPath</span>: <span style="color:#ae81ff">metadata.name</span>
            - <span style="color:#f92672">path</span>: <span style="color:#e6db74">&#34;pod_namespace&#34;</span>
              <span style="color:#f92672">fieldRef</span>:
                <span style="color:#f92672">fieldPath</span>: <span style="color:#ae81ff">metadata.namespace</span>
</code></pre></div><p>これを適用させます。すると各redisのpodが起動スクリプトで自分の役割を把握し必要に応じたredisコマンドを実行していきます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">gcloud container clusters create test-cluster --machine-type<span style="color:#f92672">=</span>f1-micro
kubectl apply -f cluster.yaml
<span style="color:#75715e">#ログ確認コマンド</span>

<span style="color:#75715e"># pod一覧</span>
kubectl get pods

<span style="color:#75715e"># ログ確認</span>
kubectl logs <span style="color:#e6db74">${</span>pod_name<span style="color:#e6db74">}</span>

<span style="color:#75715e"># service確認</span>
kubectl get service
</code></pre></div><p>試しに接続確認してみましょう。podを1つ用意して接続してみます。<br>
Serviceから接続できるはずです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">kubectl run -i --tty ubuntu --image<span style="color:#f92672">=</span>ubuntu --restart<span style="color:#f92672">=</span>Never /bin/bash
apt-get update
apt-get install ruby vim wget redis-tools

<span style="color:#75715e"># 接続</span>
redis-cli -c -h redis-cluster
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">redis-cluster:6379&amp;gt; set hoge fuga
-&gt; Redirected to slot [1525] located at 10.48.0.7:6379
OK

10.48.0.7:6379&gt;; get hoge
&#34;fuga&#34;&lt;/pre&gt;
</code></pre></div><p>このようにクラスタが自動で生成されて、接続確認することができました。<br>
ただこの方法だとpodが死んでしまった場合に、redis-cluster側が再配置するのと、
kubernetes側のpod再生成で辻褄が合わなくなるのではと思いました。何か対処が必要になる感じだったので、
redis-trib.rbを使ったクラスタ生成に変えることにしました。</p>
<p>ファイル自体の定義もちょっとイケてないものだし、特性を活かすには物足りないものだったかなと思います。
それでもredis-clusterがどのように構築されるかわかったので良かったと思います。</p>
<p>以上です。</p>
<p>あ、後片付けが必要な方はお忘れなく！</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">kubectl delete -f cluster.yaml
gcloud container clusters delete test-cluster
</code></pre></div><p>■参考</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fqiita.com%2fsawada_masahiko%2fitems%2fc58ff2953e04c2956c6f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

]]></content>
        </item>
        
        <item>
            <title>[Kubernetes] Skaffoldをとりあえず試してみた</title>
            <link>https://shamaton.dev/posts/530/</link>
            <pubDate>Thu, 29 Mar 2018 15:05:12 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/530/</guid>
            <description>お世話になっております。 しゃまとんです。 Skaffoldというツールがリリースされたので試してみました。 （確認したバージョンはv0.2.0で</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>Skaffoldというツールがリリースされたので試してみました。<br>
（確認したバージョンはv0.2.0です。最新版では挙動が異なる場合あるので注意してください）</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fGoogleContainerTools%2fskaffold" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>このツールですが、kubernetesを開発環境としても手軽に利用できるようにと開発されているもののようです。<br>
こちらの記事で紹介されています。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fwww.publickey1.jp%2fblog%2f18%2fgooglekubernetesskaffoldkubernetesminikube.html" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>ちなみにskaffoldとは直訳では「足場」のようですが、
いい感じに環境を組み上げてくれる仕組みに対して使われる言葉としてもあるようです。<br>
（よくわからんですね(；・∀・)）</p>
<p>ということで物は試しで進めていきましょう。<br>
試すにはkubernetesを使える環境が必要になります。minikubeでもいけるみたいですが、<br>
Dockerのedgeバージョンをインストールするとkubernetesを使えるのでこちらを使いました。</p>
<p>セットアップはこちらのページが参考になります。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fqiita.com%2ftaishin%2fitems%2f920d62a641c9cd58f289" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>できたら、次に<a href="https://github.com/GoogleContainerTools/skaffold">github</a>を開いてすすめていきます。</p>
<p>最初にインストールからですね。Macの場合は下記コマンドを実行します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-darwin-amd64 <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>  <span style="color:#f92672">&amp;&amp;</span> chmod +x skaffold <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>  <span style="color:#f92672">&amp;&amp;</span> sudo mv skaffold /usr/local/bin
</code></pre></div><p>完了するとskaffoldがコマンドとして使えるようになります</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">skaffold help
A tool that makes the onboarding of existing applications to Kubernetes Engine simple and repeatable.

Usage:
  skaffold <span style="color:#f92672">[</span>command<span style="color:#f92672">]</span>

Available Commands:
  dev         runs a pipeline file in development mode
  docker      A set of commands related to developing with docker
  help        Help about any command
  run         runs a pipeline file
  version     print the version of skaffold

Flags:
  -h, --help               help <span style="color:#66d9ef">for</span> skaffold
  -v, --verbosity string   Log level <span style="color:#f92672">(</span>debug, info, warn, error, fatal, panic <span style="color:#f92672">(</span>default <span style="color:#e6db74">&#34;warning&#34;</span><span style="color:#f92672">)</span>

Use <span style="color:#e6db74">&#34;skaffold [command] --help&#34;</span> <span style="color:#66d9ef">for</span> more information about a command.
</code></pre></div><p>kubernetes環境はローカルのものを使うので、コンテキストを一応確認しておきます。<br>
kubectlはDockerのkuberenetesインストール時に使えるようになっています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">kubectl config get-contexts
<span style="color:#75715e"># CURRENTがdocker-for-desktopになっていればOK、</span>
<span style="color:#75715e"># なってければ下記を実行する</span>
kubectl config use-context docker-for-desktop
</code></pre></div><p>次に実際に使ってみましょう。<br>
適当なフォルダにcloneして、sampleまで移動します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">git clone https://github.com/GoogleCloudPlatform/skaffold
cd examples/getting-started
</code></pre></div><p>次に<code>skaffold dev</code>するのですが、その前にskaffold.yamlを少しだけ変更してみます。<br>
そのまま実行しても動作してくれます。ちなみにデフォルトではskaffold.yamlを参照する仕組みになっているようです。
（-fでファイル指定も出来ますよ）</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">skaffold/v1alpha1</span>
<span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Config</span>
<span style="color:#f92672">build</span>:
  <span style="color:#f92672">artifacts</span>:
  - <span style="color:#f92672">imageName</span>: <span style="color:#ae81ff">skaffold-sample</span>
    <span style="color:#f92672">workspace</span>: <span style="color:#ae81ff">./container</span>
  <span style="color:#f92672">local</span>: {}
<span style="color:#f92672">deploy</span>:
  <span style="color:#f92672">kubectl</span>:
    <span style="color:#f92672">manifests</span>:
    - <span style="color:#f92672">paths</span>:
      - <span style="color:#ae81ff">k9s-*</span>
      <span style="color:#f92672">parameters</span>:
        <span style="color:#f92672">IMAGE_NAME</span>: <span style="color:#ae81ff">skaffold-sample</span>
</code></pre></div><p>imageNameは適当に変更しつつ、workspaceとpathsにも変更をしたので、移動やリネームをしておきます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">mkdir container
mv Dockerfile container
mv main.go container
mv k8s-pod.yaml k9s-pod.yaml
</code></pre></div><p>些細ですが、main.goはDockerfileから参照しているため同じ階層に存在していないとエラーになってしまいます。<br>
ではコレを実行してみます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ skaffold dev
Starting build...
Found minikube or Docker <span style="color:#66d9ef">for</span> Desktop context, using local docker daemon.
Sending build context to Docker daemon 3.072kB
Step 1/5 : FROM golang:1.9.4-alpine3.7
---&gt; fb6e10bf973b
Step 2/5 : WORKDIR /go/src/github.com/GoogleCloudPlatform/skaffold/examples/getting-started
---&gt; Using cache
---&gt; 16374b174422
Step 3/5 : CMD <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;./app&#34;</span><span style="color:#f92672">]</span>
---&gt; Running in 0f1d8ffa68eb
---&gt; 8adde95a0823
Step 4/5 : COPY main.go .
---&gt; eaecb11ddccc
Step 5/5 : RUN go build -o app main.go
---&gt; Running in a346974a556e
---&gt; c0ecf6ce1930
Successfully built c0ecf6ce1930
Successfully tagged d5929250298f24ed0aa19e077f26e492:latest
Successfully tagged skaffold-sample:c0ecf6ce1930e65d7185384b7cfaf74eaba120f952d5c0a153730e05329edb45
Build complete.
Starting deploy...
Deploying k9s-pod.yaml...
Deploy complete.
<span style="color:#f92672">[</span>getting-started getting-started<span style="color:#f92672">]</span> Hello world!
</code></pre></div><p>これらから見るにworkspaceのDockerfileを参照してイメージを作成し、k9s-pod.yamlをkubectl apply -f している感じじゃないかと思います。<br>
次にコードを変更してみましょう。main.goを開いて&hellip;</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;Hello Shamaton!&#34;</span>)
</code></pre></div><p>にしてみます。すると、自動的にdeployされてHello world!が切り替わります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">[getting-started getting-started] Hello world!
[getting-started getting-started] Hello world!
Starting build...
Found minikube or Docker for Desktop context, using local docker daemon.
Sending build context to Docker daemon 3.072kB
[getting-started getting-started] Hello world!
Step 1/5 : FROM golang:1.9.4-alpine3.7
---&gt; fb6e10bf973b
Step 2/5 : WORKDIR /go/src/github.com/GoogleCloudPlatform/skaffold/examples/getting-started
---&gt; Using cache
---&gt; 7db3074bce0a
Step 3/5 : CMD [&#34;./app&#34;]
---&gt; Using cache
---&gt; 8e2658a11d85
Step 4/5 : COPY main.go .
---&gt; a3aff99ad423
Step 5/5 : RUN go build -o app main.go
---&gt; Running in 419ccc215f8a
[getting-started getting-started] Hello world!
[getting-started getting-started] Hello world!
---&gt; 22d6738635a1
Successfully built 22d6738635a1
Successfully tagged bcf6d7576074a13ed9d320c93d528b6f:latest
Successfully tagged skaffold-sample:22d6738635a11e3648f8c7ca771848e320f2954a148123c46e1a524b0059079c
Build complete.
Starting deploy...
Deploying k9s-pod.yaml...
Deploy complete.
[getting-started getting-started] Hello world!
[getting-started getting-started] Hello world!
[getting-started getting-started] Hello world!
[getting-started getting-started] Hello world!
[getting-started getting-started] Hello world!
[getting-started getting-started] Hello Shamaton!
[getting-started getting-started] Hello Shamaton!
</code></pre></div><p>一応imageも確認しておくと、一度更新したのでsampleが2つになっていますね。</p>
<figure>
    <img src="/images/posts/2018/03/p1.png"/> 
</figure>

<p>すっごいimage増えそう。止める時はどうするのかな&hellip;;<br>
kubectl実行すればいいのだろうか。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">kubectl delete -f k8s-pod.yaml
</code></pre></div><p>とりあえずこんな感じで。<br>
ローカルでkubernetesを簡単に試せるのがいいですね（skaffold関係ない）！<br>
以上です。</p>
]]></content>
        </item>
        
        <item>
            <title>[GCP] GoのコンテナをContainerRegistryに登録して使う</title>
            <link>https://shamaton.dev/posts/494/</link>
            <pubDate>Mon, 26 Mar 2018 14:52:36 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/494/</guid>
            <description>お世話になっております。 しゃまとんです。 KubernetesでGoを使いたいのですが、そのままコードを配置みたいな感じではなく、 Docker</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>KubernetesでGoを使いたいのですが、そのままコードを配置みたいな感じではなく、
Dockerの様にコンテナイメージを作成してPodとして配置するような形式をとります。<br>
（勿論、やり方はコレ以外にもありそう？）</p>
<p>GCPには<a href="https://hub.docker.com/">Dockerhub</a>のようなコンテナのホスティングサービス（<a href="https://cloud.google.com/container-registry/?hl=ja">Container Registry</a>）があり、
yamlからアップロード済みイメージを利用することができるようになっています。</p>
<p>イメージを作成して、それを配置するだけとなると運用も楽ですしデプロイもRollingUpdateをいい感じにしてくれるみたいなので、
それを前提にして考えたいと思います。</p>
<p>まずは簡単にテスト用のコードを用意します。<br>
アドレスで簡単な返答をするサンプルです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>

<span style="color:#f92672">import</span> (
  <span style="color:#e6db74">&#34;fmt&#34;</span>
  <span style="color:#e6db74">&#34;net/http&#34;</span>
)

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">String</span> <span style="color:#66d9ef">string</span>

<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">s</span> <span style="color:#a6e22e">String</span>) <span style="color:#a6e22e">ServeHTTP</span>(<span style="color:#a6e22e">w</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>, <span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>) {
  <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Fprint</span>(<span style="color:#a6e22e">w</span>, <span style="color:#a6e22e">s</span>)
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
  <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Handle</span>(<span style="color:#e6db74">&#34;/&#34;</span>, <span style="color:#a6e22e">String</span>(<span style="color:#e6db74">&#34;ok&#34;</span>))
  <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Handle</span>(<span style="color:#e6db74">&#34;/sample&#34;</span>, <span style="color:#a6e22e">String</span>(<span style="color:#e6db74">&#34;sample&#34;</span>))
  <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ListenAndServe</span>(<span style="color:#e6db74">&#34;localhost:9999&#34;</span>, <span style="color:#66d9ef">nil</span>)
}
</code></pre></div><p>次にこれをコンテナイメージにしていきます。<br>
Dockerfileを下記のような感じで作成しておきます。<br>
これをビルドしてイメージが作成されたら、Container Registryにアップロードしましょう。
（your-project-idは置き換えてください）</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-dockerfile" data-lang="dockerfile"><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> golang:1.9.2-alpine</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">MAINTAINER</span><span style="color:#e6db74"> shamaton</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># copy source</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> main.go main.go<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># port</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">EXPOSE</span><span style="color:#e6db74"> 9999</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">CMD</span> [<span style="color:#e6db74">&#34;go&#34;</span>, <span style="color:#e6db74">&#34;run&#34;</span>, <span style="color:#e6db74">&#34;main.go&#34;</span>]&lt;/pre&gt;<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>&lt;pre class<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;lang:default decode:true&#34;</span>&gt;# イメージ作成<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>docker build -t sample-web-app:ver1.0.0 .<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># タグつけ</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>docker tag sample-web-app:ver1.0.0 asia.gcr.io/your-project-id/sample-web-app:ver1.0.0<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># container registryにpush</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>gcloud docker -- push asia.gcr.io/your-project-id/sample-web-app:ver1.0.0<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>イメージが存在しているかコンソールから確認してみましょう。<br>
以下のようにsample-web-appが追加されていますね。</p>
<figure>
    <img src="/images/posts/2017/12/container_registry.png"/> 
</figure>

<p>試しにローカルにpullして確認してみます。一応手元のビルドしたものを削除してしまいます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e"># 手元のイメージを削除</span>
docker rmi sample-web-app:ver1.0.0
docker rmi gcr.io/your-project-id/sample-web-app:ver1.0.0

<span style="color:#75715e"># container registryから取得</span>
gcloud docker -- pull gcr.io/your-project-id/sample-web-app:ver1.0.0

<span style="color:#75715e"># コンテナ起動</span>
docker run --name sample-app --rm -p 9999:9999 -t gcr.io/your-project-id/sample-web-app:ver1.0.0
</code></pre></div><p>アクセスすると&hellip;</p>
<figure>
    <img src="/images/posts/2017/12/access.png"/> 
</figure>

<p>同じように使えますね！Kubernetesからも同じように動作して使えますが、
Dockerと一緒で使い捨てされることを考慮しておかないといけないので、
運用の際には用途を決めておく必要がありそうです。</p>
<p>以上です。</p>
<p>■ 参考</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fwww.topgate.co.jp%2fgcp08-how-to-use-docker-image-container-registry" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

]]></content>
        </item>
        
        <item>
            <title>[Go] Goからredis-clusterにつないでみる</title>
            <link>https://shamaton.dev/posts/461/</link>
            <pubDate>Mon, 12 Mar 2018 13:32:29 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/461/</guid>
            <description>お世話になっております。 しゃまとんです。 今回はredisをクラスタリングしてGoから接続してみるやつです。 個人ではなかなか使う機会がないです</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>今回はredisをクラスタリングしてGoから接続してみるやつです。<br>
個人ではなかなか使う機会がないですが、負荷分散につかう手法みたいなものですね。</p>
<p>ちょっと古めに記事ですが、最初に説明がかかれています。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fcloudpack.media%2f420" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>万が一、億が一ヒットした場合にしておくと慌てないです済むかなとおもったので
理解しておいて損はないかなーと思いやってみることにしました。（実はWEB DB PRESSのKubernetes特集がきっかけでもあります）</p>
<p>とりあえずクラスタをつくるには複数台Redisが起動している必要があります。<br>
今回もサクッと環境を捨てられるDockerを利用して試してみましょう。</p>
<p>まずは検証用コンテナとして適当なOSイメージをもってきてコンテナを起動しましょう<br>
（例ではUbuntuを使っています。）</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">docker pull ubuntu
docker run --name redis_cluster_test -i -t ubuntu /bin/bash
</code></pre></div><p>コンテナを立ち上げたら、redisをインストールします。<br>
Ubuntuでデフォルトでインストールできるredisのバージョンが古いため、ソースから取得しました。
（最新は<a href="http://download.redis.io/releases/">こちら</a>を確認）</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">apt-get update

<span style="color:#75715e"># パッケージ取得</span>
apt-get -y install gcc make python-dev tcl wget vim

<span style="color:#75715e"># redisのインストール</span>
wget http://download.redis.io/releases/redis-3.2.11.tar.gz
tar vxzf redis-3.2.11.tar.gz
make -C  redis-3.2.11
make PREFIX<span style="color:#f92672">=</span>/usr/local -C redis-3.2.11 install
rm -rf redis-3.2.11.tar.gz redis-3.2.11

<span style="color:#75715e"># 確認</span>
redis-server --version
</code></pre></div><p>次に複数立ち上げるために、設定ファイルを作成します。<br>
クラスタリングには最低6つ（master,slaveが3つずつ）必要なので、6つファイルをつくります。1つの例(cluster0.conf)はこちら。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text"># portは7000 - 7005まで
port 7000
cluster-enabled yes

# node-0 - node-5まで
cluster-config-file nodes-0.conf
cluster-node-timeout 5000
appendonly yes
protected-mode no
</code></pre></div><p>6ファイル作ったら、ファイルを指定して実行していきます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">redis-server cluster0.conf &amp;
redis-server cluster1.conf &amp;
redis-server cluster2.conf &amp;
redis-server cluster3.conf &amp;
redis-server cluster4.conf &amp;
redis-server cluster5.conf &amp;

<span style="color:#75715e"># プロセス確認　</span>
ps -aux
</code></pre></div><p>次にこれをクラスタリングしていきます。<br>
今回はクラスタを半自動的に作ってくれるredis-trib.rbを使うことにします。
Rubyが使える必要があるので、合わせてインストールしていきます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">apt-get -y install ruby
gem install redis
wget http://download.redis.io/redis-stable/src/redis-trib.rb
chmod <span style="color:#ae81ff">755</span> redis-trib.rb
</code></pre></div><p>準備が出来たのでクラスタを作ってみましょう。<br>
下記コマンドを実行して返答すれば完成です。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e"># クラスタ生成</span>
./redis-trib.rb create --replicas <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>  127.0.0.1:7000 <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>  127.0.0.1:7001 <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>  127.0.0.1:7002 <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>  127.0.0.1:7003 <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>  127.0.0.1:7004 <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>  127.0.0.1:7005

&gt;&gt;&gt; Creating cluster
&gt;&gt;&gt; Performing hash slots allocation on <span style="color:#ae81ff">6</span> nodes...
Using <span style="color:#ae81ff">3</span> masters:
127.0.0.1:7000
127.0.0.1:7001
127.0.0.1:7002
Adding replica 127.0.0.1:7003 to 127.0.0.1:7000
Adding replica 127.0.0.1:7004 to 127.0.0.1:7001
Adding replica 127.0.0.1:7005 to 127.0.0.1:7002
M: 6937b5904ef232fd9e9a622da78d9cb92baff38e 127.0.0.1:7000
   slots:0-5460 <span style="color:#f92672">(</span><span style="color:#ae81ff">5461</span> slots<span style="color:#f92672">)</span> master
M: f4b3c573408ca399ac3f4370413946550c109753 127.0.0.1:7001
   slots:5461-10922 <span style="color:#f92672">(</span><span style="color:#ae81ff">5462</span> slots<span style="color:#f92672">)</span> master
M: 552810f0a7fdd2e320fa15dbfa22385b6e73f5ad 127.0.0.1:7002
   slots:10923-16383 <span style="color:#f92672">(</span><span style="color:#ae81ff">5461</span> slots<span style="color:#f92672">)</span> master
S: 5ba7ef8bbb45d8fcc60ddbe67e7f3103a9a56caa 127.0.0.1:7003
   replicates 6937b5904ef232fd9e9a622da78d9cb92baff38e
S: 2bbec261f0ae973520da1c089dde6fe2ff134085 127.0.0.1:7004
   replicates f4b3c573408ca399ac3f4370413946550c109753
S: add1867a1d5b93dd83d5f208ae0e2da758b86aba 127.0.0.1:7005
   replicates 552810f0a7fdd2e320fa15dbfa22385b6e73f5ad

<span style="color:#75715e"># yesとする</span>
Can I set the above configuration? <span style="color:#f92672">(</span>type <span style="color:#e6db74">&#39;yes&#39;</span> to accept<span style="color:#f92672">)</span>: yes


&gt;&gt;&gt; Nodes configuration updated

...（省略）...

<span style="color:#f92672">[</span>OK<span style="color:#f92672">]</span> All nodes agree about slots configuration.
&gt;&gt;&gt; Check <span style="color:#66d9ef">for</span> open slots...
&gt;&gt;&gt; Check slots coverage...
<span style="color:#f92672">[</span>OK<span style="color:#f92672">]</span> All <span style="color:#ae81ff">16384</span> slots covered.
</code></pre></div><p>一応、確認してみましょう。<br>
コマンドを別の場所から実行するとRedirectしているのがわかります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e"># 接続</span>
redis-cli -c -h localhost -p <span style="color:#ae81ff">7000</span>

<span style="color:#75715e"># 値を設定</span>
localhost:7000&gt; set hoge fuga

<span style="color:#75715e"># 値を取得</span>
localhost:7000&gt; get hoge
<span style="color:#e6db74">&#34;fuga&#34;</span>

<span style="color:#75715e"># 別のところに接続</span>
redis-cli -c -h localhost -p <span style="color:#ae81ff">7001</span>

<span style="color:#75715e"># redirectする</span>
localhost:7001&gt; get hoge
-&gt; Redirected to slot <span style="color:#f92672">[</span>1525<span style="color:#f92672">]</span> located at 127.0.0.1:7000
<span style="color:#e6db74">&#34;fuga&#34;</span>
</code></pre></div><p>あとはGoから確認してみましょう。<br>
乱暴ですが下記コマンドでまとめて Goを使えるようにします。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">apt-get -y install git <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span><span style="color:#f92672">&amp;&amp;</span> wget https://redirector.gvt1.com/edgedl/go/go1.9.2.linux-amd64.tar.gz <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span><span style="color:#f92672">&amp;&amp;</span>  tar -C /usr/local -xzf go1.9.2.linux-amd64.tar.gz <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span><span style="color:#f92672">&amp;&amp;</span>  rm go1.9.2.linux-amd64.tar.gz <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span><span style="color:#f92672">&amp;&amp;</span>  mkdir -p /root/go <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span><span style="color:#f92672">&amp;&amp;</span>  echo <span style="color:#e6db74">&#34;GOPATH=/root/go&#34;</span> &gt;&gt; /root/.bashrc <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span><span style="color:#f92672">&amp;&amp;</span>  echo <span style="color:#e6db74">&#34;PATH=</span>$PATH<span style="color:#e6db74">:/usr/local/go/bin:</span>$GOPATH<span style="color:#e6db74">/bin&#34;</span> &gt;&gt; /root/.bashrc <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span><span style="color:#f92672">&amp;&amp;</span>  source /root/.bashrc <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span><span style="color:#f92672">&amp;&amp;</span>  go get -u github.com/go-redis/redis
</code></pre></div><p>サンプルコードはこちらになります。（今回もgo-redisを使います）</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>

<span style="color:#f92672">import</span> (
    <span style="color:#e6db74">&#34;fmt&#34;</span>
    <span style="color:#e6db74">&#34;github.com/go-redis/redis&#34;</span>
)

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
    <span style="color:#a6e22e">client</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">redis</span>.<span style="color:#a6e22e">NewClusterClient</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">redis</span>.<span style="color:#a6e22e">ClusterOptions</span>{
                <span style="color:#a6e22e">Addrs</span>: []<span style="color:#66d9ef">string</span>{<span style="color:#e6db74">&#34;localhost:7002&#34;</span>},
    })

    <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">Set</span>(<span style="color:#e6db74">&#34;key&#34;</span>, <span style="color:#e6db74">&#34;value&#34;</span>, <span style="color:#ae81ff">0</span>).<span style="color:#a6e22e">Err</span>()
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
            panic(<span style="color:#a6e22e">err</span>)
    }

    <span style="color:#a6e22e">val</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">Get</span>(<span style="color:#e6db74">&#34;key&#34;</span>).<span style="color:#a6e22e">Result</span>()
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
            panic(<span style="color:#a6e22e">err</span>)
    }
    <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;key&#34;</span>, <span style="color:#a6e22e">val</span>)

    <span style="color:#a6e22e">val2</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">Get</span>(<span style="color:#e6db74">&#34;key2&#34;</span>).<span style="color:#a6e22e">Result</span>()
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">redis</span>.<span style="color:#a6e22e">Nil</span> {
            <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;key2 does not exists&#34;</span>)
    } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
            panic(<span style="color:#a6e22e">err</span>)
    } <span style="color:#66d9ef">else</span> {
            <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;key2&#34;</span>, <span style="color:#a6e22e">val2</span>)
    }
}
</code></pre></div><p>実行すると、値が取得できていますね。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e"># 実行</span>
go run main.go

<span style="color:#75715e">#  結果</span>
key value
key2 does not exists
</code></pre></div><p>ちなみにこのときNewClusterClientでないとうまく取得することができません。クラスタを生成してない場合は逆もしかりですね。<br>
前準備のほうが全然長くなってしまいましたが、以上です。</p>
]]></content>
        </item>
        
        <item>
            <title>[Server] nginx &#43; golang な環境をhttps化する</title>
            <link>https://shamaton.dev/posts/493/</link>
            <pubDate>Mon, 26 Feb 2018 15:11:10 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/493/</guid>
            <description>お世話になっております。 しゃまとんです。 前回の記事につづいてnginx + golangな環境をhttps化してみました。 今回もLet&amp;rsqu</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>前回の記事につづいてnginx + golangな環境をhttps化してみました。</p>









<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fshamaton.dev%2fposts%2f497" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>今回もLet&rsquo;s Encryptを使ってhttps化していきます。<br>
環境を作るにあたってこちらがとても参考になりました。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fqiita.com%2fHeRo%2fitems%2ff9eb8d8a08d4d5b63ee9" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>まずはサーバーでletsentrypt(certbot)を取得して証明書の発行を行います。<br>
私の場合はroot直下で作業しました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">git clone https://github.com/certbot/certbot
cd certbot
./certbot-auto certonly --standalone -t
</code></pre></div><p>問題なければ<code>Congraturation!!</code>と表示されます。<br>
次にnginxのtls周りを設定します。nginx.confのtls部分を下記のようにしました。<br>
初期状態だとコメントアウトされているので外して証明書やproxy_passを設定します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text"># Settings for a TLS enabled server.
#
    server {
        listen       443 ssl;
        server_name  _;

        ssl_certificate &#34;/etc/letsencrypt/live/example.com/fullchain.pem&#34;;
        ssl_certificate_key &#34;/etc/letsencrypt/live/example.com/privkey.pem&#34;;
        ssl_session_cache shared:SSL:1m;
        ssl_session_timeout  10m;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;

        # Load configuration files for the default server block.
        include /etc/nginx/default.d/*.conf;

        location / {
        proxy_pass http://127.0.0.1:9999;
        }

        error_page 404 /404.html;
            location = /40x.html {
        }

        error_page 500 502 503 504 /50x.html;
            location = /50x.html {
        }
    }

}
</code></pre></div><p>設定後は忘れずリロードか再起動を行いましょう。<br>
これでhttpsでのアクセスが可能になっているはずです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">service nginx restart
service nginx reload
</code></pre></div><p>次にnginxは80ポートをバインドするので、Let&rsquo;s Encrypt側を–webrootを使った形式に変更しておきます。
（これは最初からこちらでもよかったかも）</p>
<p>更新時の確認用パスとなるディレクトリを作成し、renewalしてみます。<br>
実行後に<code>Congraturation!!</code>とでればOKです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">mkdir /var/letsencrypt
./certbot-auto certonly --webroot -w /var/letsencrypt -d example.com --agree-tos --force-renewal -n
</code></pre></div><p>再度nginx側の設定を変更します。<br>
以降はhttpでのアクセスは全てhttpsにリダイレクトするようにしておきます。<br>
ただしletsentryptはhttpsを利用するため、先程のディレクトリを指定し対象のアドレスのみHTTPを許可しておきます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">server {
        listen       80;
        server_name  hostname;

        # Load configuration files for the default server block.
        include /etc/nginx/default.d/*.conf;

        location ^~ /.well-known {
                root /var/letsencrypt;
        }

        location / {
        # Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response.
        return 301 https://$host$request_uri;
        }

        error_page 404 /404.html;
            location = /40x.html {
        }

        error_page 500 502 503 504 /50x.html;
            location = /50x.html {
        }
    }
</code></pre></div><p>設定したら再度nginxをリロードまたは再起動し、renewを実行してみます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">service nginx restart
./certbot-auto renew --force-renewal
</code></pre></div><p>ログがこんな感じならOKでしょう。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Saving debug log to /var/log/letsencrypt/letsencrypt.log

-------------------------------------------------------------------------------
Processing /etc/letsencrypt/renewal/exmaple.com.conf
-------------------------------------------------------------------------------
Plugins selected: Authenticator webroot, Installer None
Renewing an existing certificate
Performing the following challenges:
http-01 challenge for exmaple.com
Waiting for verification...
Cleaning up challenges

-------------------------------------------------------------------------------
new certificate deployed without reload, fullchain is
/etc/letsencrypt/live/exmaple.com/fullchain.pem
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------

Congratulations, all renewals succeeded. The following certs have been renewed:
/etc/letsencrypt/live/exmaple.com/fullchain.pem (success)
-------------------------------------------------------------------------------
</code></pre></div><p>もしうまくいかない場合は上記の例だと/var/letsencrypt/.well-known配下にindex.htmlとか作ってみて、
curlでURLを叩いてみるといいかもしれません。<br>
というのも、renewは何回か失敗すると一定時間実行できなくなるようなので。。</p>
<p>あとはファイルがあるはずなのに403 Forbiddenになってしまうような場合は、
SELinuxが影響している場合もありますのでgetenforceして確かめてみるといいかもしれません。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fkakakazuma.hatenablog.com%2fentry%2f2015%2f04%2f24%2f235812" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>必要ならcronも設定しておくとよいですね。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">crontab -e
<span style="color:#ae81ff">00</span> <span style="color:#ae81ff">05</span> <span style="color:#ae81ff">15</span> * * /root/certbot/certbot-auto renew
</code></pre></div><p>これで一応ですが、nginx + golangな環境にhttpsを導入することができました。<br>
以上です。</p>
<p>■ 参考</p>









<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fshamaton.dev%2fposts%2f426" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

]]></content>
        </item>
        
        <item>
            <title>[Server] nginx &#43; golangな環境で502 Bad Gatewayになった時のこと</title>
            <link>https://shamaton.dev/posts/497/</link>
            <pubDate>Sat, 17 Feb 2018 11:52:29 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/497/</guid>
            <description>お世話になっております。 しゃまとんです。 Goを使って、Webアプリケーションを作る際に80ポートを直接設定できない（しづらい）ので 何か公開す</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>Goを使って、Webアプリケーションを作る際に80ポートを直接設定できない（しづらい）ので
何か公開する際にはnginxでリバースプロキシさせたりしています。</p>
<p>で、nginx側の設定を行ってアクセスしたところ502になってしまいました。</p>
<p>nginx側の設定（nginx.conf）はこんな感じ。ちなみにEchoを使っているためfcgi.Serveではありません。
（golnag nginx辺りでググると、よく結果に出る）</p>
<p>fcgi.Serveを使っているならそのまま下記サイトの設定で行けそうです。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fumegusa.hatenablog.jp%2fentry%2f2015%2f02%2f22%2f025832" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">listen 80;
server_name hostname;

location / {
     proxy_pass http://127.0.0.1:9999;
}
</code></pre></div><p>本題に戻って、これですがGoのアプリケーションに繋いでるだけです。
なんだろーなと思いエラーログを確認してみると、このようなものがポロポロと出ていました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">[error] 24168#0: *32 connect() failed (111: Connection refused) while connecting to upstream,
client: 118.238.205.46, server: hostname, request: &#34;GET /favicon.ico HTTP/1.1&#34;, upstream: &#34;http://127.0.0.1:9999/favicon.ico&#34;,
host: &#34;example.com&#34;, referrer: &#34;http://example.com/&#34;
</code></pre></div><p>このエラーですが、どうやらselinuxの設定によって起こる可能性があるようです。<br>
そちらに関してもログを見てみました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">type=SYSCALL msg=audit(1512955800.388:1527): arch=c000003e syscall=42 
success=no exit=-13 a0=4 a1=556160ba11f0 a2=10 a3=7ffef19c2120 items=0 
ppid=10654 pid=24168 auid=4294967295 uid=996 gid=993 euid=996 suid=996 
fsuid=996 egid=993 sgid=993 fsgid=993 tty=(none) ses=4294967295 comm=&#34;nginx&#34; 
exe=&#34;/usr/sbin/nginx&#34; subj=system_u:system_r:httpd_t:s0 key=(null)
type=AVC msg=audit(1512955800.405:1528): avc: denied { name_connect } for pid=24168 
comm=&#34;nginx&#34; dest=9999 scontext=system_u:system_r:httpd_t:s0 tcontext=system_u:object_r:jboss_management_port_t:s0 
tclass=tcp_socket
</code></pre></div><p>何やらよくないログっぽいですね&hellip;<br>
これに対処するには指定のパラメータを変更すると良いようです。<br>
（selinuxを無効にしても同じ効果はあります）</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e"># 確認</span>
$ getenforce
Enforcing

<span style="color:#75715e"># 変更</span>
$ sudo setsebool -P httpd_can_network_connect <span style="color:#ae81ff">1</span>
</code></pre></div><p>これで再度アクセスしてみると、502が解消されました。<br>
最初はnginxの設定が悪いと思って小一時間ハマっていました。<br>
同じような事象になっている方は試してみてくださいませ。</p>
<p>以上です。</p>
<p>■ 参考







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2ftech.mktime.com%2fentry%2f447" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
]]></content>
        </item>
        
        <item>
            <title>[Unity] TextMeshProで日本語と使いたい文字を使えるようにする</title>
            <link>https://shamaton.dev/posts/465/</link>
            <pubDate>Thu, 08 Feb 2018 15:36:52 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/465/</guid>
            <description>お世話になっております。 しゃまとんです。 TextMeshProでは扱いたい文字をフォントアセットとしてUnity上で作成し、使えるようにする</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>TextMeshProでは扱いたい文字をフォントアセットとしてUnity上で作成し、使えるようにする必要があります。
TextMeshProで日本語を扱う場合も、使いたい日本語を作成時に指定するしないといけません。</p>
<p>すべて使う日本語文字が決まっているのならいいのですが、私の場合とにかく日本語を使えるようにしたかったので、
色々なサイトを参考に日本語を使えるようにしてみたのですが、この文字（何か小難しい漢字とか記号とか）も使えるようにしたい！
けど、やり方わからん！！みたいな状態になっていたので、こちらを参考にさせてもらいつつ
TextMeshProでフォントアセット作成の際に使うファイルを出力するスクリプトを作成しました。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fqiita.com%2fsu10%2fitems%2f67ff8f48e03539a69e31" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>スクリプトはRubyで書かれています。<br>
Rubyはあまり書いたことないので、変な書き方してるかもしれないです(；・∀・)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby"><span style="color:#75715e"># 文字列を変換</span>
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">thorikawa2intarr</span>(src)
    arr <span style="color:#f92672">=</span> <span style="color:#f92672">[]</span>
    splits <span style="color:#f92672">=</span> src<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;,&#34;</span>)

    splits<span style="color:#f92672">.</span>each{<span style="color:#f92672">|</span>var<span style="color:#f92672">|</span>
        tmp <span style="color:#f92672">=</span> var<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;-&#34;</span>)
        <span style="color:#66d9ef">if</span> tmp<span style="color:#f92672">.</span>length <span style="color:#f92672">&amp;</span>gt; <span style="color:#ae81ff">1</span>
            arr <span style="color:#f92672">=</span> arr <span style="color:#f92672">+</span> <span style="color:#66d9ef">Range</span><span style="color:#f92672">.</span>new(tmp<span style="color:#f92672">[</span><span style="color:#ae81ff">0</span><span style="color:#f92672">].</span>to_i, tmp<span style="color:#f92672">[</span><span style="color:#ae81ff">1</span><span style="color:#f92672">].</span>to_i)<span style="color:#f92672">.</span>to_a
        <span style="color:#66d9ef">else</span>
            arr<span style="color:#f92672">.</span>push(tmp<span style="color:#f92672">[</span><span style="color:#ae81ff">0</span><span style="color:#f92672">].</span>to_i)
        <span style="color:#66d9ef">end</span>
    }
    <span style="color:#66d9ef">return</span> arr
<span style="color:#66d9ef">end</span>

<span style="color:#75715e"># 漢字の羅列をint配列に変換</span>
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">kanji2intarr</span>(src)
    <span style="color:#66d9ef">return</span> src<span style="color:#f92672">.</span>chars<span style="color:#f92672">.</span>map(<span style="color:#f92672">&amp;</span><span style="color:#e6db74">:ord</span>)
<span style="color:#66d9ef">end</span>

<span style="color:#75715e"># sources</span>
<span style="color:#75715e"># ref : https://gist.github.com/thorikawa/2856a7cf912349c0b6b7</span>
src1 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;32-128,12288-12543,12448-12543,65280-65519,19968,19971,19977,19978,19979,20013,20061,20108,20116,20154,20241,20808,20837,20843,20845,20870,20986,21147,21313,21315,21475,21491,21517,22235,22303,22805,22823,22825,22899,23376,23383,23398,23567,23665,24029,24038,24180,25163,25991,26085,26089,26376,26408,26412,26449,26519,26657,26862,27491,27671,27700,28779,29356,29577,29579,29983,30000,30007,30010,30333,30334,30446,30707,31354,31435,31481,31992,32819,33457,33609,34411,35211,35997,36196,36275,36554,37329,38632,38738,38899,19975,20024,20132,20140,20170,20250,20307,20309,20316,20803,20804,20809,20844,20869,20908,20992,20998,20999,21069,21271,21320,21322,21335,21407,21451,21476,21488,21512,21516,22238,22259,22269,22290,22320,22580,22768,22770,22799,22806,22810,22812,22826,22969,22985,23460,23478,23546,23569,23721,24037,24066,24112,24195,24215,24339,24341,24351,24369,24375,24403,24418,24460,24515,24605,25144,25165,25945,25968,26032,26041,26126,26143,26149,26172,26178,26228,26332,26360,26397,26469,26481,27005,27468,27490,27497,27597,27598,27611,27744,27773,27963,28023,28857,29238,29275,29702,29992,30011,30058,30452,30690,30693,31038,31179,31185,31572,31639,31859,32025,32048,32068,32117,32218,32701,32771,32862,32905,33258,33337,33394,33590,34892,35199,35242,35282,35328,35336,35352,35441,35486,35501,35895,36023,36208,36817,36890,36913,36947,36960,37324,37326,38263,38272,38291,38634,38642,38651,38957,38996,39080,39135,39318,39340,39640,39770,40165,40180,40614,40644,40658,19969,19990,20001,20027,20055,20104,20107,20181,20182,20195,20303,20351,20418,20493,20840,20855,20889,21015,21161,21193,21205,21213,21270,21306,21307,21435,21453,21462,21463,21495,21521,21531,21619,21629,21644,21697,21729,21830,21839,22338,22830,22987,22996,23432,23433,23450,23455,23458,23470,23487,23506,23550,23616,23627,23736,23798,24030,24115,24179,24184,24230,24235,24237,24335,24441,24453,24613,24687,24746,24754,24819,24847,24863,25152,25171,25237,25342,25345,25351,25918,25972,26053,26063,26132,26157,26257,26263,26354,26377,26381,26399,26495,26609,26681,26893,26989,27096,27178,27211,27425,27503,27515,27703,27770,27833,27874,27880,27891,27915,27969,28040,28145,28201,28207,28246,28271,28450,28845,29289,29699,30001,30003,30028,30033,30149,30330,30331,30382,30399,30456,30476,30495,30528,30701,30740,31036,31070,31085,31119,31186,31350,31456,31461,31515,31532,31558,31561,31665,32026,32066,32209,32244,32650,32654,32722,32773,32946,33510,33655,33853,33865,34220,34880,34920,35433,35519,35527,35910,36000,36215,36335,36523,36578,36605,36786,36820,36861,36865,36895,36914,36938,36939,37096,37117,37197,37202,37325,37444,37504,38283,38498,38525,38542,38598,38754,38988,39154,39208,39365,40763,19981,20105,20184,20196,20197,20210,20253,20301,20302,20363,20415,20449,20489,20505,20511,20572,20581,20596,20685,20740,20806,20816,20849,20853,20856,20919,21021,21029,21033,21047,21103,21151,21152,21162,21172,21191,21253,21330,21332,21336,21338,21360,21442,21490,21496,21508,21578,21608,21809,21916,22120,22258,22266,22411,22530,22633,22763,22793,22827,22833,22909,23395,23403,23436,23448,23475,23519,24035,24046,24076,24109,24111,24213,24220,24247,24314,24452,24466,24471,24517,24565,24859,25104,25126,25240,25369,25913,25937,25943,25955,26009,26071,26152,26223,26368,26395,26410,26411,26413,26448,26463,26494,26524,26628,26696,26757,26800,26997,27161,27231,27424,27508,27531,27578,27602,27663,27665,27714,27835,27861,27875,27973,28020,28165,28288,28417,28783,28961,28982,28988,29031,29105,29287,29305,29987,30340,30465,31069,31080,31278,31309,31478,31505,31649,31680,31881,32000,32004,32080,32102,32154,32622,32769,32963,33032,33144,33251,33322,33391,33464,33469,33521,33756,34903,34915,35201,35226,35251,35347,35430,35500,35506,35696,35937,36008,36015,36027,36062,36557,36650,36766,36794,36899,36948,36984,37089,37327,37682,37857,38306,38520,38538,38745,38918,39000,39006,39131,39151,39178,39443,20037,20175,20206,20214,20219,20284,20313,20385,20445,20462,20469,20491,20633,20687,20877,21002,21028,21046,21048,21063,21177,21209,21218,21402,21477,21487,21942,22240,22243,22311,22312,22343,22522,22577,22659,22675,22679,22818,22971,23142,23481,23492,23500,23566,23621,23646,24067,24107,24120,24185,24207,24321,24373,24448,24489,24499,24535,24540,24555,24615,24681,24773,24907,24931,25215,25216,25307,25480,25505,25509,25552,25613,25903,25919,25925,25973,26029,26087,26131,26292,26465,26525,26619,26684,26716,26908,27083,27494,27604,27704,27827,28082,28151,28187,28204,28310,28436,28500,28797,29123,29256,29359,29366,29420,29575,29694,30041,30053,30410,30524,30772,30906,31034,31062,31105,31227,31243,31246,31689,31934,32032,32076,32113,32118,32191,32207,32232,32318,32340,32618,32676,32681,32789,32887,32933,33021,33288,33292,33294,34899,34907,35069,35079,35215,35299,35373,35377,35388,35413,35611,35613,35672,35703,35914,36001,36007,36012,36024,36031,36032,36039,36059,36074,36664,36848,36855,36864,36870,36896,36942,36969,37240,37489,37509,37549,38450,38480,38522,38555,38609,38750,38928,38936,38989,39164,20006,20081,20083,20129,20161,20379,20467,20516,20663,20778,20826,20874,20966,21051,21106,21109,21127,21220,21361,21365,21427,21454,21518,21542,21560,21628,21892,22256,22402,22478,22495,22863,22894,23039,23384,23389,23429,23431,23447,23449,23453,23459,23494,23544,23554,23556,23558,23562,23601,23610,23626,23637,23652,24049,24059,24149,24178,24188,24193,24231,24310,24459,24467,24536,24544,25010,25105,25209,25285,25309,25313,25448,25506,25512,25582,25805,25964,26144,26217,26262,26286,26391,26426,26522,26579,26666,26834,27169,27177,27193,27442,27573,27839,27849,27927,27966,28168,28304,28526,28608,28784,29087,29255,29677,30064,30097,30171,30343,30427,30431,30475,30722,30913,31169,31192,31296,31348,31379,31563,31574,31777,31958,31995,32005,32013,32020,32121,32294,32302,32626,32716,32854,32954,32972,33016,33075,33145,33235,33256,33267,33509,33879,33976,34101,34453,34886,35009,35013,35023,35036,35222,35239,35342,35370,35379,35422,35468,35469,35477,35488,35492,35542,35576,35686,36020,36035,36986,37109,37111,37341,37628,38281,38307,38477,38491,38500,38556,38627,38761,38914,39592,19976,19982,19988,19992,19993,20025,20047,20057,20094,20102,20114,20117,20124,20139,20141,20171,20185,20208,20225,20239,20240,20271,20276,20280,20282,20294,20304,20339,20341,20365,20381,20398,20399,20405,20419,20426,20439,20472,20498,20515,20523,20537,20553,20559,20597,20598,20605,20621,20625,20632,20652,20661,20670,20693,20698,20711,20736,20754,20767,20805,20811,20813,20860,20882,20887,20896,20934,20941,20957,20961,20982,20984,20985,20995,21000,21009,21040,21050,21066,21078,21083,21091,21092,21104,21155,21169,21182,21189,21208,21215,21223,21234,21242,21249,21280,21305,21311,21319,21329,21331,21344,21363,21364,21368,21380,21400,21448,21450,21452,21460,21465,21483,21484,21513,21519,21520,21535,21547,21561,21576,21577,21682,21696,21746,21766,21767,21776,21807,21843,21914,21917,21930,21931,21987,22022,22065,22132,22151,22234,22287,22346,22353,22378,22435,22475,22519,22521,22528,22533,22549,22564,22570,22592,22593,22602,22609,22612,22615,22618,22654,22684,22696,22707,22718,22721,22727,22730,22732,22766,22769,22855,22857,22865,22868,22885,22888,22890,22900,22914,22915,22916,22922,22937,22949,22952,22995,23019,23035,23041,23064,23072,23087,23110,23130,23167,23186,23233,23244,23265,23330,23380,23396,23452,23472,23476,23477,23490,23515,23517,23521,23527,23529,23534,23551,23553,23561,23563,23578,23612,23613,23614,23615,23624,23653,23663,23696,23724,23731,23776,23777,23792,23815,23822,23849,24033,24039,24040,24070,24093,24101,24125,24133,24163,24187,24189,24190,24202,24246,24248,24259,24265,24266,24311,24330,24336,24340,24358,24359,24382,24425,24427,24432,24433,24444,24449,24464,24481,24490,24494,24500,24505,24524,24525,24537,24594,24598,24608,24618,24651,24656,24658,24677,24680,24685,24693,24724,24735,24736,24739,24742,24745,24764,24785,24796,24808,24816,24833,24841,24858,24904,24908,24910,24917,24930,24936,24942,24944,24950,24962,24974,24996,25001,25014,25022,25031,25040,25074,25080,25106,25135,25147,25151,25159,25161,25173,25201,25206,25220,25226,25233,25239,25244,25246,25259,25265,25269,25273,25276,25277,25293,25296,25298,25299,25304,25305,25312,25324,25335,25361,25375,25391,25407,25429,25436,25454,25475,25484,25490,25496,25499,25511,25514,25522,25551,25562,25563,25569,25588,25594,25644,25645,25658,25662,25666,25688,25705,25731,25764,25774,25778,25793,25830,25836,25915,25935,25954,25975,25993,25998,26007,26012,26020,26021,26045,26059,26082,26088,26092,26118,26119,26159,26222,26230,26241,26247,26278,26283,26311,26356,26361,26367,26389,26417,26420,26429,26441,26479,26512,26528,26530,26543,26550,26564,26576,26580,26611,26643,26680,26685,26691,26705,26719,26820,26827,26842,26847,26874,27004,27010,27133,27396,27431,27450,27454,27475,27507,27529,27530,27542,27572,27579,27583,27713,27735,27738,27743,27784,27798,27809,27810,27832,27836,27841,27850,27852,27873,27877,27888,27934,27941,27946,27972,27996,28006,28010,28014,28024,28057,28079,28092,28113,28129,28155,28167,28169,28171,28179,28193,28198,28286,28287,28317,28342,28357,28363,28369,28381,28382,28404,28418,28422,28431,28448,28459,28460,28472,28508,28511,28516,28548,28609,28611,28651,28655,28716,28809,28810,28814,28858,28872,28966,29017,29033,29038,29128,29157,29190,29237,29298,29344,29378,29417,29421,29467,29471,29483,29486,29494,29503,29508,29539,29554,29572,29645,29664,29748,29872,29885,29942,29976,29978,30002,30036,30044,30045,30067,30094,30123,30130,30142,30151,30168,30178,30196,30274,30290,30294,30342,30406,30423,30435,30436,30450,30462,30496,30522,30561,30563,30636,30683,30703,30741,30770,30813,30827,30828,30849,30865,30952,30977,30990,31048,31049,31077,31109,31117,31168,31199,31209,31216,31258,31282,31292,31295,31298,31311,31339,31361,31363,31378,31406,31407,31452,31471,31526,31570,31623,31684,31716,31807,31821,31883,31890,31895,31896,31899,31911,31975,31998,32011,32027,32033,32034,32043,32047,32051,32057,32058,32094,32097,32153,32173,32177,32178,32202,32210,32224,32233,32239,32257,32260,32283,32299,32321,32330,32341,32365,32368,32566,32624,32631,32645,32705,32763,32764,32784,32791,32884,32908,32918,32925,32930,32937,32938,32943,32966,32974,32990,33012,33026,33029,33050,33073,33081,33104,33109,33136,33178,33180,33192,33261,33268,33303,33310,33311,33324,33334,33351,33382,33419,33437,33459,33495,33538,33550,33618,33624,33738,33740,33747,33775,33900,33988,34180,34214,34218,34219,34281,34299,34384,34394,34396,34398,34442,34503,34509,34542,34701,34909,34913,34928,34935,34955,34987,35010,35029,35064,35088,35090,35167,35186,35206,35207,35302,35330,35351,35359,35380,35386,35408,35412,35424,35440,35442,35443,35463,35465,35475,35480,35531,35565,35566,35582,35584,35585,35588,35609,35617,35641,35676,35698,35930,35946,35998,36002,36009,36011,36036,36042,36051,36060,36064,36066,36070,36092,36104,36198,36212,36229,36234,36259,36317,36321,36339,36341,36362,36367,36493,36556,36562,36575,36600,36611,36617,36637,36649,36676,36763,36785,36796,36805,36814,36843,36845,36867,36879,36880,36883,36884,36893,36910,36920,36930,36933,36935,36941,36949,36963,36973,36974,36981,36983,36991,36996,37030,37034,37048,37066,37070,37101,37196,37204,37218,37226,37228,37237,37239,37276,37304,37320,37347,37389,37428,37467,37474,37507,37521,37528,37613,37619,37656,37664,37676,37679,37723,37782,37806,37912,37969,38289,38309,38322,38360,38459,38468,38499,38501,38506,38512,38515,38517,38518,38533,38534,38543,38548,38560,38563,38583,38587,38596,38597,38599,38604,38626,38640,38646,38647,38656,38663,38666,38684,38695,38706,38772,38907,38911,38917,38929,38930,38971,38972,38997,39015,39138,39165,39166,39187,39321,39364,39366,39376,39438,39442,39472,39514,39620,39658,39740,39746,39749,39764,39854,39912,40335,40599,40635,40665,40723,40802</span><span style="color:#e6db74">&#34;</span>
<span style="color:#75715e"># 常用漢字</span>
src2 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;亜哀挨愛曖悪握圧扱宛嵐安案暗以衣位囲医依委威為畏胃尉異移萎偉椅彙意違維慰遺緯域育一壱逸茨芋引印因咽姻員院淫陰飲隠韻右宇羽雨唄鬱畝浦運雲永泳英映栄営詠影鋭衛易疫益液駅悦越謁閲円延沿炎宴怨媛援園煙猿遠鉛塩演縁艶汚王凹央応往押旺欧殴桜翁奥横岡屋億憶臆虞乙俺卸音恩温穏下化火加可仮何花佳価果河苛科架夏家荷華菓貨渦過嫁暇禍靴寡歌箇稼課蚊牙瓦我画芽賀雅餓介回灰会快戒改怪拐悔海界皆械絵開階塊楷解潰壊懐諧貝外劾害崖涯街慨蓋該概骸垣柿各角拡革格核殻郭覚較隔閣確獲嚇穫学岳楽額顎掛潟括活喝渇割葛滑褐轄且株釜鎌刈干刊甘汗缶完肝官冠巻看陥乾勘患貫寒喚堪換敢棺款間閑勧寛幹感漢慣管関歓監緩憾還館環簡観韓艦鑑丸含岸岩玩眼頑顔願企伎危机気岐希忌汽奇祈季紀軌既記起飢鬼帰基寄規亀喜幾揮期棋貴棄毀旗器畿輝機騎技宜偽欺義疑儀戯擬犠議菊吉喫詰却客脚逆虐九久及弓丘旧休吸朽臼求究泣急級糾宮救球給嗅窮牛去巨居拒拠挙虚許距魚御漁凶共叫狂京享供協況峡挟狭恐恭胸脅強教郷境橋矯鏡競響驚仰暁業凝曲局極玉巾斤均近金菌勤琴筋僅禁緊錦謹襟吟銀区句苦駆具惧愚空偶遇隅串屈掘窟熊繰君訓勲薫軍郡群兄刑形系径茎係型契計恵啓掲渓経蛍敬景軽傾携継詣慶憬稽憩警鶏芸迎鯨隙劇撃激桁欠穴血決結傑潔月犬件見券肩建研県倹兼剣拳軒健険圏堅検嫌献絹遣権憲賢謙鍵繭顕験懸元幻玄言弦限原現舷減源厳己戸古呼固孤弧股虎故枯個庫湖雇誇鼓錮顧五互午呉後娯悟碁語誤護口工公勾孔功巧広甲交光向后好江考行坑孝抗攻更効幸拘肯侯厚恒洪皇紅荒郊香候校耕航貢降高康控梗黄喉慌港硬絞項溝鉱構綱酵稿興衡鋼講購乞号合拷剛傲豪克告谷刻国黒穀酷獄骨駒込頃今困昆恨根婚混痕紺魂墾懇左佐沙査砂唆差詐鎖座挫才再災妻采砕宰栽彩採済祭斎細菜最裁債催塞歳載際埼在材剤財罪崎作削昨柵索策酢搾錯咲冊札刷刹拶殺察撮擦雑皿三山参桟蚕惨産傘散算酸賛残斬暫士子支止氏仕史司四市矢旨死糸至伺志私使刺始姉枝祉肢姿思指施師恣紙脂視紫詞歯嗣試詩資飼誌雌摯賜諮示字寺次耳自似児事侍治持時滋慈辞磁餌璽鹿式識軸七叱失室疾執湿嫉漆質実芝写社車舎者射捨赦斜煮遮謝邪蛇尺借酌釈爵若弱寂手主守朱取狩首殊珠酒腫種趣寿受呪授需儒樹収囚州舟秀周宗拾秋臭修袖終羞習週就衆集愁酬醜蹴襲十汁充住柔重従渋銃獣縦叔祝宿淑粛縮塾熟出述術俊春瞬旬巡盾准殉純循順準潤遵処初所書庶暑署緒諸女如助序叙徐除小升少召匠床抄肖尚招承昇松沼昭宵将消症祥称笑唱商渉章紹訟勝掌晶焼焦硝粧詔証象傷奨照詳彰障憧衝賞償礁鐘上丈冗条状乗城浄剰常情場畳蒸縄壌嬢錠譲醸色拭食植殖飾触嘱織職辱尻心申伸臣芯身辛侵信津神唇娠振浸真針深紳進森診寝慎新審震薪親人刃仁尽迅甚陣尋腎須図水吹垂炊帥粋衰推酔遂睡穂随髄枢崇数据杉裾寸瀬是井世正生成西声制姓征性青斉政星牲省凄逝清盛婿晴勢聖誠精製誓静請整醒税夕斥石赤昔析席脊隻惜戚責跡積績籍切折拙窃接設雪摂節説舌絶千川仙占先宣専泉浅洗染扇栓旋船戦煎羨腺詮践箋銭潜線遷選薦繊鮮全前善然禅漸膳繕狙阻祖租素措粗組疎訴塑遡礎双壮早争走奏相荘草送倉捜挿桑巣掃曹曽爽窓創喪痩葬装僧想層総遭槽踪操燥霜騒藻造像増憎蔵贈臓即束足促則息捉速側測俗族属賊続卒率存村孫尊損遜他多汰打妥唾堕惰駄太対体耐待怠胎退帯泰堆袋逮替貸隊滞態戴大代台第題滝宅択沢卓拓託濯諾濁但達脱奪棚誰丹旦担単炭胆探淡短嘆端綻誕鍛団男段断弾暖談壇地池知値恥致遅痴稚置緻竹畜逐蓄築秩窒茶着嫡中仲虫沖宙忠抽注昼柱衷酎鋳駐著貯丁弔庁兆町長挑帳張彫眺釣頂鳥朝貼超腸跳徴嘲潮澄調聴懲直勅捗沈珍朕陳賃鎮追椎墜通痛塚漬坪爪鶴低呈廷弟定底抵邸亭貞帝訂庭逓停偵堤提程艇締諦泥的笛摘滴適敵溺迭哲鉄徹撤天典店点展添転塡田伝殿電斗吐妬徒途都渡塗賭土奴努度怒刀冬灯当投豆東到逃倒凍唐島桃討透党悼盗陶塔搭棟湯痘登答等筒統稲踏糖頭謄藤闘騰同洞胴動堂童道働銅導瞳峠匿特得督徳篤毒独読栃凸突届屯豚頓貪鈍曇丼那奈内梨謎鍋南軟難二尼弐匂肉虹日入乳尿任妊忍認寧熱年念捻粘燃悩納能脳農濃把波派破覇馬婆罵拝杯背肺俳配排敗廃輩売倍梅培陪媒買賠白伯拍泊迫剝舶博薄麦漠縛爆箱箸畑肌八鉢発髪伐抜罰閥反半氾犯帆汎伴判坂阪板版班畔般販斑飯搬煩頒範繁藩晩番蛮盤比皮妃否批彼披肥非卑飛疲秘被悲扉費碑罷避尾眉美備微鼻膝肘匹必泌筆姫百氷表俵票評漂標苗秒病描猫品浜貧賓頻敏瓶不夫父付布扶府怖阜附訃負赴浮婦符富普腐敷膚賦譜侮武部舞封風伏服副幅復福腹複覆払沸仏物粉紛雰噴墳憤奮分文聞丙平兵併並柄陛閉塀幣弊蔽餅米壁璧癖別蔑片辺返変偏遍編弁便勉歩保哺捕補舗母募墓慕暮簿方包芳邦奉宝抱放法泡胞俸倣峰砲崩訪報蜂豊飽褒縫亡乏忙坊妨忘防房肪某冒剖紡望傍帽棒貿貌暴膨謀頰北木朴牧睦僕墨撲没勃堀本奔翻凡盆麻摩磨魔毎妹枚昧埋幕膜枕又末抹万満慢漫未味魅岬密蜜脈妙民眠矛務無夢霧娘名命明迷冥盟銘鳴滅免面綿麺茂模毛妄盲耗猛網目黙門紋問冶夜野弥厄役約訳薬躍闇由油喩愉諭輸癒唯友有勇幽悠郵湧猶裕遊雄誘憂融優与予余誉預幼用羊妖洋要容庸揚揺葉陽溶腰様瘍踊窯養擁謡曜抑沃浴欲翌翼拉裸羅来雷頼絡落酪辣乱卵覧濫藍欄吏利里理痢裏履璃離陸立律慄略柳流留竜粒隆硫侶旅虜慮了両良料涼猟陵量僚領寮療瞭糧力緑林厘倫輪隣臨瑠涙累塁類令礼冷励戻例鈴零霊隷齢麗暦歴列劣烈裂恋連廉練錬呂炉賂路露老労弄郎朗浪廊楼漏籠六録麓論和話賄脇惑枠湾腕&#34;</span>
<span style="color:#75715e"># 含めたい文字など</span>
src3 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;※&#34;</span>;

<span style="color:#75715e"># int配列への変換</span>
dst1 <span style="color:#f92672">=</span> thorikawa2intarr(src1)
dst2 <span style="color:#f92672">=</span> kanji2intarr(src2)
dst3 <span style="color:#f92672">=</span> kanji2intarr(src3)

dst <span style="color:#f92672">=</span> (dst1 <span style="color:#f92672">+</span> dst2 <span style="color:#f92672">+</span> dst3)<span style="color:#f92672">.</span>uniq<span style="color:#f92672">.</span>sort

<span style="color:#75715e"># 結果を文字列にする</span>
output <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>;
dst<span style="color:#f92672">.</span>each{<span style="color:#f92672">|</span>var<span style="color:#f92672">|</span>
    output <span style="color:#f92672">=</span> output <span style="color:#f92672">+</span> var<span style="color:#f92672">.</span>chr(<span style="color:#66d9ef">Encoding</span><span style="color:#f92672">::</span><span style="color:#66d9ef">UTF_8</span>)
}

<span style="color:#75715e"># 保存</span>
<span style="color:#66d9ef">File</span><span style="color:#f92672">.</span>open(<span style="color:#e6db74">&#34;./result.txt&#34;</span>, <span style="color:#e6db74">&#34;w&#34;</span>) <span style="color:#66d9ef">do</span> <span style="color:#f92672">|</span>f<span style="color:#f92672">|</span>
  f<span style="color:#f92672">.</span>puts(output)
<span style="color:#66d9ef">end</span>
</code></pre></div><p>上記、スクリプトをコピーしていただいてもOKですし、GitHubにもありますのでご自由に使っていただければと思います。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fshamaton%2ftextmeshpro_converter" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>スクリプトを取得したら、含めたい文字があればsrc3に追記しておきます。<br>
このブログではsrc1,src2に含まれない米印（※）を追加しています。
スクリプトを実行すると同じフォルダに結果（result.txt）が生成されます。<br>
（中身は文字の羅列です）</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ ruby script.rb

$ ls
result.txt script.rb
</code></pre></div><p>生成されたファイルを、Unity側のAssets配下においておき、FontAssetCreatorを開きます。<br>
（[Menu] → [Window] → [TextMeshPro] → [Font Asset Creator]）<br>
Font SettingはAtlas Resolutionを<code>2048</code>か<code>4096</code>辺りに設定し、Character SetをCharacters from Fileにして、先程生成したファイルを参照します。<br>
（フォントは適宜置き換えてください）</p>
<figure>
    <img src="/images/posts/2017/11/tm_1.png"/> 
</figure>

<p>Atlas生成には時間がかかるので、気長にまちましょう。<br>
生成されたら、後は[Save TextMeshPro Font Asset]で保存して完了です。</p>
<figure>
    <img src="/images/posts/2017/11/tm_3.png"/> 
</figure>

<p>これで大体の日本語と使いたい文字が使えるようになります。<br>
以上です。</p>
<p>■参考







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fqiita.com%2fchezou%2fitems%2f947900faef4c1032ed94" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>








<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fqiita.com%2fhinagawa%2fitems%2fb606c6a2fd56d559a375" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
]]></content>
        </item>
        
        <item>
            <title>[Go] Go &#43; Redisで位置情報を扱ってみる</title>
            <link>https://shamaton.dev/posts/415/</link>
            <pubDate>Mon, 29 Jan 2018 15:11:40 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/415/</guid>
            <description>お世話になっております。 しゃまとんです。 今回はGoで位置情報を扱ってみることにしました。 ちなみに作者の稚拙アプリ「ことだまっぷ」でも似たよう</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>今回はGoで位置情報を扱ってみることにしました。<br>
ちなみに作者の稚拙アプリ「ことだまっぷ」でも似たようなことをして位置情報を利用しています。</p>







<div id="appreach-box" style="text-align: left;">
    <p>
<img src="https://lh3.googleusercontent.com/AxCAhC3nUgPKVfKQlyZtGL0D0tKaghSsH-tV7NlXc5fSftWBPPBt5SHEIlHIlFexnG92=w170" alt="ことだまっぷ" style="float: left; margin: 10px; width: 25%; max-width: 120px; border-radius: 10%;" />
    </p>

<div class="appreach-info" style="margin: 10px;">
    <div id="appreach-appname">
        ことだまっぷ
    </div>


    <div id="appreach-developer" style="font-size: 80%; display: inline-block; _display: inline;">
        開発元:<a id="appreach-developerurl" href="" target="_blank" rel="nofollow noopener">shamaton</a>
    </div>

    <div id="appreach-price" style="font-size: 80%; display: inline-block; _display: inline;">
        無料
    </div>





    <div class="appreach-links" style="float: left;">
        <div id="appreach-itunes-link" style="display: inline-block; _display: inline;">
            <a id="appreach-itunes" href="https://itunes.apple.com/jp/app/%E3%81%93%E3%81%A8%E3%81%A0%E3%81%BE%E3%81%A3%E3%81%B7/id1312331217?mt=8&amp;uo=4" target="_blank" rel="nofollow noopener"><br /> <img src="https://nabettu.github.io/appreach/img/itune_ja.svg" style="height: 40px; width: 135px;" /><br /> </a>
        </div>

        <div id="appreach-gplay-link" style="display: inline-block; _display: inline;">
            <a id="appreach-gplay" href="https://play.google.com/store/apps/details?id=com.shamaton.kotoda.map" target="_blank" rel="nofollow noopener"><br /> <img src="https://nabettu.github.io/appreach/img/gplay_ja.png" style="height: 40px; width: 134.5px;" /><br /> </a>
        </div>
    </div>
</div>

<div class="appreach-footer" style="margin-bottom: 10px; clear: left;">
</div>
</div>
<p>位置情報を扱うために、Redisを利用しています。<br>
実装の際にRDBMSでできるかな～と思っていたのですが、
色々しらべたところRedisが対応していてパフォーマンスも良さそうなのでredisを使うことにしました。</p>
<p>Goでredisを扱えるようにするパッケージは色々あり、個人的には<a href="https://github.com/garyburd/redigo">redigo</a>を使っていたのですが、
位置情報を扱えるようになっていませんでした。そこで別パッケージのgo-redisが対応されているということで使っています。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fgo-redis%2fredis" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>実装の前にgo-redisを取得しておきましょう。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">go get -u github.com/go-redis/redis
</code></pre></div><p>確認用コードは下記のようになります。<br>
処理的には指定座標の半径10km以内のデータを取得するようなものです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>

<span style="color:#f92672">import</span> (
    <span style="color:#e6db74">&#34;fmt&#34;</span>
    <span style="color:#e6db74">&#34;github.com/go-redis/redis&#34;</span>
)

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {

    <span style="color:#a6e22e">client</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">redis</span>.<span style="color:#a6e22e">NewClient</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">redis</span>.<span style="color:#a6e22e">Options</span>{
            <span style="color:#a6e22e">Addr</span>:     <span style="color:#e6db74">&#34;localhost:6379&#34;</span>,
            <span style="color:#a6e22e">Password</span>: <span style="color:#e6db74">&#34;&#34;</span>, <span style="color:#75715e">// no password set
</span><span style="color:#75715e"></span>            <span style="color:#a6e22e">DB</span>:       <span style="color:#ae81ff">0</span>,  <span style="color:#75715e">// use default DB
</span><span style="color:#75715e"></span>    })

    <span style="color:#75715e">// query
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">query</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">redis</span>.<span style="color:#a6e22e">GeoRadiusQuery</span>{
        <span style="color:#a6e22e">Radius</span>:      <span style="color:#ae81ff">10</span>,
        <span style="color:#a6e22e">Unit</span>:        <span style="color:#e6db74">&#34;km&#34;</span>,
        <span style="color:#a6e22e">WithGeoHash</span>: <span style="color:#66d9ef">false</span>,
        <span style="color:#a6e22e">WithCoord</span>:   <span style="color:#66d9ef">true</span>,
        <span style="color:#a6e22e">WithDist</span>:    <span style="color:#66d9ef">false</span>,
        <span style="color:#a6e22e">Count</span>:       <span style="color:#ae81ff">10</span>,
        <span style="color:#a6e22e">Sort</span>:        <span style="color:#e6db74">&#34;ASC&#34;</span>,
    }

    <span style="color:#75715e">// get
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">GeoRadius</span>(<span style="color:#e6db74">&#34;test&#34;</span>, <span style="color:#ae81ff">12.4764785766602</span>, <span style="color:#ae81ff">41.9107551574707</span>, <span style="color:#a6e22e">query</span>).<span style="color:#a6e22e">Result</span>()
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">redis</span>.<span style="color:#a6e22e">Nil</span> {
        <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;redis nil........&#34;</span>)
    } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
        panic(<span style="color:#a6e22e">err</span>)
    } <span style="color:#66d9ef">else</span> {
        <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;result : &#34;</span>, len(<span style="color:#a6e22e">res</span>))
    }

    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">v</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">res</span> {
        <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">v</span>.<span style="color:#a6e22e">Name</span>, <span style="color:#e6db74">&#34;:&#34;</span>, <span style="color:#a6e22e">v</span>.<span style="color:#a6e22e">Latitude</span>, <span style="color:#e6db74">&#34;:&#34;</span>, <span style="color:#a6e22e">v</span>.<span style="color:#a6e22e">Longitude</span>)
    }
}
</code></pre></div><p>コードを実装したら、Redisに確認用データを入れておきます。<br>
Redisに接続して下記のコマンドを実行し位置情報を入れておきます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">GEOADD test 12.4762840270996 41.910514831543  &#34;geo_1&#34;
GEOADD test 12.4756031036377 41.910514831543  &#34;geo_2&#34;
GEOADD test 12.4768190383911 41.910514831543  &#34;geo_3&#34;
GEOADD test 12.4764785766602 41.9107551574707 &#34;geo_4&#34;
GEOADD test 12.4760408401489 41.9107551574707 &#34;geo_5&#34;
</code></pre></div><p>実行してみます。<br>
返り値はgo-redis側で用意されているので、扱いやすい状態になっています。<br>
というかgo-redisが結構使いやすい気がします。結果はこんな感じ。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">go run main.go
result :  <span style="color:#ae81ff">5</span>
geo_4 : 41.910756366557116 : 12.476480305194855
geo_1 : 41.91051556804698 : 12.476281821727753
geo_5 : 41.910756366557116 : 12.476040422916412
geo_3 : 41.91051556804698 : 12.476818263530731
geo_2 : 41.91051556804698 : 12.47560054063797
</code></pre></div><p>これで位置情報も扱っていけそうです。<br>
ちなみに環境を汚したくないという方はDockerfileも置いておくので良かったら使ってください。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-dockerfile" data-lang="dockerfile"><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> centos:7</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">MAINTAINER</span><span style="color:#e6db74"> shamaton</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> yum -y install wget git epel-release<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> yum -y install redis<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> mkdir -p /root/go <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span><span style="color:#f92672">&amp;&amp;</span>  echo <span style="color:#e6db74">&#34;GOPATH=/root/go&#34;</span> &gt;&gt; /root/.bashrc<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> wget https://redirector.gvt1.com/edgedl/go/go1.9.2.linux-amd64.tar.gz <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span><span style="color:#f92672">&amp;&amp;</span>  tar -C /usr/local -xzf go1.9.2.linux-amd64.tar.gz <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span><span style="color:#f92672">&amp;&amp;</span>  rm go1.9.2.linux-amd64.tar.gz <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span><span style="color:#f92672">&amp;&amp;</span>  echo <span style="color:#e6db74">&#34;PATH=</span>$PATH<span style="color:#e6db74">:/usr/local/go/bin:</span>$GOPATH<span style="color:#e6db74">/bin&#34;</span> &gt;&gt; /root/.bashrc <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span><span style="color:#f92672">&amp;&amp;</span>  source /root/.bashrc<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> /usr/local/go/bin/go get -u github.com/go-redis/redis<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">WORKDIR</span><span style="color:#e6db74"> /root</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">CMD</span> [<span style="color:#e6db74">&#34;/bin/sh&#34;</span>]&lt;/pre&gt;<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>コンテナのビルドと実行は下記な感じで。<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>&lt;pre class<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;lang:default decode:true &#34;</span>&gt;docker build -t goredis .<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>docker run --name go_redis -i -t goredis:latest /bin/bash<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># 確認</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>go version<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>ls go/src/github.com<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># redisの起動（コンテナ内）</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>redis-server &amp;<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>以上です。</p>
<p>■ 参考</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fblog.shimar.me%2f2016%2f11%2f21%2fredis-georadius.html" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

]]></content>
        </item>
        
        <item>
            <title>[CC] BitZenyをDockerでマイニングしてみる</title>
            <link>https://shamaton.dev/posts/518/</link>
            <pubDate>Sun, 21 Jan 2018 02:57:17 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/518/</guid>
            <description>お世話になっております。 しゃまとんです。 仮想通貨が盛り上がっておりますね。 かくいう私もちょっとしたきっかけがあり、知識をつけたいと思い少しず</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>仮想通貨が盛り上がっておりますね。<br>
かくいう私もちょっとしたきっかけがあり、知識をつけたいと思い少しずつ調べたりしてます。
なんか仮想通貨に興味があるというと嫌な顔する人が多そうですけど。。。</p>
<p>今回はマイニングについてです。<br>
とはいってもマイニングのやり方〜みたいなのはもはや記事だらけでしょうし、調べていただければと思います。
やってみると数値がインクリメントされていって面白いですね。</p>
<p>対象の通貨はBitZenyです。BitZenyはCPUでマイニングできて誰でもやりやすいみたいですね。
ただMacでマイニングするには単純にmakeするだけはダメなようで、makefile等に変更を加えないと実行まで行けないようです。</p>
<p>そこで今回はDockerを使って、Ubuntuのコンテナを使ってminerをビルドしてみることにしました。
Ubuntu（Linux）だと特に変更を加えることなくビルドして実行することができます。</p>
<p>Githubはこちら</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fshamaton%2fdocker-miner-zeny" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>まずはDockerfileはこんな感じです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-dockerfile" data-lang="dockerfile"><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> ubuntu:xenial</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">MAINTAINER</span><span style="color:#e6db74"> shamaton</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">WORKDIR</span><span style="color:#e6db74"> /root</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> apt-get update <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span> <span style="color:#f92672">&amp;&amp;</span> apt-get -y install <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    git <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    wget <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    libjansson-dev <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    automake <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    libtool <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    curl <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    libcurl3 <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    libcurl3-dev <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    make<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">WORKDIR</span><span style="color:#e6db74"> /root</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> start.sh /root/start.sh<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> chmod a+x /root/start.sh<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> git clone https://github.com/bitzeny/cpuminer <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span> <span style="color:#f92672">&amp;&amp;</span> cd cpuminer <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span> <span style="color:#f92672">&amp;&amp;</span> sh autogen.sh <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span> <span style="color:#f92672">&amp;&amp;</span> ./configure CFLAGS<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;-O3 -march=native -funroll-loops -fomit-frame-pointer&#34;</span>  <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span> <span style="color:#f92672">&amp;&amp;</span> make<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">CMD</span> [<span style="color:#e6db74">&#34;/root/start.sh&#34;</span>]<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>ビルドに必要なパッケージをインストール後、minerのリポジトリを取得します。<br>
そのまま実行ファイル生成までを行い、起動スクリプトを最後に実行します。<br>
上記のコンテナイメージを手元でビルドする場合は下記のコマンドを実行します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">docker build -t zeny:latest .
</code></pre></div><p>ビルドが完了したら、イメージを利用してコンテナを立ち上げてみましょう。<br>
コンテナを起動する際には環境変数を指定することでマイニングを実行できるようにしています。<br>
私は<a href="%22http://daddy-pool.work/%22">Daddy-Pool</a>を使っているのでそちらを例に実行してみます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">docker run --name mining <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>  --env POOL<span style="color:#f92672">=</span>stratum+tcp://daddy-pool.work:15020 <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>  --env WALLET<span style="color:#f92672">=</span>ZrVLRVeLx9MTkETu8hMk3U2ZKao5Jx4ayC <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>  --env THREAD_NUM<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> zeny
</code></pre></div><p>実行して<code>（yay!!!）</code>の表示がでれば成功です。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Starting Stratum on stratum+tcp://daddy-pool.work:15021
1 miner threads started, using &#39;yescrypt&#39; algorithm.
Stratum requested work restart
thread 0: 1214 hashes, 0.51 khash/s
accepted: 1/1 (100.00%), 0.51 khash/s (yay!!!)
</code></pre></div><p>コンテナさえ用意できれば後はどのOSでも実行することができますね。<br>
ちなみにこちらのDockerfileはDockerhubにも公開しているのでpullしてすぐに使うことができます。</p>
<p><a href="https://hub.docker.com/r/shamaton/miner-zeny/">shamaton/miner-zeny</a></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">docker pull shamaton/miner-zeny
</code></pre></div><p>さくっとマイニング環境が作成できるので試してみてください！<br>
以上です。</p>
<p>■参考







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fqiita.com%2fhoneniq%2fitems%2f07ae3d73eb0e8a8fb27f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
]]></content>
        </item>
        
        <item>
            <title>[Docker] gcloudとkubectlが使えるコンテナを用意してみる</title>
            <link>https://shamaton.dev/posts/464/</link>
            <pubDate>Sun, 14 Jan 2018 04:41:26 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/464/</guid>
            <description>お世話になっております。 しゃまとんです。 gcloudとkubectlを自分のPCにinstallして使えるようにしているのですが、 ふとコンテ</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>gcloudとkubectlを自分のPCにinstallして使えるようにしているのですが、<br>
ふとコンテナでも使えるんかなーと思いやってみました。</p>
<p>とりあえず自分の環境を汚さずに使ってみたいという人はありかも？です。<br>
それでは手順です。</p>
<p>コンテナのベースにはubuntuを使います。<br>
まずはubuntuコンテナを作って入ります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">docker pull ubuntu
docker run --name ubuntu_gcloud -d -i -t -p <span style="color:#ae81ff">8080</span> ubuntu /bin/bash
docker exec -i -t ubuntu_gcloud /bin/bash
<span style="color:#75715e"># port設定いらないかも</span>
</code></pre></div><p>ここからはコンテナ内で行います。<br>
まずはgcloudをインストールするために必要なパッケージを入れておきます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">apt-get -y update
apt-get -y install curl python
</code></pre></div><p>次に下記コマンドを実行します。<br>
コレを実行するとgcloudにインストールを行ってくれます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">curl https://sdk.cloud.google.com | bash
</code></pre></div><p>途中で質問があるので答えておきます。<br>
何回か答えると、インストールが完了します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Installation directory (this will create a google-cloud-sdk subdirectory) (/root): 空ENTER

Do you want to help improve the Google Cloud SDK (Y/n)? n（Yでもいいです）

Modify profile to update your $PATH and enable shell command
completion?

Do you want to continue (Y/n)? y

The Google Cloud SDK installer will now prompt you to update an rc
file to bring the Google Cloud CLIs into your environment.

Enter a path to an rc file to update, or leave blank to use
[/root/.bashrc]: 空ENTER
</code></pre></div><p>直後はgcloudが有効になってないので、読み直しておきます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">source ~/.bashrc
</code></pre></div><p>次に自分のアカウントと紐づけしていきます。<br>
ここでも質問があるので順にすすめます。<br>
まずは下記コマンドを実行。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">gcloud init
</code></pre></div><p>ログインしたいか聞かれるのでyにして表示されたURLをコピーしてブラウザに貼り付けます。<br>
すると認証コードが表示されるので、さらにコピーしてverification codeに貼り付けます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">You must log in to continue. Would you like to log in (Y/n)? y

Go to the following link in your browser:

# URLにアクセス
https://accounts.google.com/o/oauth2/auth?redirect_uri=xxxxxxxxxxxxxxxxxxx

Enter verification code: &#34;認証コード&#34;
</code></pre></div><p>認証が通ると、アカウントが表示されます。</p>
<p>そのまま、プロジェクトの選択を要求されます。今回は既存のプロジェクトを選択しました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">You are logged in as: [youraccount@email.com].

Pick cloud project to use:
[1] project-xxxxx
[2] Create a new project
Please enter numeric choice or text value (must exactly match list
item): 1

Your current project has been set to: [project-xxxxx].
</code></pre></div><p>さらに普段使うzoneとregionも設定するか聞かれます。</p>
<p>日本がいい！ということであれば<code>asia-notheast1</code>のどれかを選択しましょう。<br>
（nを選択しても後から、設定できます）</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">(https://cloud.google.com/compute) settings (Y/n)? Y

If you do not specify a zone via a command line flag while working
with Compute Engine resources, the default is assumed.
...
[4] asia-northeast1-c
[5] asia-northeast1-b
[6] asia-northeast1-a
...
</code></pre></div><p>これでコマンドからインスタンスを作成する場合にzoneとregionがasia-northeastになります。</p>
<p>次にkubectlを使えるようにしておきます。<br>
下記コマンドを実行してyにするだけです。Update done!と表示されれば完了です。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">gcloud components install kubectl

Do you want to <span style="color:#66d9ef">continue</span> <span style="color:#f92672">(</span>Y/n<span style="color:#f92672">)</span>? y
</code></pre></div><p>一応コマンドが使えるか確認してみます。</p>
<p>とりあえずクラスタを作成してみます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e"># root@df1165c2a16f</span>
gcloud container clusters create test-cluster --machine-type<span style="color:#f92672">=</span>f1-micro
Creating cluster test-cluster...done.
Created <span style="color:#f92672">[</span>https://container.googleapis.com/v1/projects/project-xxxxx/zones/asia-northeast1-a/clusters/test-cluster<span style="color:#f92672">]</span>.
kubeconfig entry generated <span style="color:#66d9ef">for</span> test-cluster.
NAME ZONE MASTER_VERSION MASTER_IP MACHINE_TYPE NODE_VERSION NUM_NODES STATUS
test-cluster asia-northeast1-a 1.7.8-gke.0 xxx.xxx.xxx.xxx f1-micro 1.7.8-gke.0 <span style="color:#ae81ff">3</span> RUNNING
</code></pre></div><p>クラスタ情報を確認してみます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e"># root@df1165c2a16f</span>
kubectl cluster-info
Kubernetes master is running at https://xxx.xxx.xxx.xxx
GLBCDefaultBackend is running at https://xxx.xxx.xxx.xxx/api/v1/namespaces/kube-system/services/default-http-backend/proxy
Heapster is running at https://xxx.xxx.xxx.xxx/api/v1/namespaces/kube-system/services/heapster/proxy
KubeDNS is running at https://xxx.xxx.xxx.xxx/api/v1/namespaces/kube-system/services/kube-dns/proxy
</code></pre></div><p>最後に後始末しておきます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e"># root@df1165c2a16f</span>
gcloud container clusters delete test-cluster
</code></pre></div><p>コンテナ内でも変わらず使えるっぽいことがわかりました。<br>
コンテナは使い捨てが出来るので気楽に試せていいですね。<br>
以上です。</p>
<p>■ 参考</p>
<p>






<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fqiita.com%2fkentarosasaki%2fitems%2f2232113b44b016a56adc" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>








<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fcloud.google.com%2fkubernetes-engine%2fdocs%2fquickstart%3fhl%3dja" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
]]></content>
        </item>
        
        <item>
            <title>[Server] Let&#39;s Encryptのrenewに失敗した</title>
            <link>https://shamaton.dev/posts/414/</link>
            <pubDate>Sun, 07 Jan 2018 13:50:12 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/414/</guid>
            <description>お世話になっております。 しゃまとんです。 以前にLet&amp;rsquo;s Encryptを使ってホームページをHTTPSに対応させた記事をあげてい</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>以前にLet&rsquo;s Encryptを使ってホームページをHTTPSに対応させた記事をあげていました。</p>









<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fshamaton.dev%2fposts%2f426" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>記事の中でも自動で更新されるように設定していたのですが、ある日失敗していることに気づきました。</p>
<p>エラー時のログです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">/root/.local/share/letsencrypt/lib/python2.6/site-packages/cryptography/__init__.py:26: DeprecationWarning: Python 2.6 is no longer supported by the Python core team, please upgrade your Python. A future version of cryptography will drop support for Python 2.6
DeprecationWarning
Saving debug log to /var/log/letsencrypt/letsencrypt.log

-------------------------------------------------------------------------------
Processing /etc/letsencrypt/renewal/shamaton.orz.hm.conf
-------------------------------------------------------------------------------
Renewing an existing certificate
Performing the following challenges:
http-01 challenge for shamaton.orz.hm
Waiting for verification...
Cleaning up challenges
Attempting to renew cert from /etc/letsencrypt/renewal/shamaton.orz.hm.conf produced an unexpected error: Failed authorization procedure. shamaton.orz.hm (http-01): urn:acme:error:connection :: The server could not connect to the client to verify the domain :: Could not connect to shamaton.orz.hm. Skipping.

All renewal attempts failed. The following certs could not be renewed:
/etc/letsencrypt/live/shamaton.orz.hm/fullchain.pem (failure)
1 renew failure(s), 0 parse failure(s)

IMPORTANT NOTES:
- The following errors were reported by the server:

Domain: shamaton.orz.hm
Type: connection
Detail: Could not connect to shamaton.orz.hm

To fix these errors, please make sure that your domain name was
entered correctly and the DNS A record(s) for that domain
contain(s) the right IP address. Additionally, please check that
your computer has a publicly routable IP address and that no
firewalls are preventing the server from communicating with the
client. If you&#39;re using the webroot plugin, you should also verify
that you are serving files from the webroot path you provided.
</code></pre></div><p>どうやらアクセスが出来てないようでした。<br>
エラーに書いてあることを読んでいたらhttp-01（80ポート）で失敗しているみたいでした。<br>
（HTTPSで更新を行う場合はtls-sni-01を使うみたい）</p>
<p>でポートを確認したら80ポートを無効にしていたので、開けて試してみることに。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">iptables -I INPUT 5 -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT
</code></pre></div><p>下記のように更新に成功したログが表示されました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">/root/.local/share/letsencrypt/lib/python2.6/site-packages/cryptography/__init__.py:26: DeprecationWarning: Python 2.6 is no longer supported by the Python core team, please upgrade your Python. A future version of cryptography will drop support for Python 2.6
DeprecationWarning

# Firewall configuration written by system-config-firewall
Saving debug log to /var/log/letsencrypt/letsencrypt.log

-------------------------------------------------------------------------------
Processing /etc/letsencrypt/renewal/shamaton.orz.hm.conf
-------------------------------------------------------------------------------
Renewing an existing certificate
Performing the following challenges:
http-01 challenge for shamaton.orz.hm
Waiting for verification...
Cleaning up challenges

-------------------------------------------------------------------------------
new certificate deployed without reload, fullchain is
/etc/letsencrypt/live/shamaton.orz.hm/fullchain.pem
-------------------------------------------------------------------------------

Congratulations, all renewals succeeded. The following certs have been renewed:
/etc/letsencrypt/live/shamaton.orz.hm/fullchain.pem (success)
</code></pre></div><p>対処としては一時的に80ポート開けるか、443でchallengeするように変えるかですかね。。<br>
とりあえず原因がわかってよかったです。</p>
<p>以上です。</p>
<p>■ 参考</p>
<p>






<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fcommunity.letsencrypt.org%2ft%2flets-encrypt-and-firewall-rules%2f18641%2f2" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>








<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fcommunity.home-assistant.io%2ft%2ferror-in-renewing-letsencrypt%2f13030%2f24" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
]]></content>
        </item>
        
        <item>
            <title>[メモ] 2017年の振り返り</title>
            <link>https://shamaton.dev/posts/513/</link>
            <pubDate>Sat, 30 Dec 2017 16:39:12 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/513/</guid>
            <description>お世話になっております。 しゃまとんです。 これまで、振り返り的な記事は書いてこなかったのですが、１年前なに考えていたがわかるようになるかなと思</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>これまで、振り返り的な記事は書いてこなかったのですが、１年前なに考えていたがわかるようになるかなと思ったので、自分用メモとしてつらつらと書いておきたいと思います。</p>
<p>書いてるとポエム的な感じになって消してしまいそうなんですが。。</p>
<p>自分としては2016年から変わらず継続して頑張るという感じで2017年はスタートしたのですが、今になってみると想定した感じではない気がするもトータルとしてはよかったかなーという印象です。</p>
<p>理由としては、すべてが今年リリースしたアプリ「ことだまっぷ」に集約してしまうのですが</p>







<div id="appreach-box" style="text-align: left;">
    <p>
<img src="https://lh3.googleusercontent.com/AxCAhC3nUgPKVfKQlyZtGL0D0tKaghSsH-tV7NlXc5fSftWBPPBt5SHEIlHIlFexnG92=w170" alt="ことだまっぷ" style="float: left; margin: 10px; width: 25%; max-width: 120px; border-radius: 10%;" />
    </p>

<div class="appreach-info" style="margin: 10px;">
    <div id="appreach-appname">
        ことだまっぷ
    </div>


    <div id="appreach-developer" style="font-size: 80%; display: inline-block; _display: inline;">
        開発元:<a id="appreach-developerurl" href="" target="_blank" rel="nofollow noopener">shamaton</a>
    </div>

    <div id="appreach-price" style="font-size: 80%; display: inline-block; _display: inline;">
        無料
    </div>





    <div class="appreach-links" style="float: left;">
        <div id="appreach-itunes-link" style="display: inline-block; _display: inline;">
            <a id="appreach-itunes" href="https://itunes.apple.com/jp/app/%E3%81%93%E3%81%A8%E3%81%A0%E3%81%BE%E3%81%A3%E3%81%B7/id1312331217?mt=8&amp;uo=4" target="_blank" rel="nofollow noopener"><br /> <img src="https://nabettu.github.io/appreach/img/itune_ja.svg" style="height: 40px; width: 135px;" /><br /> </a>
        </div>

        <div id="appreach-gplay-link" style="display: inline-block; _display: inline;">
            <a id="appreach-gplay" href="https://play.google.com/store/apps/details?id=com.shamaton.kotoda.map" target="_blank" rel="nofollow noopener"><br /> <img src="https://nabettu.github.io/appreach/img/gplay_ja.png" style="height: 40px; width: 134.5px;" /><br /> </a>
        </div>
    </div>
</div>

<div class="appreach-footer" style="margin-bottom: 10px; clear: left;">
</div>
</div>
<p>2016年にGoMapというアセットがたしか登場したわけなんですが、
その前から位置情報を使った何かサービスかアプリケーションを作れないかなーと思っており、
GoMapを使って形にできそうだなーということで開発を始め、なんとか年内にリリースすることができました。</p>
<p>今のところ全然ダウンロードされていないのですが、
自分としては作りたいと思っていたものが作れたという喜びが大きいので今のところ気にしていません。<br>
個人開発で位置情報をつかっているものもそんなに無いでしょうし。</p>
<p>開発は帰宅してから行い少しずつ進めていたのですが、
なかなか進みが良くなかったので他に割いていた時間を開発に当てることで速度を高めました。</p>
<p>今までの開発（大したものではないですが）では個人のサービスでサーバー作るのはお金かかるししんどいよな〜
と思っていたので避けていたのですが、ことだまっぷを作るに当たってはサーバーが必須であることは明白であったので、
サーバーの開発も行いました。サーバーサイドの言語はGoを使っています。<br>
なので、UnityとGoを開発を並行で行っていました。</p>
<p>位置情報な開発に関する情報って少ない感じだったのですが、
色々しらべて使うミドルウェアも決定してやってみて何となく仕上げることができてよかったです。<br>
一応、高トラフィックな状況とかを想定して組んではいます。</p>
<p>サーバーにはGCPを使っていて初めて使いました。
今のところ大きなエラーもなく動作しているので、もう少し評判があがるといいな〜と思っています。<br>
その中で色々学ぶこともあったので、今後記事にしていく予定です。</p>
<p>ことだまっぷは自分としてはまだまだだと思っているし、
サーバーサイドのノウハウもためていきたいので引き続きアップデートを続けていいければと思っています。</p>
<p>ちなみにことだまっぷの開発前に作っていたものですが、
開発をやめたつもりはなくそちらで叶えたいこともあるのでどこかのタイミングでまた制作復帰するつもりではいます。</p>
<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">[WIP] call dragon and fly to the sky.<br>呼び出して、空に飛び立つまでの流れ的なやつ。<a href="https://twitter.com/hashtag/indiedev?src=hash&amp;ref_src=twsrc%5Etfw">#indiedev</a> <a href="https://twitter.com/hashtag/gamedev?src=hash&amp;ref_src=twsrc%5Etfw">#gamedev</a> <a href="https://t.co/I4f9dnLXlI">pic.twitter.com/I4f9dnLXlI</a></p>&mdash; しゃまとん (@shamaton) <a href="https://twitter.com/shamaton/status/814835823057072128?ref_src=twsrc%5Etfw">December 30, 2016</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>個人開発でちゃんとしたゲームを作っている方々は本当に素晴らしい。</p>
<p>ということで2017年も何か成功したわけではありませんが、
2018年の引き続き折れずに頑張っていけたらなと思います。なんとなくやるべき方向性も決まっているので、
しっかり進めていきたいなという所存です。</p>
<p>フォローしてくださっている方、記事を読んでくださっている方、いつもありがとうございます。それでは良いお年を。<br>
以上です。</p>
]]></content>
        </item>
        
        <item>
            <title>[GCP] Compute Engine(CentOS7)でdocker/gitを使えるようにする</title>
            <link>https://shamaton.dev/posts/432/</link>
            <pubDate>Thu, 21 Dec 2017 15:33:45 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/432/</guid>
            <description>お世話になっております。 しゃまとんです。 GCPが無料で試せるということで、Compute Engineを使ってみることにしました。 個人的にdo</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>GCPが無料で試せるということで、Compute Engineを使ってみることにしました。<br>
個人的にdockerとgitが使えればいいかなということでやっていたのですが、
普段割りと使っているCentOS6でdockerがイケてない感じだったので、CentOS7を使うことに。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fcloud.google.com%2fcompute%3fhl%3dja" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>忘れないようにセットアップのメモです。<br>
基本的にrootで作業しています。<code>sudo</code>で実行する場合はつけて実行してください</p>
<p>まずはタイムゾーンを日本にしておきます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">timedatectl set-timezone Asia/Tokyo
</code></pre></div><p>gitをインストールします。デフォルトの状態でgitを入れると1.x系が入ってしまうので、
repoを追加して、stableの最新バージョンを入れるようにします。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e"># iusレポジトリを取得して展開</span>
wget https://dl.iuscommunity.org/pub/ius/stable/CentOS/7/x86_64/ius-release-1.0-15.ius.centos7.noarch.rpm
rpm -Uvh ius-release-1.0-15.ius.centos7.noarch.rpm

<span style="color:#75715e"># gitをインストール</span>
yum install git2u --enablerepo<span style="color:#f92672">=</span>ius

<span style="color:#75715e"># 確認</span>
git version
</code></pre></div><p>dockerをインストールしていきます。こちらもrepoを追加してcommunity editionの最新版をいれるようにします。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e"># yum-config-managerを使えるようにする</span>
yum install yum-utils

<span style="color:#75715e"># repo追加</span>
yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

<span style="color:#75715e"># 有効にする</span>
sudo yum-config-manager --disable docker-ce-edge
</code></pre></div><p>リストを一応確認しておきます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">yum list docker-ce.x86_64 --showduplicates

<span style="color:#75715e"># 実行結果</span>
Available Packages
docker-ce.x86_64 17.03.0.ce-1.el7.centos docker-ce-stable
docker-ce.x86_64 17.03.1.ce-1.el7.centos docker-ce-stable
docker-ce.x86_64 17.03.2.ce-1.el7.centos docker-ce-stable
docker-ce.x86_64 17.06.0.ce-1.el7.centos docker-ce-stable
</code></pre></div><p>インストールして、root以外の指定ユーザーで実行できるようにしておきます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e"># インストール</span>
yum install docker-ce

<span style="color:#75715e"># 起動と確認</span>
systemctl status docker
systemctl start docker
systemctl status docker

<span style="color:#75715e"># 確認</span>
docker version

<span style="color:#75715e"># 起動時に有効にする</span>
systemctl enable docker.service

<span style="color:#75715e"># 一般ユーザーでdockerを使えるようにする（/etc/groupを確認しておくよい）</span>
gpasswd -a <span style="color:#f92672">{</span>ユーザー名<span style="color:#f92672">}</span> docker
</code></pre></div><p><code>gpasswd</code>を実行した後、一旦ログインし直さないとdockerコマンド実行時にエラーがでることがあります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http:///var/run/docker.sock/v1.30/version: dial unix /var/run/docker.sock: connect: permission denied
</code></pre></div><p>最後にdocker-composeを使えるようにします。<br>
最新のバージョンはリンク先で確認してください。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fdocker%2fcompose%2freleases" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e"># インストール</span>
curl -L https://github.com/docker/compose/releases/download/1.15.0/docker-compose-<span style="color:#e6db74">`</span>uname -s<span style="color:#e6db74">`</span>-<span style="color:#e6db74">`</span>uname -m<span style="color:#e6db74">`</span> &gt; /usr/local/bin/docker-compose

<span style="color:#75715e"># 実行権限を追加</span>
chmod +x /usr/local/bin/docker-compose

<span style="color:#75715e"># 確認</span>
docker-compose version
</code></pre></div><p>dockerは<code>docker run hello-world</code>して動作確認してもよいかもですね。<br>
以上です。</p>
<p>■ 参考







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fqiita.com%2fmaimai-swap%2fitems%2f00590b96888330aa54f1" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>








<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fqiita.com%2fshinespark%2fitems%2f367959950d9e1fd454ee" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>








<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fqiita.com%2ftubone%2fitems%2f9c1b3d807197b7162fd9" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>








<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fwww.cyamax.com%2fentry%2f2017%2f05%2f02%2f060000" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
]]></content>
        </item>
        
        <item>
            <title>[Server] awstatsをHTTPSに対応させる</title>
            <link>https://shamaton.dev/posts/430/</link>
            <pubDate>Fri, 15 Dec 2017 14:20:23 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/430/</guid>
            <description>お世話になっております。 しゃまとんです。 少し前にサイトをhttps化したのですが、その影響でアクセスログ解析がうまく動かなくなっていました。</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>少し前にサイトをhttps化したのですが、その影響でアクセスログ解析がうまく動かなくなっていました。</p>
<p>awstatsを使っているのですが、こちらも合わせて対応する必要があるようです。<br>
使っている方は参考になると幸いです。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fawstats.sourceforge.io%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>原因としてはhttps化した事によりアクセスログの出力先が変わったことです。<br>
よって、その辺りの設定を変更することで修正できます。</p>
<p>まずは<code>/etc/httpd/conf.d/ssl.conf</code>を下記のように変更します。<br>
もともとログ出力していたところに戻す感じですね。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">ErrorLog logs/ssl_error_log
↓　こちらに変更する
ErrorLog logs/error_log

これを追加する
LogFormat &#34;%h %l %u %t \&#34;%!414r\&#34; %&gt;s %b \&#34;%{Referer}i\&#34; \&#34;%{User-Agent}i\&#34;&#34;

TransferLog logs/ssl_access_log
↓　こちらに変更する
TransferLog logs/access_log
</code></pre></div><p>次にawstatsの設定ファイル(awstats.conf)を下記のようにしておきます。<br>
多分ssl.confと同じ<code>/etc/httpd/conf.d</code>にあるかなと。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">UseHTTPSLinkForUrl=&#34;&#34;
↓ 変更する　
UseHTTPSLinkForUrl=&#34;/&#34;
</code></pre></div><p>関係ないかもですが、httpdをrestartまたはreloadしておきます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">service httpd restart
<span style="color:#75715e"># もしくは</span>
service httpd reload
</code></pre></div><p>自分のところでは変更直後に治っているかわからなかったので、
集計が走るまで（一日とか）待ってみて確認するのがいいかもしれません。</p>
<p>以上です。</p>
<p>■ 参考







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2ffedorasrv.com%2fbbshtml%2fwebpatio%2f3373.shtml" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
]]></content>
        </item>
        
        <item>
            <title>[Unity] iOS申請時のMissing Push Notificationを対処する</title>
            <link>https://shamaton.dev/posts/485/</link>
            <pubDate>Thu, 07 Dec 2017 15:21:29 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/485/</guid>
            <description>お世話になっております。 しゃまとんです。 UnityでiOS向けにPush通知を利用していない状態でbuildして何も気にせずアプリ申請 （ここ</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>UnityでiOS向けにPush通知を利用していない状態でbuildして何も気にせずアプリ申請
（ここではXcode等からArchiveしてUploadすること）を行うとAppleからアップロードしたファイルに関しての通知が来ます。</p>
<p>問題なければ、完了した旨のメールが来るのみですが、下記のような内容です。<br>
ちなみに確認したバージョンは<code>5.6.0f3</code>なので、他のバージョンでは対応が異なる可能性があります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Dear developer,

We have discovered one or more issues with your recent delivery for &#34;アプリ名&#34;. Your delivery was successful, but you may wish to correct the following issues in your next delivery:

Missing Push Notification Entitlement - Your app appears to register with the Apple Push Notification service, but the app signature&#39;s entitlements do not include the &#34;aps-environment&#34; entitlement. If your app uses the Apple Push Notification service, make sure your App ID is enabled for Push Notification in the Provisioning Portal, and resubmit after signing your app with a Distribution provisioning profile that includes the &#34;aps-environment&#34; entitlement. Xcode 8 does not automatically copy the aps-environment entitlement from provisioning profiles at build time. This behavior is intentional. To use this entitlement, either enable Push Notifications in the project editor&#39;s Capabilities pane, or manually add the entitlement to your entitlements file. For more information, see https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/HandlingRemoteNotifications.html#//apple_ref/doc/uid/TP40008194-CH6-SW1.

After you’ve corrected the issues, you can use Xcode or Application Loader to upload a new binary to iTunes Connect.

Regards,

The App Store team
</code></pre></div><p>どうやらプッシュ通知に関しての設定が有効になっているけど使うための証明書が見つからないそうで、
直してくださいという内容みたいです。</p>
<p>Unity側のBuild設定でPush通知を無効にする対応できればいいのですが、
なさそうなので使わない場合は該当の箇所に対して別途修正をする必要がありました。</p>
<p>UnityでiOS向けのBuildを行い、完了したらXcodeを実行し、
該当の箇所（Classes/UnityAppContoller.mm）をコメントアウトします。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-objectivec" data-lang="objectivec"><span style="color:#75715e">#if UNITY_USES_REMOTE_NOTIFICATIONS
</span><span style="color:#75715e"></span><span style="color:#75715e">/*
</span><span style="color:#75715e">- (void)application:(UIApplication*)application didReceiveRemoteNotification:(NSDictionary*)userInfo
</span><span style="color:#75715e">{
</span><span style="color:#75715e">    AppController_SendNotificationWithArg(kUnityDidReceiveRemoteNotification, userInfo);
</span><span style="color:#75715e">    UnitySendRemoteNotification(userInfo);
</span><span style="color:#75715e">}
</span><span style="color:#75715e">
</span><span style="color:#75715e">- (void)application:(UIApplication*)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData*)deviceToken
</span><span style="color:#75715e">{
</span><span style="color:#75715e">    AppController_SendNotificationWithArg(kUnityDidRegisterForRemoteNotificationsWithDeviceToken, deviceToken);
</span><span style="color:#75715e">    UnitySendDeviceToken(deviceToken);
</span><span style="color:#75715e">}
</span><span style="color:#75715e">*/</span>
<span style="color:#75715e">#if !UNITY_TVOS
</span><span style="color:#75715e"></span><span style="color:#75715e">/*
</span><span style="color:#75715e">- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult result))handler
</span><span style="color:#75715e">{
</span><span style="color:#75715e">    AppController_SendNotificationWithArg(kUnityDidReceiveRemoteNotification, userInfo);
</span><span style="color:#75715e">    UnitySendRemoteNotification(userInfo);
</span><span style="color:#75715e">    if (handler)
</span><span style="color:#75715e">    {
</span><span style="color:#75715e">        handler(UIBackgroundFetchResultNoData);
</span><span style="color:#75715e">    }
</span><span style="color:#75715e">}
</span><span style="color:#75715e">*/</span>
<span style="color:#75715e">#endif
</span><span style="color:#75715e"></span><span style="color:#75715e">/*
</span><span style="color:#75715e">- (void)application:(UIApplication*)application didFailToRegisterForRemoteNotificationsWithError:(NSError*)error
</span><span style="color:#75715e">{
</span><span style="color:#75715e">    AppController_SendNotificationWithArg(kUnityDidFailToRegisterForRemoteNotificationsWithError, error);
</span><span style="color:#75715e">    UnitySendRemoteNotificationError(error);
</span><span style="color:#75715e">}
</span><span style="color:#75715e">*/</span>
<span style="color:#75715e">#endif
</span></code></pre></div><p>これでArchiveしてアップロードすると先程の通知なくバイナリの配置をすることができました。<br>
以上です。</p>
<p>■ 参考







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fblog.77jp.net%2fmissing-push-notification-entitlement-ios" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
]]></content>
        </item>
        
        <item>
            <title>[Mac] Karabiner-Elementsをとりあえず設定する</title>
            <link>https://shamaton.dev/posts/446/</link>
            <pubDate>Sat, 02 Dec 2017 14:31:19 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/446/</guid>
            <description>お世話になっております。 しゃまとんです。 以前にWindowsのキーボードをMacで使えるようにするための記事を書いたのですが、 MacをSie</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>以前にWindowsのキーボードをMacで使えるようにするための記事を書いたのですが、
MacをSierraにしたところ使えなくなってしまいました。</p>









<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fshamaton.dev%2fposts%2f61" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>ただSierraでもKarabinarを開発していた方がKarabiner-Elementsというものを新たに作ってくださっているようで、そちらを使うことでMacでWindowsキーボードが引き続き使えるようになりました。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fpqrs.org%2fosx%2fkarabiner%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>以前と同じような感じで下図のように設定してみました。</p>
<figure>
    <img src="/images/posts/2017/11/karabinar-elements.png"/> 
</figure>

<p>ただ全角/半角の設定がちょっとわからなかったので、設定出来ていません。<br>
普段からほとんど使うことがないので一旦よしとしました。</p>
<p><strong>2018/2/9追記</strong></p>
<p>こちらの全角/半角の設定ができるようです。ご連絡くださった方ありがとうございます！</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fqiita.com%2flynrin%2fitems%2fc2362f8f9a561f451f21" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>やっぱり使い慣れているキーボード使いたいですよね。<br>
簡単ですが以上です。</p>
]]></content>
        </item>
        
        <item>
            <title>[Unity] テキストボックスで何行表示されているかを知る</title>
            <link>https://shamaton.dev/posts/380/</link>
            <pubDate>Tue, 14 Nov 2017 14:55:17 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/380/</guid>
            <description>お世話になっております。 しゃまとんです。 決められた範囲でテキストを入力させたいなーと思って、色々と試行錯誤してました。 InputFieldで</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>決められた範囲でテキストを入力させたいなーと思って、色々と試行錯誤してました。
InputFieldでOnChangedValueを監視して、入力内容をReplaceしたり、指定文字列をCountしたり&hellip;とやっていたのですが、
なかなかうまくいかず悩んでました。</p>
<p>要は画面に表示されているテキストボックスの範囲内だけに入力をさせたいみたいない感じです。
何行まで表示が可能かわかっていて、現在何行表示されてるかわかればいいなぁ&hellip;というので調べてみると
textコンポーネント内にプロパティがありました。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fdocs.unity3d.com%2fja%2fcurrent%2fScriptReference%2fTextGenerator.html" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p><strong>textGenerator</strong>とはレンダリング用のテキストを生成するために使用されるクラスで
その中のlineCountというプロパティにアクセスすると表示上何行になっているか把握できます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp">inputField.textComponent.cachedTextGenerator.lineCount
</code></pre></div><p>試しに入力しながら表示させてみると&hellip;</p>
<figure>
    <img src="/images/posts/2017/03/line_count.gif"/> 
</figure>

<p>こんな感じで折り返し、改行に対応して表示上の行数が把握できます。<br>
そんなに用途無いかもですが、参考になれば幸いです。確認用のコードは簡単ですが、一応載せておきます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">using</span> UnityEngine;
<span style="color:#66d9ef">using</span> UnityEngine.UI;
<span style="color:#66d9ef">using</span> System.Collections;

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">TestScript</span> : MonoBehaviour {

  <span style="color:#66d9ef">public</span> InputField inputField;
  <span style="color:#66d9ef">public</span> Text text;

  <span style="color:#75715e">// Use this for initialization
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">void</span> Start () {

  }

  <span style="color:#75715e">// Update is called once per frame
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">void</span> Update () {
    text.text = inputField.textComponent.cachedTextGenerator.lineCount.ToString() + <span style="color:#e6db74">&#34;行です &#34;</span>;
  }
}
</code></pre></div><p>以上です。</p>
<p>■ 参考







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fanswers.unity3d.com%2fquestions%2f784199%2fhow-to-get-the-current-best-fit-size-of-a-text-com.html" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
]]></content>
        </item>
        
        <item>
            <title>[Electron]Electronの開発環境を作ってビルドしてみる</title>
            <link>https://shamaton.dev/posts/452/</link>
            <pubDate>Tue, 03 Oct 2017 15:04:56 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/452/</guid>
            <description>お世話になっております。 しゃまとんです。 Electronご存知でしょうか。 ElectronとはWebの技術でデスクトップアプリケーションを作</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>Electronご存知でしょうか。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2felectron.atom.io%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>ElectronとはWebの技術でデスクトップアプリケーションを作ることができるものだそうです。<br>
なにやら新しそう感ですね。<br>
いいところは、クロスプラットフォームなところでOSを気にせずアプリケーションが作れるという優れもの。
Slackもコレを使って作られているらしいです。<br>
ということで、とりあえずMacで環境つくってビルドするところまでやってみました。</p>
<p>どうやら開発にはnode.jsが必要なようでして、その辺をやっていきます。<br>
まずはnodebrewを入れてnodeを使えるようにします。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ brew install nodebrew

<span style="color:#75715e"># ...インストールメッセージが流れる...</span>

<span style="color:#f92672">==</span>&gt; Summary
 /usr/local/Cellar/nodebrew/0.9.7: <span style="color:#ae81ff">8</span> files, 38.2KB, built in <span style="color:#ae81ff">4</span> seconds
</code></pre></div><p>一応バージョンを確認しておいて使える一覧を表示してみます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ nodebrew -v
nodebrew 0.9.7

<span style="color:#75715e"># 使えるバージョン一覧</span>
$ nodebrew ls-remote

v8.0.0 v8.1.0 v8.1.1 v8.1.2 v8.1.3 v8.1.4 v8.2.0 v8.2.1
v8.3.0 v8.4.0 v8.5.0 v8.6.0
</code></pre></div><p>今回は特にバージョン指定をせず、最新のものを使います。<br>
インストール前にディレクトリを準備し、実行します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e"># インストール事前準備</span>
$ mkdir -p ~/.nodebrew/src

<span style="color:#75715e"># 最新をインストール</span>
$ nodebrew install-binary latest
Fetching: https://nodejs.org/dist/v8.6.0/node-v8.6.0-darwin-x64.tar.gz
<span style="color:#75715e">######################################################################## 100.0%</span>
Installed successfully
</code></pre></div><p>次に最新版を使うように設定します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e"># ローカル環境確認</span>
$ nodebrew list
v8.6.0

current: none

<span style="color:#75715e"># 利用設定</span>
$ nodebrew use latest
use v8.6.0

<span style="color:#75715e"># 再確認</span>
$ nodebrew list
v8.6.0

current: v8.6.0
</code></pre></div><p>最後にパスを通して、簡単に確認します（ターミナルを再起動等する）<br>
パスはbashrc等に追記します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">export PATH<span style="color:#f92672">=</span>$PATH:/Users/<span style="color:#e6db74">${</span>username<span style="color:#e6db74">}</span>/.nodebrew/current/bin
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ node -v
v8.6.0

$ npm -v
5.3.0
</code></pre></div><p>これでnodeを使う準備が整いました。<br>
さらにElectron関係を進めます。まずは必要なパッケージを入れます。<br>
2つだけでいいみたいです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ npm install -g electron
$ npm install -g electron-packager
</code></pre></div><p>多分、開発出来る状態になったので、<a href="https://github.com/sindresorhus/awesome-electron">awesome-electron</a>から適当に選んで試してみます。<br>
今回は<strong>upterm</strong>にしました。<br>
githubの説明の通りにすすめて、<code>npm start</code>してみます。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2frailsware%2fupterm.git" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e"># cloneして移動</span>
$ git clone https://github.com/railsware/upterm.git
$ cd upterm

<span style="color:#75715e"># 起動</span>
$ npm start
npm WARN deprecated strtok2@1.0.4: depricated, use strtok3 &amp; music-metadata instead
npm WARN deprecated minimatch@2.0.10: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue
npm WARN deprecated safe-to-string-x@2.0.3: Moved to https://github.com/Xotic750/to-string-symbols-supported-x
...
npm notice created a lockfile as package-lock.json. You should commit this file.
added <span style="color:#ae81ff">1100</span> packages in 61.615s
</code></pre></div><p>コンソールにメッセージが流れたあと、アプリケーションが立ち上がります。</p>
<figure>
    <img src="/images/posts/2017/09/electron_upterm.png"/> 
</figure>

<p>次にappを作成してみます。少し時間がかかります。<br>
環境によってはもしかすると署名等で失敗するかもしれません。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ npm run pack
...ビルドメッセージ...
Building macOS zip
Building DMG
</code></pre></div><p>Building DMGでdmgが作成されています。distフォルダ出来ているので確認してみます。</p>
<figure>
    <img src="/images/posts/2017/09/electron_dist.png"/> 
</figure>

<p>実行すると、appをインストールすることができます。</p>
<figure>
    <img src="/images/posts/2017/09/electron_upterm_dmg.png"/> 
</figure>

<p>簡単ですが、環境準備してビルドするところまでをやってみました。<br>
JS詳しい人は色々すぐに作れそうで羨ましい！<br>
以上です。</p>
<p>■ 参考







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fqiita.com%2fhal_99%2fitems%2f6e464f3d45d531ff9336" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
]]></content>
        </item>
        
        <item>
            <title>[Unity] あるクラスに指定のInterfaceがあるか確認する</title>
            <link>https://shamaton.dev/posts/396/</link>
            <pubDate>Fri, 15 Sep 2017 15:29:18 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/396/</guid>
            <description>お世話になっております。 しゃまとんです。 c#でジェネリックを使う場合、whereを利用して指定の条件のものしか使用できないようにしますよね。</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>c#でジェネリックを使う場合、whereを利用して指定の条件のものしか使用できないようにしますよね。下記みたいな。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Child</span>&lt;T&gt; : Parent <span style="color:#66d9ef">where</span> T : SomeInterface {...}
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Hoge</span> : Child&lt;Fuga&gt; {...}
</code></pre></div><p>それで、似たような感じでSystem.Typeな変数に対して、指定の型を含んでいるか確認できないかなーと思い、ちょっと調べることになったのでメモしておきます。<br>
（今回は指定のInterfaceがあるか確認したかった）</p>
<p>結果的には含まれていてほしいクラスやインターフェース越しに<code>IsAssignableFrom</code>というメソッドを使うと判断できるみたいです。<br>
使い方はこんな感じで。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp">/ HogeがSomeInterfaceを持っていたらtrue

<span style="color:#75715e">// 方法：1
</span><span style="color:#75715e"></span><span style="color:#66d9ef">typeof</span>(SomeInterface).IsAssignableFrom(<span style="color:#66d9ef">typeof</span>(Hoge))

<span style="color:#75715e">// 方法：2
</span><span style="color:#75715e"></span><span style="color:#66d9ef">typeof</span>(Hoge).GetInterfaces().Contains(<span style="color:#66d9ef">typeof</span>(SomeInterface))
</code></pre></div><p>上記の場合だとHogeクラスのTypeから何か取得するかなーと思っていのですが、逆みたいでした。
Hogeクラスからも判定できるけど、<code>IsAssignable</code>のほうがベターっぽいですね。</p>
<p>このやり方を使うと、実行時のエラーになるのでビルドだけ通ったからOKではないので注意が必要ですね。
ジェネリックはビルド時にエラーになるけど。<br>
（常に実行して確認しろ！というのは至極当然ですが&hellip;）</p>
<p>今日も勉強になりました。<br>
以上です。</p>
<p>■参考







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fqiita.com%2fchocolamint%2fitems%2f8b1be93359a7a26fe7c3" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>








<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fstackoverflow.com%2fquestions%2f4963160%2fhow-to-determine-if-a-type-implements-an-interface-with-c-sharp-reflection" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
]]></content>
        </item>
        
        <item>
            <title>[Unity] TextMeshProを使ってマイ絵文字をテキストに入れる</title>
            <link>https://shamaton.dev/posts/436/</link>
            <pubDate>Mon, 21 Aug 2017 14:21:10 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/436/</guid>
            <description>お世話になっております。 しゃまとんです。 少し前にTextMeshProが無料化されたということで知っておいたほうがいいアセットの1つみたいで</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>少し前にTextMeshProが無料化されたということで知っておいたほうがいいアセットの1つみたいです。<br>
どうやらUnity標準であるuGUIのTextよりもテキスト表現がリッチにできるみたいです。</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/MX_pM8QKTAc" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p>Unity道場でも指南しているようなので、使い方を覚えておきたいものです。</p>
<iframe src="//www.slideshare.net/slideshow/embed_code/key/yIQTqlvyJ0Any8"
        width="566" height="385" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"
        style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen>
</iframe>
<p>そして、個人的に気になったのが、テキスト内に絵文字を入れられるところ。<br>
なんだか今時（？）の表現ができそうですね。<br>
TextMeshProの場合はマイ絵文字的な感じで、自分でテキスト内に表示した絵文字アセットを作成してやるのだそう。<br>
なので、スマホとかで入力できる絵文字がそのまま使えます！みたいなのではないですね。<br>
（Forumにそれっぽい話をしているけども）</p>
<p>とりあえず「TextMeshPro 絵文字」あたりでググったのですがあまり検索結果が出なかった。。。<br>
ので、マイ絵文字をテキストに表示できるところまでをやってみました。</p>
<p>まずは、<a href="https://www.assetstore.unity3d.com/jp/#!/content/84126">TextMeshPro</a>をゲットして展開します。</p>
<figure>
    <img src="/images/posts/2017/08/textmeshpro_1.png"/> 
</figure>

<p>そして、マイ絵文字にしたい画像を用意しておきます。<br>
サンプルにもあるように、使いたいものは1つのアトラスにしておくとよいみたいです。<br>
今回は<a href="http://icooon-mono.com/">ICOOON MONO</a>さんの画像をお借りしました。</p>
<figure>
    <img src="/images/posts/2017/08/textmeshpro_2.png"/> 
</figure>

<p>現状だと公式にアトラスを作成してくれる機能はありません（多分）<br>
アトラスの作成方法はこちらで公開してくださっているものがあります。<br>
<a href="http://caitsithware.com/wordpress/posts/263">【Unity】スプライトを1枚にまとめる簡易SpritePacker</a></p>
<p>他の外部ツールで作成してもいいかもしれません。</p>
<p>アトラスが用意できたら、マテリアルを作成します。<br>
[右クリックメニュー] → [Create] → [TextMeshPro] → [Sprite Asset]</p>
<figure>
    <img src="/images/posts/2017/08/textmeshpro_3.gif"/> 
</figure>

<p>上記を実行すると、同じフォルダにマテリアルが作られます。<br>
中を確認すると、画像ごとに情報を作成されていますね。<br>
設定値は色々ありますが、表示位置だったりスケールを調整できたりします。</p>
<figure>
    <img src="/images/posts/2017/08/textmeshpro_4.png"/> 
</figure>

<p>作成されたマテリアルはResources/Sprite Assets配下に置く必要があるみたいなので、そちらへ移動させておきます。<br>
これで準備は調ったはずなので、テキストにマイ絵文字を表示させてみます。</p>
<p>適当にシーンを作成し、uGUIのTextと同じようにTextMeshProのTextを追加します。</p>
<figure>
    <img src="/images/posts/2017/08/textmeshpro_5.gif"/> 
</figure>

<p>あとはタグルールにそって記載します。するとテキスト表記内に絵文字が表示されます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">money&lt;sprite=&#34;Emoji&#34; index=0&gt;money&lt;sprite=&#34;Emoji&#34; index=1&gt;money
</code></pre></div><figure>
    <img src="/images/posts/2017/08/textmeshpro_6.gif"/> 
</figure>

<p>これで今時なメッセージボックスが作成できそうですね！<br>
以上です。</p>
]]></content>
        </item>
        
        <item>
            <title>[Server] letsencryptを使ってhttps化しました</title>
            <link>https://shamaton.dev/posts/426/</link>
            <pubDate>Fri, 04 Aug 2017 16:11:25 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/426/</guid>
            <description>お世話になっております。 しゃまとんです。 少し前から気になっていたホームページのHTTPS化ですが、なんとなくやる気持ちになったので対応してみ</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>少し前から気になっていたホームページのHTTPS化ですが、なんとなくやる気持ちになったので対応してみました。</p>
<p>HTTPSにするにあたって証明書が必要になるのですが、
以前はオレオレ証明書だったりどこかの発行所で購入する必要があったのですが、letsencryptというサービスが開始されたことで誰でも無料でHTTPS化を正式に行えるようになりました。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fletsencrypt.org%2fja%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>ちなみに2018年からワイルドカードにも対応するそうです！！</p>
<p>ということでletsencryptを使って、HTTPS化した手順をまとめておきます。<br>
今回はCentOS6でapacheを利用しているWebサイトに対しての例になります。</p>
<p>まず、letsencryptを利用するにはpython2.7が必要なので、インストールします。<br>
rootにて作業しています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ wget http://www.python.org/ftp/python/2.7.11/Python-2.7.11.tgz
$ tar xvzf Python-2.7.11.tgz
$ cd Python-2.7.11
$ ./configure --with-threads --enable-shared --prefix<span style="color:#f92672">=</span>/usr/local
$ make
$ sudo make install

<span style="color:#75715e"># 確認</span>
$ python --version
Python 2.7.11
</code></pre></div><p>すんなりいけばバージョンが更新されますが、自分の場合はエラーが表示されてしまったので、
下記のサイトを参考に対処しました。ちなみにエラーはこれ。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">error while loading shared libraries: libpython2.7.so.1.0: cannot open shared object file: No such file or directory

</code></pre></div><p>次にletsencryptを設定していきます。今回は証明書の発行だけを行います。<br>
実行すると色々聞かれるの答えます。その後、確認が行われ成功すると証明書が作成されます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e"># rootで実行</span>
git clone https://github.com/letsencrypt/letsencrypt
cd letsencrypt
./letsencrypt-auto --help
./letsencrypt-auto certonly --webroot -w /var/www/ -d shamaton.orz.hm
Saving debug log to /var/log/letsencrypt/letsencrypt.log
Enter email address <span style="color:#f92672">(</span>used <span style="color:#66d9ef">for</span> urgent renewal and security notices<span style="color:#f92672">)</span> <span style="color:#f92672">(</span>Enter <span style="color:#e6db74">&#39;c&#39;</span> to
cancel<span style="color:#f92672">)</span>: example@email.com
<span style="color:#75715e"># メールアドレスを入力</span>

-------------------------------------------------------------------------------
Please read the Terms of Service at
https://letsencrypt.org/documents/LE-SA-v1.1.1-August-1-2016.pdf. You must agree
in order to register with the ACME server at
https://acme-v01.api.letsencrypt.org/directory
-------------------------------------------------------------------------------
<span style="color:#f92672">(</span>A<span style="color:#f92672">)</span>gree/<span style="color:#f92672">(</span>C<span style="color:#f92672">)</span>ancel: A
<span style="color:#75715e"># Aを入力</span>

-------------------------------------------------------------------------------
Would you be willing to share your email address with the Electronic Frontier
Foundation, a founding partner of the Let<span style="color:#e6db74">&#39;s Encrypt project and the non-profit
</span><span style="color:#e6db74">organization that develops Certbot? We&#39;</span>d like to send you email about EFF and
our work to encrypt the web, protect its users and defend digital rights.
-------------------------------------------------------------------------------
<span style="color:#f92672">(</span>Y<span style="color:#f92672">)</span>es/<span style="color:#f92672">(</span>N<span style="color:#f92672">)</span>o: N
<span style="color:#75715e"># Nを入力</span>
Obtaining a new certificate
Performing the following challenges:
http-01 challenge <span style="color:#66d9ef">for</span> shamaton.orz.hm
Using the webroot path /var/www <span style="color:#66d9ef">for</span> all unmatched domains.
Waiting <span style="color:#66d9ef">for</span> verification...
Cleaning up challenges

IMPORTANT NOTES:
 - Congratulations! Your certificate and chain have been saved at
   /etc/letsencrypt/live/shamaton.orz.hm/fullchain.pem. Your cert will
   expire on 2017-10-08. To obtain a new or tweaked version of this
   certificate in the future, simply run letsencrypt-auto again. To
   non-interactively renew *all* of your certificates, run
   <span style="color:#e6db74">&#34;letsencrypt-auto renew&#34;</span>
 - Your account credentials have been saved in your Certbot
   configuration directory at /etc/letsencrypt. You should make a
   secure backup of this folder now. This configuration directory will
   also contain certificates and private keys obtained by Certbot so
   making regular backups of this folder is ideal.
 - If you like Certbot, please consider supporting our work by:

   Donating to ISRG / Let<span style="color:#960050;background-color:#1e0010">&#39;</span>s Encrypt:   https://letsencrypt.org/donate
   Donating to EFF:                    https://eff.org/donate-le

<span style="color:#75715e"># ls /etc/letsencrypt/live/shamaton.orz.hm/</span>
README  cert.pem  chain.pem  fullchain.pem  privkey.pem
</code></pre></div><p>無事、証明書が発行されました！<br>
続いて、apacheの設定を行います。<code>/etc/httpd/conf.d/ssl.conf</code>を開き、各項目を設定しておきます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">SSLCertificateFile /etc/letsencrypt/live/shamaton.orz.hm/cert.pem
SSLCertificateKeyFile /etc/letsencrypt/live/shamaton.orz.hm/privkey.pem
SSLCertificateChainFile /etc/letsencrypt/live/shamaton.orz.hm/chain.pem
</code></pre></div><p>iptablesが有効になっている場合、HTTPSをポートを解放しましょう。<br>
追加コマンドか、ファイルを直接編集します。（/etc/sysconfig/iptables）<br>
内容は使っているサーバによって読み替えてください。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 443 -j ACCEPT
</code></pre></div><p>apacheとiptablesを再起動しておきます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ sudo apachectl configtest
$ sudo apachectl restart
$ sudo service iptables restart
$ sudo service iptables status
</code></pre></div><p>ここでHTTPSでアクセスできるか確認しておきます。<br>
一通りアクセスしてみて問題なさそうだったら、httpをhttpsにリダイレクトするようにしておきます。<br>
/etc/httpd/conf.dに新しくconfファイルを追加します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ sudo vi /etc/httpd/conf.d/rewrite.conf

&lt;ifModule mod_rewrite.c&gt;
RewriteEngine On
RewriteCond %<span style="color:#f92672">{</span>HTTPS<span style="color:#f92672">}</span> off
RewriteRule ^<span style="color:#f92672">(</span>.*<span style="color:#f92672">)</span>$ https://%<span style="color:#f92672">{</span>HTTP_HOST<span style="color:#f92672">}</span>%<span style="color:#f92672">{</span>REQUEST_URI<span style="color:#f92672">}</span> <span style="color:#f92672">[</span>R,L<span style="color:#f92672">]</span>
&lt;/ifModule&gt;

$ sudo apachectl restart
</code></pre></div><p>わざとhttpでアクセスしてhttpsにリダイレクトすることを確認します。<br>
以上でhttps化は完了です。</p>
<p>最後にcronで証明書を定期更新するようにしておきます。
letsencryptの証明書は3ヶ月ほどで切れてしまうようなので、cron等で設定しておくとよいです。<br>
更新されたかわかるようにメールアドレスを添えておきました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e"># rootで実行</span>
crontab -e

<span style="color:#75715e"># 追加</span>
MAILTO<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;example@email.com&#34;</span>
<span style="color:#ae81ff">00</span> <span style="color:#ae81ff">03</span> <span style="color:#ae81ff">07</span> * * /root/letsencrypt/letsencrypt-auto renew --force-renew
</code></pre></div><p>ちなみに、renewに成功するとこんな感じです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e"># rootで実行</span>
root/letsencrypt/letsencrypt-auto renew --force-renew

Saving debug log to /var/log/letsencrypt/letsencrypt.log

-------------------------------------------------------------------------------
Processing /etc/letsencrypt/renewal/shamaton.orz.hm.conf
-------------------------------------------------------------------------------
Renewing an existing certificate
Performing the following challenges:
http-01 challenge <span style="color:#66d9ef">for</span> shamaton.orz.hm
Waiting <span style="color:#66d9ef">for</span> verification...
Cleaning up challenges

-------------------------------------------------------------------------------
new certificate deployed without reload, fullchain is
/etc/letsencrypt/live/shamaton.orz.hm/fullchain.pem
-------------------------------------------------------------------------------

Congratulations, all renewals succeeded. The following certs have been renewed:
  /etc/letsencrypt/live/shamaton.orz.hm/fullchain.pem <span style="color:#f92672">(</span>success<span style="color:#f92672">)</span>
</code></pre></div><p>あとで気づいたのですが、画像等がhttpのURLで参照していると「保護された通信」と表示されなくなってしまうようです。
この辺は一括設定かなにか対応が必要ですね。</p>
<p>以上です。</p>
<p>■ 参考







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fqiita.com%2fsue71%2fitems%2f100004b704b9ff129b09" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>








<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fweblabo.oscasierra.net%2fapache-httpd22-ssl-centos6%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>








<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2f14code.com%2fblog%2f20160209_1143" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
]]></content>
        </item>
        
        <item>
            <title>[Unity] GitHub for Unityを触ってみたかった…</title>
            <link>https://shamaton.dev/posts/419/</link>
            <pubDate>Sun, 02 Jul 2017 06:40:20 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/419/</guid>
            <description>お世話になっております。 しゃまとんです。 2017年3月頃にアナウンスされていて「GitHub for Unity」がついに公開されたようです！ という</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>2017年3月頃にアナウンスされていて「GitHub for Unity」がついに公開されたようです！<br>
ということで、早速触ってみよーとした記事です。<br>
内容的には残念な結果に終わっています。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2funity.github.com%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>








<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fforest.watch.impress.co.jp%2fdocs%2fnews%2f1067877.html" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>ここから下は残念な結果に終わるまでの流れを記載しています。</p>
<hr>
<p>必要なUnityのバージョンは5.4以上を対象としているようです。<br>
私は今回5.6.0f3で試してみました。</p>
<p>Github for UnityはUnityのEditorExtensionとして配布しているようです。<br>
<a href="https://github.com/github-for-unity/Unity/releases">こちら</a>から最新のunitypackageをダウンロードして、使いたいプロジェクトにimportしてみます。<br>
今回は新規のプロジェクトを作成してやってみました。</p>
<p><figure>
    <img src="/images/posts/2017/07/cap01.png"/> 
</figure>

importが完了するとEditorフォルダが作成され、メニューにGithubが追加されます。</p>
<figure>
    <img src="/images/posts/2017/07/cap02.png"/> 
</figure>

<p>Sign inというメニューがあったので、ログイン情報いれてみたんですが何も起きず&hellip;だったので、Windowを表示してみます。<br>
※（2017/07/02）どうやらSign inのメニューはまだBugがあるようで機能しないみたいです</p>
<figure>
    <img src="/images/posts/2017/07/cap03.png"/> 
</figure>

<p>Windowを表示するとInitialize repositoryとあるのでクリックしてみたのですが、
反応が帰ってこず&hellip;ログを確認しても</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">170702-14:43:13 TRACE [ 1] &lt;IApplicationManager&gt;               Running Repository Initialize
</code></pre></div><p>と表示されるだけでした。仕方がないということで、git initだけして再起動してみると、
表示が切り替わったので、アカウント名とかリポジトリのURLを設定してみたのですが反応がない&hellip;</p>
<figure>
    <img src="/images/posts/2017/07/cap04.png"/> 
</figure>

<p>じゃあ、何かcommitしてみるかということで.gitignoreを作ってcommitして、
unity再起動してみたのですが、historyとかブランチとか何も表示されず…</p>
<p>どうしたらいいの！</p>
<p>バージョンが古いってことなの！</p>
<p>ってことで、念のため5.6.2f1をインストールして見たけどダメでした…<br>
使ってみた所感を書きたかったのですが、αですしそんなに期待してはいけなかったですね。</p>
<p>こんな風につかえたよ！みたいな記事が他で出ることを期待しつつ、終わります。<br>
以上です。</p>
]]></content>
        </item>
        
        <item>
            <title>[Unity] UnityでGit LFSを使う時の設定</title>
            <link>https://shamaton.dev/posts/418/</link>
            <pubDate>Sat, 01 Jul 2017 16:13:52 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/418/</guid>
            <description>お世話になっております。 しゃまとんです。 なかなか個人制作レベルだとgitを使うぐらいになりますが、例えばエクセルデータだったり、 大きなサイズ</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>なかなか個人制作レベルだとgitを使うぐらいになりますが、例えばエクセルデータだったり、
大きなサイズのファイルもgitで管理したい！ってなることが（多分）あります（よね）。</p>
<p>ただgitの性質的に大きなサイズのバイナリファイルを扱うのが苦手なようで、
ソースコードと同じ様に追加しているとリポジトリのサイズがえらいことになってるなんてこともあるかもしれません。</p>
<p>そんなのを解決するのがGit LFSというやつです。<br>
Large File Storageの略です。わかりやすいですね。</p>
<p>






<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgit-lfs.github.com%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<iframe src="//www.slideshare.net/slideshow/embed_code/key/sgNg3SCqXPQ49s"
        width="566" height="385" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"
        style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen>
</iframe></p>
<p>使うにはちょっとの準備だけして、LFSを使いたいリポジトリに<code>.gitattributes</code>を置けばOK。</p>
<p>まず使えるようにするには下記を実行。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e"># mac</span>
brew install git-lfs
git lfs install

<span style="color:#75715e"># windows</span>
<span style="color:#75715e"># ここからダウンロード</span>
https://git-lfs.github.com/

<span style="color:#75715e"># 確認</span>
$ git lfs version
git-lfs/2.2.0 <span style="color:#f92672">(</span>GitHub; darwin amd64; go 1.8.3<span style="color:#f92672">)</span>
</code></pre></div><p>そしてリポジトリではgitattributesを配置しておきます。<br>
lfsのコマンドもあって、登録もできます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">git lfs track <span style="color:#e6db74">&#34;*.psd&#34;</span>
</code></pre></div><p>これでpsdファイルがLFSファイルになります。<br>
以降の操作はgitをいつも通り操作するだけです！</p>
<p>一点だけ注意しておくとcloneだけは下記のコマンドを使うのがよいです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">git lfs clone <span style="color:#e6db74">${</span>REPOSITORY_URL<span style="color:#e6db74">}</span>
</code></pre></div><p>あと、.gitattributesのテンプレ的なのないのかなーと思ったので、[こちら][1]を参考にすると良さそう！</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text"># Disable EOL conversions by default
* -text

## Unity ##

*.cs diff=csharp text
*.cginc text
*.shader text

*.mat merge=unityyamlmerge
*.anim merge=unityyamlmerge
*.unity merge=unityyamlmerge
*.prefab merge=unityyamlmerge
*.physicsMaterial2D merge=unityyamlmerge
*.physicsMaterial merge=unityyamlmerge
*.asset merge=unityyamlmerge
*.meta merge=unityyamlmerge
*.controller merge=unityyamlmerge


## git-lfs ##

#Image
*.jpg filter=lfs diff=lfs merge=lfs
*.jpeg filter=lfs diff=lfs merge=lfs
*.png filter=lfs diff=lfs merge=lfs
*.gif filter=lfs diff=lfs merge=lfs
*.psd filter=lfs diff=lfs merge=lfs
*.ai filter=lfs diff=lfs merge=lfs

#Audio
*.mp3 filter=lfs diff=lfs merge=lfs
*.wav filter=lfs diff=lfs merge=lfs
*.ogg filter=lfs diff=lfs merge=lfs

#Video
*.mp4 filter=lfs diff=lfs merge=lfs
*.mov filter=lfs diff=lfs merge=lfs

#3D Object
*.FBX filter=lfs diff=lfs merge=lfs
*.fbx filter=lfs diff=lfs merge=lfs
*.blend filter=lfs diff=lfs merge=lfs
*.obj filter=lfs diff=lfs merge=lfs

#ETC
*.a filter=lfs diff=lfs merge=lfs
*.exr filter=lfs diff=lfs merge=lfs
*.tga filter=lfs diff=lfs merge=lfs
*.pdf filter=lfs diff=lfs merge=lfs
*.zip filter=lfs diff=lfs merge=lfs
*.dll filter=lfs diff=lfs merge=lfs
*.unitypackage filter=lfs diff=lfs merge=lfs
*.aif filter=lfs diff=lfs merge=lfs
*.ttf filter=lfs diff=lfs merge=lfs
*.rns filter=lfs diff=lfs merge=lfs
*.reason filter=lfs diff=lfs merge=lfs
*.lxo filter=lfs diff=lfs merge=lfs
</code></pre></div><p>ちなみにSourceTree使いな方は初期設定を気にしなくても使えます！<br>
（.gitattributesは個々に設定が必要です）</p>
<p>そんなこんなでとても便利そうなのですが、利用量に制限がありますのでバンバン使えるぜ！
ってわけではないのでご注意ください。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fdocs.github.com%2fja%2fgithub%2fmanaging-large-files%2fabout-storage-and-bandwidth-usage" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>以上です。</p>
<p>■ 参考







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fmseeeen.msen.jp%2fhow-to-increase-git-lfs-data-capacity%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
]]></content>
        </item>
        
        <item>
            <title>[Unity] GUILayoutのちょっとしたサンプルコード</title>
            <link>https://shamaton.dev/posts/374/</link>
            <pubDate>Sun, 11 Jun 2017 07:42:51 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/374/</guid>
            <description>お世話になっております。 しゃまとんです。 少し前にエディタ拡張に入門しまして、あれこれと触っているのですが 「これどうやって実装するんだっけ〜〜</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>少し前にエディタ拡張に入門しまして、あれこれと触っているのですが<br>
「これどうやって実装するんだっけ〜〜〜」となることが多々あり、
とりあえず確認できるコードがほしいとなったので、一覧で確認するサンプルを作りました。</p>
<p>本当はこの辺とかでちゃんと学んだほうがいいとは思うのですが、
とりあえずエディタ拡張させろや！！っていう方も是非ご利用ください。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fanchan828.github.io%2feditor-manual%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>使いそうなもろもろを入れ込んでます。<br>
一応、動作確認してみたものを載せておきます。（見切れてしまっているものがありますがご容赦ください(；・∀・)）</p>
<figure>
    <img src="/images/posts/2017/02/edex.gif"/> 
</figure>

<p>以下はコードです。</p>
<script type="application/javascript" src="https://gist.github.com/shamaton/4dad7f021eba3da6365fac2ef4fe6c28.js"></script>

<p>エディタ拡張できるようになると開発効率をあげられそうなので、是非覚えたいところですね！以上です。</p>
]]></content>
        </item>
        
        <item>
            <title>[Unity] UniRxを使ったマルチシーンの利用方法を考えたけど微妙だった</title>
            <link>https://shamaton.dev/posts/387/</link>
            <pubDate>Sun, 28 May 2017 09:27:10 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/387/</guid>
            <description>お世話になっております。 しゃまとんです。 今回は、UniRxを使ったマルチシーンの利用方法について考えていてやってみたけど微妙になってしまった</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>今回は、UniRxを使ったマルチシーンの利用方法について考えていてやってみたけど微妙になってしまった話です。</p>
<p>最近はZenjectがいいという話からちょっと触ってみたりしているのですが、
やっぱマルチシーンの初期化時に引数的なものを渡して何かしたいよねと思っていたのが発端でググるとneueccさんの記事がヒットするので、それを参考にもう少し扱いやすくできないかなぁと実装してみました。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fneue.cc%2f2015%2f12%2f03_521.html" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>詳しい処理の流れは上記記事を参考にしていただくとして、変更した点は</p>
<ul>
<li>GameObject.FindObjectOfTypeはジェネリック変数Tで行う<br>
→ シーンを複数同時に読んだときに引数がアレしそう</li>
<li>Argをobject asしないようにした<br>
→ 毎回 as がめんどくさげ</li>
</ul>
<p>2点で理由は書いたとおりです。</p>
<p>で&hellip; Argに何でもつっこめて勝手に動作して最高だぜ！と思って使っていたのですが、
とりあえず使ってみるとコードの読みづらさや、あれ…ここ同期まちさせたい&hellip;というような状況になり、
うーーーーん後から見返したときにやばそうとなった次第です。</p>
<p>簡単なサンプルを含めたコードはこんな感じです。</p>
<p>SceneBase.cs</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">using</span> System.Collections;
<span style="color:#66d9ef">using</span> System.Collections.Generic;
<span style="color:#66d9ef">using</span> UnityEngine;
<span style="color:#66d9ef">using</span> UnityEngine.SceneManagement;

<span style="color:#66d9ef">using</span> UniRx;

<span style="color:#75715e">/////////////////////////////////////////////////////////////////////////////////////////////////
</span><span style="color:#75715e">///&lt;summary&gt;
</span><span style="color:#75715e">/// シーンローダーと連携するシーン管理基底クラス
</span><span style="color:#75715e">///&lt;/summary&gt;
</span><span style="color:#75715e">/////////////////////////////////////////////////////////////////////////////////////////////////
</span><span style="color:#75715e"></span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">abstract</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">SceneBase</span>&lt;T&gt; : PresenterBase {
  <span style="color:#75715e">// 初期化引数
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">public</span> T Arg { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">set</span>; }

  <span style="color:#75715e">// ロードしたシーン名
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">string</span> loadedSceneName;
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> LoadedSceneName {
    <span style="color:#66d9ef">get</span> {
      <span style="color:#66d9ef">return</span> loadedSceneName;
    }
  }

  <span style="color:#75715e">// ロード済みフラグ
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">bool</span> IsLoaded { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">set</span>; }

  <span style="color:#75715e">/////////////////////////////////////////////////////////////////////////////////////////////////
</span><span style="color:#75715e"></span>  <span style="color:#75715e">///&lt;summary&gt;
</span><span style="color:#75715e"></span>  <span style="color:#75715e">/// Initialize前にコールする
</span><span style="color:#75715e"></span>  <span style="color:#75715e">///&lt;/summary&gt;
</span><span style="color:#75715e"></span>  <span style="color:#75715e">///&lt;returns&gt;The async.&lt;/returns&gt;
</span><span style="color:#75715e"></span>  <span style="color:#75715e">/////////////////////////////////////////////////////////////////////////////////////////////////
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">virtual</span> IObservable&lt;Unit&gt; PrepareAsync() {
    <span style="color:#66d9ef">return</span> Observable.Return(Unit.Default);
  }

  <span style="color:#75715e">/////////////////////////////////////////////////////////////////////////////////////////////////
</span><span style="color:#75715e"></span>  <span style="color:#75715e">///&lt;summary&gt;
</span><span style="color:#75715e"></span>  <span style="color:#75715e">/// 生成時処理
</span><span style="color:#75715e"></span>  <span style="color:#75715e">///&lt;/summary&gt;
</span><span style="color:#75715e"></span>  <span style="color:#75715e">/////////////////////////////////////////////////////////////////////////////////////////////////
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">protected</span> <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">void</span> OnAwake() {
    <span style="color:#75715e">// 完了時にフラグを立てておく
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">this</span>.InitializeAsObservable().Subscribe(_ =&gt; IsLoaded = <span style="color:#66d9ef">true</span>);
  }

  <span style="color:#75715e">/////////////////////////////////////////////////////////////////////////////////////////////////
</span><span style="color:#75715e"></span>  <span style="color:#75715e">///&lt;summary&gt;
</span><span style="color:#75715e"></span>  <span style="color:#75715e">/// シーン名を設定
</span><span style="color:#75715e"></span>  <span style="color:#75715e">///&lt;/summary&gt;
</span><span style="color:#75715e"></span>  <span style="color:#75715e">/////////////////////////////////////////////////////////////////////////////////////////////////
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> SetSceneName(<span style="color:#66d9ef">string</span> sceneName) {
    loadedSceneName = sceneName;
  }

  <span style="color:#75715e">/////////////////////////////////////////////////////////////////////////////////////////////////
</span><span style="color:#75715e"></span>  <span style="color:#75715e">///&lt;summary&gt;
</span><span style="color:#75715e"></span>  <span style="color:#75715e">/// 初期化値を設定
</span><span style="color:#75715e"></span>  <span style="color:#75715e">///&lt;/summary&gt;
</span><span style="color:#75715e"></span>  <span style="color:#75715e">///&lt;param name=&#34;arg&#34;&gt;Argument.&lt;/param&gt;
</span><span style="color:#75715e"></span>  <span style="color:#75715e">/////////////////////////////////////////////////////////////////////////////////////////////////
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> SetArg(T arg) {
    Arg = arg;
  }
}
</code></pre></div><p>SceneBaseLoader.cs</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">using</span> System;
<span style="color:#66d9ef">using</span> System.Collections;
<span style="color:#66d9ef">using</span> System.Collections.Generic;
<span style="color:#66d9ef">using</span> UnityEngine;
<span style="color:#66d9ef">using</span> UnityEngine.SceneManagement;

<span style="color:#66d9ef">using</span> UniRx;

<span style="color:#75715e">/////////////////////////////////////////////////////////////////////////////////////////////////
</span><span style="color:#75715e">///&lt;summary&gt;
</span><span style="color:#75715e">/// SceneBaseクラスを利用したシーンのロード管理
</span><span style="color:#75715e">///&lt;/summary&gt;
</span><span style="color:#75715e">/////////////////////////////////////////////////////////////////////////////////////////////////
</span><span style="color:#75715e"></span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">SceneBaseLoader</span> {

  <span style="color:#75715e">/////////////////////////////////////////////////////////////////////////////////////////////////
</span><span style="color:#75715e"></span>  <span style="color:#75715e">///&lt;summary&gt;
</span><span style="color:#75715e"></span>  <span style="color:#75715e">/// シーンを非同期にロード
</span><span style="color:#75715e"></span>  <span style="color:#75715e">///&lt;/summary&gt;
</span><span style="color:#75715e"></span>  <span style="color:#75715e">/////////////////////////////////////////////////////////////////////////////////////////////////
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> IObservable&lt;Unit&gt; LoadAsync&lt;T, T_Arg&gt;(<span style="color:#66d9ef">string</span> sceneName, T_Arg argument, LoadSceneMode mode = LoadSceneMode.Single)
    <span style="color:#66d9ef">where</span> T : SceneBase&lt;T_Arg&gt;
  {
    <span style="color:#66d9ef">return</span> Observable.FromCoroutine&lt;Unit&gt;(observer =&gt; initRoutine(SceneManager.LoadSceneAsync(sceneName, mode), observer))
      .SelectMany(_ =&gt;
        {
          <span style="color:#75715e">// シーンを取得
</span><span style="color:#75715e"></span>          T[] scenes = GameObject.FindObjectsOfType&lt;T&gt;();

          <span style="color:#75715e">// 同じシーンを重複して読まないようにする
</span><span style="color:#75715e"></span>          <span style="color:#66d9ef">if</span> (scenes.Length != <span style="color:#ae81ff">1</span>) {
            Debug.LogErrorFormat(<span style="color:#66d9ef">typeof</span>(T).Name + <span style="color:#e6db74">&#34; component must set only one in scene !!&#34;</span>);
          }

          T loadedScene = scenes[<span style="color:#ae81ff">0</span>];

          <span style="color:#75715e">// ロード済み
</span><span style="color:#75715e"></span>          <span style="color:#66d9ef">if</span> (loadedScene.IsLoaded) {
            Debug.LogErrorFormat(sceneName + <span style="color:#e6db74">&#34; has alreay been loaded !!&#34;</span>);
          }

          <span style="color:#75715e">// ロード済みにして
</span><span style="color:#75715e"></span>          loadedScene.SetArg(argument);
          loadedScene.SetSceneName(sceneName);

          <span style="color:#75715e">// 一旦非Activeにして止める
</span><span style="color:#75715e"></span>          loadedScene.gameObject.SetActive(<span style="color:#66d9ef">false</span>); 

          <span style="color:#75715e">// PrepareAsyncが完了するまで待つ
</span><span style="color:#75715e"></span>          <span style="color:#66d9ef">return</span> loadedScene.PrepareAsync() 
            .Do(__ =&gt; {
              <span style="color:#75715e">// Activeにして動かしはじめる
</span><span style="color:#75715e"></span>              loadedScene.gameObject.SetActive(<span style="color:#66d9ef">true</span>);
            });
        });
  }

  <span style="color:#75715e">/////////////////////////////////////////////////////////////////////////////////////////////////
</span><span style="color:#75715e"></span>  <span style="color:#75715e">///&lt;summary&gt;
</span><span style="color:#75715e"></span>  <span style="color:#75715e">/// 初期化ルーチン
</span><span style="color:#75715e"></span>  <span style="color:#75715e">///&lt;/summary&gt;
</span><span style="color:#75715e"></span>  <span style="color:#75715e">/////////////////////////////////////////////////////////////////////////////////////////////////
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">static</span> IEnumerator initRoutine(AsyncOperation operation, IObserver&lt;Unit&gt; observer) {

    <span style="color:#75715e">// ロード待機
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (!operation.isDone) <span style="color:#66d9ef">yield</span> <span style="color:#66d9ef">return</span> operation;

    <span style="color:#75715e">// 初期化処理する
</span><span style="color:#75715e"></span>    observer.OnNext(Unit.Default);

    <span style="color:#75715e">// 完了
</span><span style="color:#75715e"></span>    observer.OnCompleted();
  }
}
</code></pre></div><p>Scene1.cs</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">using</span> System.Collections;
<span style="color:#66d9ef">using</span> System.Collections.Generic;
<span style="color:#66d9ef">using</span> UnityEngine;
<span style="color:#66d9ef">using</span> UnityEngine.SceneManagement;

<span style="color:#66d9ef">using</span> UniRx;

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Scene1</span> : MonoBehaviour {
    
  <span style="color:#66d9ef">void</span> Update() {
    <span style="color:#66d9ef">if</span> (Input.GetKeyDown(KeyCode.A)) {
      Scene2Arg arg = <span style="color:#66d9ef">new</span> Scene2Arg();
      arg.mesasge = <span style="color:#e6db74">&#34;Scene2をロードしました！&#34;</span>;
      SceneBaseLoader.LoadAsync&lt;Scene2, Scene2Arg&gt;(<span style="color:#e6db74">&#34;Scene2&#34;</span>, arg, LoadSceneMode.Additive).Subscribe();
    }
  }
}
</code></pre></div><p>Scene2.cs</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">using</span> System.Collections;
<span style="color:#66d9ef">using</span> System.Collections.Generic;
<span style="color:#66d9ef">using</span> UnityEngine;
<span style="color:#66d9ef">using</span> UnityEngine.UI;

<span style="color:#66d9ef">using</span> UniRx;

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Scene2</span> : SceneBase&lt;Scene2Arg&gt; {
<span style="color:#a6e22e">
</span><span style="color:#a6e22e">  [SerializeField]</span> <span style="color:#66d9ef">private</span> Text text;


  <span style="color:#66d9ef">protected</span> <span style="color:#66d9ef">override</span> IPresenter[] Children {
    <span style="color:#66d9ef">get</span> { <span style="color:#66d9ef">return</span> EmptyChildren; }
  }

  <span style="color:#66d9ef">protected</span> <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">void</span> BeforeInitialize()
  {
    <span style="color:#75715e">// 何もしない
</span><span style="color:#75715e"></span>  }

  <span style="color:#66d9ef">protected</span> <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">void</span> Initialize()
  {
    <span style="color:#66d9ef">if</span> (Arg != <span style="color:#66d9ef">null</span>) {
      text.text = Arg.mesasge;
    }
  }
}

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Scene2Arg</span> {
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> mesasge = <span style="color:#e6db74">&#34;&#34;</span>;
}
</code></pre></div><p>挙動例はこれ。</p>
<figure>
    <img src="/images/posts/2017/05/multi_test.gif"/> 
</figure>

<p>もっと理解していたらきれいに使えるかもなんですが、今はちょっとなーという感じになってしまいました。
一旦はシンプルな使い方にとどめておこうかと思います。</p>
<p>以上です。</p>
]]></content>
        </item>
        
        <item>
            <title>[Golang] メソッドをreflect.MethodByNameで呼んだときの性能差</title>
            <link>https://shamaton.dev/posts/144/</link>
            <pubDate>Thu, 04 May 2017 03:05:34 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/144/</guid>
            <description>お世話になっております。 しゃまとんです。 ふと、golangでもこんな感じでメソッドって呼べないのかなーと調べてみたんですが、そんないい話はあ</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>ふと、golangでもこんな感じでメソッドって呼べないのかなーと調べてみたんですが、そんないい話はありませんでした。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fk0kubun.hatenablog.com%2fentry%2f2014%2f12%2f06%2f173227" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>Goではreflectというパッケージでリフレクションすることができるようになっています（説明になっていない）。
そちらでやりたげなことは出来そうなんですが、reflectは重いという噂から、どうなんだろうということで簡単に比較してみました。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgolang.org%2fpkg%2freflect%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>golangで文字列的にメソッドを呼ぶには<code>reflect.MethodByName</code>を利用して実現できそうです。いけるかな、いけないかな。</p>
<p>さて、検証簡単にベンチマークをとりました。<br>
コードは下記です。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>

<span style="color:#f92672">import</span> (
    <span style="color:#e6db74">&#34;testing&#34;</span>
    <span style="color:#e6db74">&#34;reflect&#34;</span>
    <span style="color:#e6db74">&#34;time&#34;</span>
)

<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">t</span> = <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>()
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">r</span> = <span style="color:#a6e22e">reflect</span>.<span style="color:#a6e22e">ValueOf</span>(<span style="color:#a6e22e">t</span>)

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">BenchmarkCall</span>(<span style="color:#a6e22e">b</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">testing</span>.<span style="color:#a6e22e">B</span>) {
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">n</span> &lt; <span style="color:#a6e22e">b</span>.<span style="color:#a6e22e">N</span>; <span style="color:#a6e22e">n</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">UnixNano</span>()
    }
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">BenchmarkReflect</span>(<span style="color:#a6e22e">b</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">testing</span>.<span style="color:#a6e22e">B</span>) {
    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">n</span> &lt; <span style="color:#a6e22e">b</span>.<span style="color:#a6e22e">N</span>; <span style="color:#a6e22e">n</span><span style="color:#f92672">++</span> {
        <span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">MethodByName</span>(<span style="color:#e6db74">&#34;UnixNano&#34;</span>).<span style="color:#a6e22e">Call</span>(<span style="color:#66d9ef">nil</span>)
    }
}
</code></pre></div><p>実行結果はこんな感じ。<br>
全然速度違いますね。。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">BenchmarkCall-4                          2000000000           0.49 ns/op        0 B/op          0 allocs/op
BenchmarkReflect-4                       1000000          1577 ns/op         192 B/op          7 allocs/op
</code></pre></div><p>普通に使っている程度だと、使わないですが込み入ったことをするとreflectが登場してくるので使うときは気をつけないとですね。</p>
<p>以上です。</p>
<p>■ 参考</p>
<p>






<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fameblo.jp%2fprincipia-ca%2fentry-11929774278.html" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>








<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fd.hatena.ne.jp%2ffbis%2f20060522%2f1148294458" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
]]></content>
        </item>
        
        <item>
            <title>[Unity] Zenjectを触り始めてみた</title>
            <link>https://shamaton.dev/posts/402/</link>
            <pubDate>Mon, 24 Apr 2017 16:15:40 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/402/</guid>
            <description>お世話になっております。 しゃまとんです。 Unity界隈で話題になっているZenjectについてご存知でしょうか。 かく言う私もつい最近しったの</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>Unity界隈で話題になっているZenjectについてご存知でしょうか。<br>
かく言う私もつい最近しったのですが、使えるととても便利そうなので覚えたほうがいいなぁというやつみたいです。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fu3d.as%2f7ER" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>どうやらこのアセットはポケモンGoで使われているそうで、依存性を注入してくれるフレームワークだそうです。
Dependency Injection（DI）などと言うそうですが、ん？知らんぞということになり、一旦さわってみることに。</p>
<p>とりあえず初手としては、簡単に注入するぞ！な感じで始めてみました。</p>
<p>まずは空のシーンを用意しておきます。Zenjectを使うためには、SceneContextとInstallerが必要なようです。
SceneContextはGameobjectを追加する要領で追加（右クリックメニュー等）できます。</p>
<figure>
    <img src="/images/posts/2017/04/zen_1.gif"/> 
</figure>

<p>InstallerはZenjectで用意されているMonoInstallerクラスを継承して定義するようです。今回は一旦下記のようにしました。
（他にも色々あるが）</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">using</span> System;  
<span style="color:#66d9ef">using</span> Zenject;  

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">InstallerSample</span> : MonoInstaller&lt;InstallerSample&gt;  
{  
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">void</span> InstallBindings()  
  {  
  }  
}
</code></pre></div><p>Installerは空のGameobjectを作成してコンポーネントとして追加しておきます。
そしてSceneContextに登録しておきます。</p>
<figure>
    <img src="/images/posts/2017/04/zen_1.png"/> 
</figure>

<p>次に挙動を確認するためのクラスを用意します。今回はFugaクラスからHogeクラスを参照してみることにしました。
各クラスは下記のようにしておきます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">using</span> System.Collections;
<span style="color:#66d9ef">using</span> System.Collections.Generic;
<span style="color:#66d9ef">using</span> UnityEngine;

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Hoge</span> : MonoBehaviour {
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> A = <span style="color:#ae81ff">1</span>;
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> B = <span style="color:#ae81ff">2</span>;
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> C = <span style="color:#ae81ff">3</span>;
}
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">using</span> System.Collections;
<span style="color:#66d9ef">using</span> UnityEngine;
<span style="color:#66d9ef">using</span> Zenject;

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Fuga</span> : MonoBehaviour {
<span style="color:#a6e22e">
</span><span style="color:#a6e22e">  [Inject]</span> Hoge hoge;

  <span style="color:#75715e">// Use this for initialization
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">void</span> Awake () {

    <span style="color:#66d9ef">if</span> (hoge == <span style="color:#66d9ef">null</span>) {
      Debug.Log(<span style="color:#e6db74">&#34;is null&#34;</span>);
    }
    <span style="color:#66d9ef">else</span> {
      Debug.Log(<span style="color:#e6db74">&#34;not null&#34;</span>);
      Debug.Log(hoge.A.ToString() + hoge.B.ToString() + hoge.C.ToString());
    }
  }

  <span style="color:#75715e">// Update is called once per frame
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">void</span> Update () {
  }
}
</code></pre></div><p>HogeクラスをつけるオブジェクトにはZenject Bindingもつけておきます。
このコンポーネントをつけておくとBindしてくれるようです。</p>
<figure>
    <img src="/images/posts/2017/04/zen_4.png"/> 
</figure>

<p>Fugaクラスも適当なオブジェクトにつけておきます。最終的にヒエラルキーはこんな感じになります。Fuga内には[Inject]としてHogeが定義されています。これがポイントで、参照等を設定しなくても、注入してくれるようになります。</p>
<figure>
    <img src="/images/posts/2017/04/zen_2.png"/> 
</figure>

<p>実行すると・・・</p>
<p><figure>
    <img src="/images/posts/2017/04/zen_3.png"/> 
</figure>

こんな感じで参照が設定され、値を読むことができました。<br>
本当に初手な感じなので、引き続き覚えていきたいと思います！</p>
<p>以上です。</p>
<p>■参考</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fyutakaseda3216.hatenablog.com%2fentry%2f2017%2f04%2f17%2f124612" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

]]></content>
        </item>
        
        <item>
            <title>Macでcompletionするアレコレ</title>
            <link>https://shamaton.dev/posts/333/</link>
            <pubDate>Wed, 05 Apr 2017 15:10:31 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/333/</guid>
            <description>お世話になっております。 しゃまとんです。 皆さんcompletion使ってますでしょうか。 gitやdockerを使うときにcompletion</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>皆さんcompletion使ってますでしょうか。<br>
gitやdockerを使うときにcompletionを設定しているとコマンドを補完してくれて作業が捗りますよね。</p>
<p>大体gitやdockerをインストールした時に設定したりするのですが、<br>
いつもcompletion毎に調べたりしてめんどくさいなぁと思ったので個人的な趣味でまとめました。<br>
bashかzshで分けておきました。</p>
<ul>
<li>git, dockerが入ってる前提です</li>
<li>各OSでzshのディレクトリ構成が違うかもしれません</li>
</ul>
<p>■ Bash</p>
<script type="application/javascript" src="https://gist.github.com/shamaton/278938bde469ac59a5a7adff017d5592.js"></script>

<p>最後に現在のシェルに反映します。</p>
<!-- raw HTML omitted -->
<p>■ Zsh</p>
<script type="application/javascript" src="https://gist.github.com/shamaton/277d73debd08dee9bbcb271f3228d926.js"></script>

<p>次にzshrcにfpathを追記します。<br>
autoloadよりも前に記載しておきます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e">#[.zshrc]</span>
fpath<span style="color:#f92672">=(</span><span style="color:#e6db74">${</span>HOME<span style="color:#e6db74">}</span>/.zsh_completions $fpath<span style="color:#f92672">)</span>

autoload -Uz compinit -i
compinit -u
</code></pre></div><p>最後に反映させます</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">source ~/.zshrc
</code></pre></div><p>試しにやってみると&hellip;</p>
<figure>
    <img src="/images/posts/2016/11/completion.gif"/> 
</figure>

<p>このように補完してくれるようになりました。<br>
どっちも便利なので是非活用しましょう！<br>
以上です。</p>
<p>■ appendix<br>
かんたんに検証したい方向けにCentOS on Docker用コマンド</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e"># コンテナ起動</span>
docker run --name<span style="color:#f92672">=</span>tmp -it centos bash

<span style="color:#75715e"># コンテナにgit/docker周りをインストール</span>
echo <span style="color:#e6db74">&#34;include_only=.jp&#34;</span> &gt;&gt; /etc/yum/pluginconf.d/fastestmirror.conf <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>yum -y update <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>yum -y install git docker zsh <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>curl -L https://github.com/docker/machine/releases/download/v0.8.2/docker-machine-<span style="color:#e6db74">`</span>uname -s<span style="color:#e6db74">`</span>-<span style="color:#e6db74">`</span>uname -m<span style="color:#e6db74">`</span> &gt;/usr/local/bin/docker-machine <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>chmod +x /usr/local/bin/docker-machine <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>curl -L <span style="color:#e6db74">&#34;https://github.com/docker/compose/releases/download/1.8.1/docker-compose-</span><span style="color:#66d9ef">$(</span>uname -s<span style="color:#66d9ef">)</span><span style="color:#e6db74">-</span><span style="color:#66d9ef">$(</span>uname -m<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span> &gt; /usr/local/bin/docker-compose <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>chmod +x /usr/local/bin/docker-compose

<span style="color:#75715e"># いろいろ試す...</span>

<span style="color:#75715e"># 後始末</span>
docker rm tmp
docker rmi centos:latest
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>[English] Native Campで人生初の英会話を体験した</title>
            <link>https://shamaton.dev/posts/383/</link>
            <pubDate>Sat, 25 Mar 2017 15:21:51 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/383/</guid>
            <description>お世話になっております。 しゃまとんです。 ついにはじめました。英会話。 正直続くかどうかと自分でも疑問なところがあるのですが、せっかくなので記事</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>ついにはじめました。英会話。<br>
正直続くかどうかと自分でも疑問なところがあるのですが、せっかくなので記事化して逃げないようにしたいと思いタイピングしております。</p>
<p>英語を始めようと思ったのはUnityでプログラミングをしていく中で深い部分の調査になると<a href="http://answers.unity3d.com/">Unity Answer</a>に辿りついたり、
Go言語を使い始めたら日本語サイトよりも<a href="http://stackoverflow.com/">stackoverflow</a>みたいなことが多々あり、これはやっぱ必要だなーと思ったのがきっかけです。</p>
<p>ということで、細々と書籍を買って勉強していたのですが、やはり話せないと学生時代の二の舞になりそうだったので英会話やるしかないと思ったわけです。<br>
でも、英会話って高い・・・・ということでオンライン英会話を調べまくってました。</p>
<figure>
    <img src="/images/posts/2017/03/logo_ogp.png"/> 
</figure>

<p>それで<a href="https://px.a8.net/svt/ejp?a8mat=2TE6SZ+97114I+35VG+5YJRM">ネイティブキャンプ</a>を知りました。
とりあえずどんな特徴があるかというと</p>
<ul>
<li>月5000円以内</li>
<li>1レッスン25分で無制限にレッスン可能（！）</li>
<li>Skype不要、ブラウザでレッスンできる</li>
<li>予約不要（予約も出来るけど別途有料）</li>
</ul>
<p>って感じです。無制限なのが今までにないみたいです。エリクサーが使えない私も安心して使えそう。評判もいいみたいなので、やってみました！</p>
<p>ちなみにやる前の英語スペックは下記のとおり。</p>
<ul>
<li>センター試験では半分ちょっとの点数</li>
<li>大学で英語の発表をしたけどまる覚えした</li>
<li>最近は本とかって通勤時間で勉強している</li>
</ul>
<p>まる覚えで話したんですけど、英語が通じたときの楽しさはずっと忘れてなかったのでいつか話せたら・・・と思ってました。</p>
<p>ホームページから新規登録ですすめていくと、いきなり初めのレッスン開始を進められます。<br>
迷っても仕方ないのでレッスン開始・・・</p>
<p>初回の講師は男性の方でした。（初回は勝手に先生が選ばれる）<br>
ざっくりした感想からいうと地獄でした。</p>
<p>なんでかというと</p>
<ul>
<li>勉強したことは一切でてこない</li>
<li>テンパった</li>
<li>わからなさすぎて、先生が苛ついてるっぽかった</li>
</ul>
<p>とにかくひどかったです。心が折れそうになりました。<br>
レッスンの内容自体は自己紹介を覚える簡単なフレーズなはずなんですが、途中で先生が行っていることがわからない・・</p>
<p>勇気出してやってみた人が最初こんな感じだとやめたくなっちゃうかもと思うぐらいです。<br>
別の先生なら違うかも・・と思い、次の日は女性の先生を選んでみました。</p>
<p>その結果・・</p>
<p>授業めっちゃおもしろかったです！<br>
こんなに違うのかというくらい。速攻でお気に入りに登録しました。<br>
レッスン内容は一緒なんですけど、こちらに寄り添ってやってくれているのをひしひしと感じました。</p>
<p>ちなみに先生はこんな方</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/94w7CikLWYI" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p>これなら続けられそう。<br>
ということで、1回目で心が折れそうになった人は2回目もやるといいと思います！</p>
<p>Rubyの父、まつもとさんもこういってることだし。（DMMやけど）<br>
英語がんばろうエンジニアも。</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/s51Sn4Y6pUs" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p>他と比較とかは偉そうなことはできないので、ぼちぼち続けていければと思います。<br>
（これがウソ記事にならないように）<br>
気になった方は是非はじめてみてください。</p>
<p>以上です。</p>
]]></content>
        </item>
        
        <item>
            <title>[Jenkins] Jenkinsからaws-cliを使えるようにするメモ</title>
            <link>https://shamaton.dev/posts/314/</link>
            <pubDate>Wed, 15 Mar 2017 15:05:05 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/314/</guid>
            <description>お世話になっております。 しゃまとんです。 macでJenkinsを使う際のちょっとしたメモです。Jenkinsでawsの操作を実行したいなぁと</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>macでJenkinsを使う際のちょっとしたメモです。Jenkinsでawsの操作を実行したいなぁと思い、
macにaws-cliをインストールしました。そこでJenkinsにジョブを作成し、シェルの実行タスクからawsコマンドを利用してみると</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">/var/folders/zh/k0xxxxxxxxxxxxxxxxxxxxx/T/hudsonxxxxxxxxxxxxx.sh: line **: aws: command not found
</code></pre></div><p>となり、awsコマンドが使えませんでした。<br>
通常のターミナルからは使えるのになぜだろうと思い調べていたら、案の定パスが通っていなかったのが原因でした。</p>
<p>aws-cliはインストールすると、<code>/usr/local/bin</code>にコマンドが配置されています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">ls /usr/local/bin/aws*
/usr/local/bin/aws                  /usr/local/bin/aws.cmd              /usr/local/bin/aws_completer        /usr/local/bin/aws_zsh_completer.sh
</code></pre></div><p>ということで、Jenkins側の設定を変えてやります。</p>
<p>[Jenkinsの管理] → [システムの設定] を選択し、グローバルプロパティにPATHを追加しました。</p>
<figure>
    <img src="/images/posts/2016/10/set_path.png"/> 
</figure>

<p>これで、再度確認してみると</p>
<figure>
    <img src="/images/posts/2016/10/aws_help.png"/> 
</figure>

<p>実行することができました。Jenkinsからシェルを実行すると環境変数が違っていたりするのでちょっと配慮が必要ですね。</p>
<p>あとシェルの実行で頭に#!/bin/shを書くとエラーが発生したときに
途中でexitしないみたいなのでコピペする際は注意したほうが良さそうですね。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fqiita.com%2fmechamogera%2fitems%2ff689b95670127d5bf046" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>以上です。</p>
]]></content>
        </item>
        
        <item>
            <title>[Golang] EchoのUseの挙動について</title>
            <link>https://shamaton.dev/posts/293/</link>
            <pubDate>Tue, 07 Mar 2017 14:12:52 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/293/</guid>
            <description>お世話になっております。 しゃまとんです。 Go言語では多数のウェブフレームワークが公開されていますが、最近ホットそうなフレームワークとしてEc</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>Go言語では多数のウェブフレームワークが公開されていますが、最近ホットそうなフレームワークとしてEchoというものがあります。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2flabstack%2fecho" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>ちょっと見てみると、エンドポイントに渡す引数がシンプルだったり、公式で使い方を記載してくれていたりします。</p>
<p>また、スター数も5000を越えていて、支持されているのが伺えますね。（2017.03時点）</p>
<p>そこで、gojiを使って触ってたものを置き換えてみることにしたのですが、Use関数の挙動が微妙に違っていたのでメモです。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fzenazn%2fgoji" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>Use関数とはリクエストが飛んできたときに事前に決められた共通の処理をさせたい場合に利用する機能です。
今回はEchoを使って下記のように簡単な返答をするコードを用意しました。</p>
<script type="application/javascript" src="https://gist.github.com/shamaton/479c6fd1780b12b8e108f003d4103371.js"></script>

<p>アクセス時に１，２，３と表示するような機能をいれました。<br>
これをターミナルから実行し、各URLへアクセスしてみます。</p>
<p>■ http://localhost:8080/nice/middle/hoge<br>
１，２しか表示されません。</p>
<figure>
    <img src="/images/posts/2016/09/hoge.png"/> 
</figure>

<p>■ http://localhost:8080/nice/middle/fuga<br>
１，２，３と表示されます。</p>
<figure>
    <img src="/images/posts/2016/09/fuga.png"/> 
</figure>

<p>このように、Useとルーティングの順序が違うとUseしたけど呼ばれません。</p>
<p>導入時にUseの呼び出しがルーティングの後になっていて、呼ばれなくてハマっていました。
gojiのでは順序は気にしなくても良かった気がします。フレームワークによって若干挙動は変わったりするので、注意ですね。</p>
<p>以上です。</p>
]]></content>
        </item>
        
        <item>
            <title>[Mac] pkgでインストールしたjenkinsのportを変更する</title>
            <link>https://shamaton.dev/posts/276/</link>
            <pubDate>Thu, 23 Feb 2017 15:36:57 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/276/</guid>
            <description>お世話になっております。 しゃまとんです。 macのでjenkins導入方法は色々あるようですが、公式のサイトからpkgを取得してインストールし</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>macのでjenkins導入方法は色々あるようですが、公式のサイトからpkgを取得してインストールした場合、
ポートを設定しているファイルがバイナリっぽくなっていて編集が出来ないっぽいです（できるかもしれないけど怖い）</p>
<p>調べてみるとやり方があるみたいのだったのでメモしておきます。<br>
実はとても簡単でコマンドを1つ実行すればOKです。（defaultsコマンドはplistを操作するコマンドです）</p>
<p>portを<code>58080</code>に変更します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo defaults write /Library/Preferences/org.jenkins-ci httpPort <span style="color:#ae81ff">58080</span>
</code></pre></div><p>上記を実行して再起動します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist
sudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist
</code></pre></div><p>58080にアクセスしてみると、表示されました！</p>
<figure>
    <img src="/images/posts/2016/08/port58080.png"/> 
</figure>

<p>デフォルトでは8080を使っているので、他のサービスとバッティングしてしまう場合は変更しておくとよいですね。</p>
<p>以上です。</p>
<p>■ 参考







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fqiita.com%2ft_n%2fitems%2f22e6c5fd9f2ced3d5fc4" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>








<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fthree1415.wordpress.com%2f2014%2f12%2f29%2fchanging-jenkins-port-on-mac-os-x%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
]]></content>
        </item>
        
        <item>
            <title>[Golang] gojiでも接続数を制限してみる</title>
            <link>https://shamaton.dev/posts/271/</link>
            <pubDate>Wed, 15 Feb 2017 13:40:07 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/271/</guid>
            <description>お世話になっております。 しゃまとんです。 go言語の軽量フレームワークであるgojiを触っておりまして、 ふと大量のリクエストが来た時ってプロセ</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>go言語の軽量フレームワークであるgojiを触っておりまして、
ふと大量のリクエストが来た時ってプロセス生成ってどうなっているのだろう・・と思い確認してみました。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fzenazn%2fgoji" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>とりあえずgojiをgo getして最低限動作する状態にします。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>

<span style="color:#f92672">import</span> (
    <span style="color:#e6db74">&#34;fmt&#34;</span>
    <span style="color:#e6db74">&#34;net/http&#34;</span>

    <span style="color:#e6db74">&#34;github.com/zenazn/goji&#34;</span>
    <span style="color:#e6db74">&#34;github.com/zenazn/goji/web&#34;</span>
)

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">hello</span>(<span style="color:#a6e22e">c</span> <span style="color:#a6e22e">web</span>.<span style="color:#a6e22e">C</span>, <span style="color:#a6e22e">w</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>, <span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>) {
    <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Fprintf</span>(<span style="color:#a6e22e">w</span>, <span style="color:#e6db74">&#34;Hello, %s!&#34;</span>, <span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">URLParams</span>[<span style="color:#e6db74">&#34;name&#34;</span>])
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
    <span style="color:#a6e22e">goji</span>.<span style="color:#a6e22e">Get</span>(<span style="color:#e6db74">&#34;/hello/:name&#34;</span>, <span style="color:#a6e22e">hello</span>)
    <span style="color:#a6e22e">goji</span>.<span style="color:#a6e22e">Serve</span>()
}
</code></pre></div><p>起動して、プロセス数を確認してみます。確認としてabコマンドを利用しました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">ab -n <span style="color:#ae81ff">1000</span> -c <span style="color:#ae81ff">100</span> http://localhost:8000/hello/shamaton
</code></pre></div><p>同時リクエスト数を100として実行してみると、100を超えていてフルでプロセスが生成されているようです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">ss -o  state established -np | grep <span style="color:#e6db74">&#34;limit&#34;</span> | grep <span style="color:#e6db74">&#34;8000&#34;</span> | wc -l
<span style="color:#ae81ff">102</span>
</code></pre></div><p>これだと状況によってはサーバがダウンしてしまいそうです。
どうにかして接続制限数を指定できないかなと思っていたら、すでにパッケージがありました。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fpkg.go.dev%2fgolang.org%2fx%2fnet%2fnetutil" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>netutil.LimitListenerを利用してlistenerを作成し、設定すれば良さそうです。<br>
そこで下記のようにコードを変更しました。最大接続数を15にしてみます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>

<span style="color:#f92672">import</span> (
    <span style="color:#e6db74">&#34;fmt&#34;</span>
    <span style="color:#e6db74">&#34;net/http&#34;</span>

    <span style="color:#e6db74">&#34;github.com/zenazn/goji&#34;</span>
    <span style="color:#e6db74">&#34;github.com/zenazn/goji/bind&#34;</span>
    <span style="color:#e6db74">&#34;github.com/zenazn/goji/web&#34;</span>
    <span style="color:#e6db74">&#34;golang.org/x/net/netutil&#34;</span>
)

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">hello</span>(<span style="color:#a6e22e">c</span> <span style="color:#a6e22e">web</span>.<span style="color:#a6e22e">C</span>, <span style="color:#a6e22e">w</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>, <span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>) {
    <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Fprintf</span>(<span style="color:#a6e22e">w</span>, <span style="color:#e6db74">&#34;Hello, %s!&#34;</span>, <span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">URLParams</span>[<span style="color:#e6db74">&#34;name&#34;</span>])
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
    <span style="color:#a6e22e">goji</span>.<span style="color:#a6e22e">Get</span>(<span style="color:#e6db74">&#34;/hello/:name&#34;</span>, <span style="color:#a6e22e">hello</span>)

    <span style="color:#a6e22e">listener</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">netutil</span>.<span style="color:#a6e22e">LimitListener</span>(<span style="color:#a6e22e">bind</span>.<span style="color:#a6e22e">Default</span>(), <span style="color:#ae81ff">15</span>)
    <span style="color:#a6e22e">goji</span>.<span style="color:#a6e22e">ServeListener</span>(<span style="color:#a6e22e">listener</span>)
}
</code></pre></div><p>これを実行して再度abを実行してみます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">ss -o  state established -np | grep <span style="color:#e6db74">&#34;limit&#34;</span> | grep <span style="color:#e6db74">&#34;8000&#34;</span> | wc -l
<span style="color:#ae81ff">15</span>
</code></pre></div><p>gojiでも接続数を制限することができました。
フレームワークによって同じようにサクッとlistenerを設定できないものもあるっぽい・・ですかね。</p>
<p>以上です。</p>
<p>■ 参考</p>
<p>






<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fheartbeats.jp%2fhbblog%2f2015%2f10%2fgolang-limitlistener.html" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>








<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fmattn.kaoriya.net%2fsoftware%2flang%2fgo%2f20160713120926.htm" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>








<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fqiita.com%2fmmmm%2fitems%2ff31b15b4f80427360207" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
]]></content>
        </item>
        
        <item>
            <title>[Unity/C#] List&lt;T&gt;.ConvertAllの実行速度について</title>
            <link>https://shamaton.dev/posts/255/</link>
            <pubDate>Tue, 07 Feb 2017 13:56:54 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/255/</guid>
            <description>お世話になっております。 しゃまとんです。 開発のしているとListをよく使うのですが、色々と実装している中でリストをまとめて別の型に置き換えて</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>開発のしているとListをよく使うのですが、色々と実装している中でリストをまとめて別の型に置き換えて使いたいなー
という事がありました（親クラスのリストを小クラスで利用したいとか？）</p>
<p>調べているとどうやらListにはまとめて変換して、そのListを返してくれるConvertAllという
機能が用意されているようで便利そうだと思い利用しております。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fdocs.microsoft.com%2fja-jp%2fdotnet%2fapi%2fsystem.collections.generic.list-1.convertall%3fview%3dnet-5.0" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>ただなんとなくですが、Allとか書いてるし処理重そうだな〜、あんまり使わない方がいいかな・・・とちょっと気になったので、
実行速度を簡単に調べてみました。</p>
<p>検証コードはこんな感じ。List<!-- raw HTML omitted -->をList<!-- raw HTML omitted -->にしてます。<br>
要素を10、100、1000、10000、100000と変えて実行してみました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">using</span> UnityEngine;
<span style="color:#66d9ef">using</span> System.Collections;
<span style="color:#66d9ef">using</span> System.Collections.Generic;

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ConvTest</span> : MonoBehaviour {

  <span style="color:#66d9ef">private</span> List&lt;<span style="color:#66d9ef">float</span>&gt; list = <span style="color:#66d9ef">new</span> List&lt;<span style="color:#66d9ef">float</span>&gt;();

  <span style="color:#75715e">// Use this for initialization
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">void</span> Start () {
    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i = <span style="color:#ae81ff">0</span>; i &lt; <span style="color:#ae81ff">100000</span>; i++) {
      list.Add(Random.Range(<span style="color:#ae81ff">1f</span>, <span style="color:#ae81ff">100000f</span>));
    }
    StartCoroutine(check());
  }

  <span style="color:#66d9ef">private</span> IEnumerator check() {

    <span style="color:#66d9ef">int</span> count = <span style="color:#ae81ff">0</span>;
    <span style="color:#66d9ef">while</span> (count++ &lt; <span style="color:#ae81ff">5</span>) {
      <span style="color:#66d9ef">float</span> startTime = Time.realtimeSinceStartup;
      <span style="color:#75715e">// all convert
</span><span style="color:#75715e"></span>      list.ConvertAll(content =&gt; (<span style="color:#66d9ef">int</span>)content);
      <span style="color:#66d9ef">float</span> msec = (Time.realtimeSinceStartup - startTime) * <span style="color:#ae81ff">1000f</span>;
      Debug.Log(msec + <span style="color:#e6db74">&#34; msec&#34;</span>);
      <span style="color:#66d9ef">yield</span> <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> WaitForSeconds(<span style="color:#ae81ff">1f</span>);
    }

  }
}
</code></pre></div><p>実行結果のまとめはこんな感じでした。<br>
なぜか2回めからのConvertが早くなっています。なぜでしょうか・・・？ただ、要素数が増えるとその辺もなくなってしまうようです。</p>
<table>
<thead>
<tr>
<th></th>
<th>10</th>
<th>100</th>
<th>1000</th>
<th>10000</th>
<th>100000</th>
</tr>
</thead>
<tbody>
<tr>
<td>1回目</td>
<td>0.3820658</td>
<td>0.4429817</td>
<td>0.3560781</td>
<td>0.8010864</td>
<td>4.02391</td>
</tr>
<tr>
<td>2回目</td>
<td>0.003099442</td>
<td>0.01096725</td>
<td>0.0808239</td>
<td>0.7491112</td>
<td>6.491899</td>
</tr>
<tr>
<td>3回目</td>
<td>0.002861023</td>
<td>0.01502037</td>
<td>0.1180172</td>
<td>0.4088879</td>
<td>8.046865</td>
</tr>
<tr>
<td>4回目</td>
<td>0.003814697</td>
<td>0.01096725</td>
<td>0.08487701</td>
<td>0.7128716</td>
<td>7.349968</td>
</tr>
<tr>
<td>5回目</td>
<td>0.004291534</td>
<td>0.01192093</td>
<td>0.08678436</td>
<td>0.7219315</td>
<td>7.339954</td>
</tr>
</tbody>
</table>
<p>※単位はmsec</p>
<p>現状の使い方はそんなに要素数は多くないので、2回めから早くなる恩恵にあやかりつつ、使っていこうかなと思います。</p>
<p>以上です。</p>
]]></content>
        </item>
        
        <item>
            <title>[Golang] SideCIを設定してコードレビューしてもらう</title>
            <link>https://shamaton.dev/posts/364/</link>
            <pubDate>Sat, 28 Jan 2017 14:44:10 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/364/</guid>
            <description>お世話になっております。 しゃまとんです。 SideCIというサービスをご存知でしょうか。 SideCIはGitHubと連携し、自動的に解析ツール</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>SideCIというサービスをご存知でしょうか。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fsider.review%2fja" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>SideCIはGitHubと連携し、自動的に解析ツールを利用したコードレビューを行うサービスで、<br>
公開しているリポジトリだと無料で全機能を使うことができるようです。</p>
<p>無料だし、これは使うしか無い！ということで試しにレビューしてもらいました。</p>
<p>とりあえずSideCIのホームページにアクセスして、「Githubで無料会員登録」をします。<br>
すると、連携の認証に進みます。</p>
<figure>
    <img src="/images/posts/2017/01/recognize.png"/> 
</figure>

<p>問題なければ、Authorize applicationするとパスワードを聞かれるので対応します。
その後SideCIの管理ページに飛ばされ、解析対象を選択する画面になります。言語のところにgopherがいますね。</p>
<figure>
    <img src="/images/posts/2017/01/select.png"/> 
</figure>

<p>選択すると、（おそらく）デフォルトで設定された解析が始まります。解析が終わると、
goの場合は<a href="http://golang-jp.org/pkg/code.google.com/p/go.tools/cmd/vet/">go_vet</a>と<a href="https://github.com/golang/lint">golint</a>の結果が表示されています。golintに関しての表示を見てみるとこんな感じです。
zeroformatter対応しないとダメですね (；・∀・)</p>
<figure>
    <img src="/images/posts/2017/01/detail.png"/> 
</figure>

<p>上記はSideCIの管理画面からですが、GithubでPull Requestしたときにも同様に解析をおこなってくれます。リポジトリに対して特に何かしたわけではないのですが、勝手に解析してくれるようになっていました。</p>
<figure>
    <img src="/images/posts/2017/01/run_github.png"/> 
</figure>

<p>結果↓</p>
<figure>
    <img src="/images/posts/2017/01/result.png"/> 
</figure>

<p>このように簡単な手順だけで無料で解析してくれるようになりました。積極的に利用することでプロダクトの品質を高めてくれそうですね！</p>
<p>SideCIは日本語版も[提供開始した][9]そうです。英語苦手だけど、コードレビューされたい方は利用してみてはいかがでしょうか。<br>
以上です。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fgamebiz.jp%2f%3fp%3d176423" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

]]></content>
        </item>
        
        <item>
            <title>[Docker] prometheusをとりあえず動かしてみた</title>
            <link>https://shamaton.dev/posts/363/</link>
            <pubDate>Thu, 19 Jan 2017 15:01:38 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/363/</guid>
            <description>お世話になっております。 しゃまとんです。 少し前にTLにqiita経由で流れてきたprometheusについてずっと気になっていたので 触ってみ</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>少し前にTLにqiita経由で流れてきたprometheusについてずっと気になっていたので<br>
触ってみました。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fprometheus.io%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>読みはプロメテウスでしょうか、、、最近注目を浴びている監視ツールだそうです。<br>
githubで公開されてて、スター数がすごいです。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fprometheus%2fprometheus" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>で、prmetheusがどんなものかですが前述の通りqiitaであったり、他の方が記事にしてくださっているので、
そちらを参照していただくとよいです。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fqiita.com%2fsugitak%2fitems%2fff8f5ad845283c5915d2" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>とりあえず自分は動かしてみたいと思ったので、簡単な構成でやってみたメモになります。
構成はprometheusをdockerで動作（ローカルPC）させ、<a href="https://dply.co">dply</a>で用意したホストを監視させました。</p>









<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fshamaton.dev%2fposts%2f341" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>※ 用語が間違ってたらごめんなさい</p>
<p>■ nodeとしてdplyでサーバを作成<br>
dplyでなんでもお好きなOSでサーバを作成します。dplyが嫌という方は用意できれば何でも良いと思います。<br>
作成後、node_exporterを取得し実行します。手順はこんな感じです。<br>
※ 最新版は<a href="https://prometheus.io/download/">こちら</a>で確認してください</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e"># 取得して解凍</span>
wget https://github.com/prometheus/node_exporter/releases/download/v0.13.0/node_exporter-0.13.0.linux-amd64.tar.gz
tar -zxvf node_exporter-0.13.0.linux-amd64.tar.gz
<span style="color:#75715e"># 実行</span>
cd node_exporter-0.13.0.linux-amd64
./node_exporter
</code></pre></div><p>実行すると、9100でlistenします。</p>
<figure>
    <img src="/images/posts/2017/01/exec_node.png"/> 
</figure>

<p>■ Prometheusを起動する<br>
prometheusは<a href="https://hub.docker.com/u/prom/">dockerhub</a>で直ぐ使えるものが用意されているため、すぐに使い始めることができます。
（docker run -p 9090:9090 prom/prometheus）<br>
今回はnodeとして立ち上がっているサーバを登録するため、設定ファイルを作成して利用するようにします。</p>
<p>とりあえずベースファイルを取得します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">curl -O https://raw.githubusercontent.com/prometheus/prometheus/master/documentation/examples/prometheus.yml
</code></pre></div><p>取得したymlファイルに追記します。（一番下の数行です）</p>
<script type="application/javascript" src="https://gist.github.com/shamaton/86a8f21503c8ebf69dcedb9d2964059c.js"></script>

<p>準備ができたので、下記コマンドで実行してみます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">docker run -p 9090:9090 -v <span style="color:#e6db74">${</span>working_directory<span style="color:#e6db74">}</span>/prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheus
</code></pre></div><p>9090でlistenしているので、アクセスすると画面が表示されるます。プルダウンからnode_cpuを選んでExecuteすると、グラフが表示されるようになります。consoleにはdplyで定義したnodeに関しての値が表示され、取得出来ていることがわかります。</p>
<figure>
    <img src="/images/posts/2017/01/node_cpu.png"/> 
</figure>

<figure>
    <img src="/images/posts/2017/01/prometheus.png"/> 
</figure>

<p>あとは例えば、ノードを追加してグループにしたりとか、アラート（alertmanager）を設定して通知したりとか・・・DBサーバも監視対象にしたりとか・・・でしょうか。<br>
AWS等クラウドサービスにも対応しているようなので、少しづつ理解しながら使えるようになれればいいなと思います。</p>
<p>便利そうなニオイがプンプンしますね！<br>
以上です。</p>
<p>■ 参考







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fpocketstudio.jp%2flog3%2f2015%2f02%2f11%2fwhat_is_prometheus_monitoring%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>








<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fqiita.com%2fhana_shin%2fitems%2f16a7ee88ef502a3fc0eb" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
]]></content>
        </item>
        
        <item>
            <title>[Unity5.5] プロジェクトビューにアセットのファイルサイズを表示する</title>
            <link>https://shamaton.dev/posts/362/</link>
            <pubDate>Thu, 12 Jan 2017 15:01:12 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/362/</guid>
            <description>お世話になっております。 しゃまとんです。 （久しぶりのUnityに関する記事だ(*´∀｀)） こちらの記事ですが、kyusyukeigoさんが2</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>（久しぶりのUnityに関する記事だ(*´∀｀)）</p>
<p>こちらの記事ですが、<a href="https://twitter.com/kyusyukeigo">kyusyukeigo</a>さんが2013からブログにて公開されている、
「プロジェクトビューにファイルサイズを表示する」という拡張エディタをUnity5.5用に書き換えたものになります。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fanchan828.hatenablog.jp%2fentry%2f2013%2f05%2f12%2f044215" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>ですので、5.4までは上記リンク先を参照してくださるのがよいかと思います。</p>
<p>関係ねぇ！とにかく表示させろい！って方はご利用くださいませ。<br>
こんな感じで表示されるようになります。</p>
<figure>
    <img src="/images/posts/2017/01/disp_size.png"/> 
</figure>

<p>書き換えた理由としては試したらエラーが出てしまって動かなくなっていたためです。<br>
<a href="http://tsubakit1.hateblo.jp/entry/2016/11/25/235315">この辺とか</a>が理由になっていたり。とりあえず同じように表示されるようになったか・・な・・？</p>
<script type="application/javascript" src="https://gist.github.com/shamaton/5300cc240f3c4d4b132cd9b737969523.js"></script>

<p>使うときはEditorフォルダ配下に入れるようにしてくださいね〜<br>
以上です。</p>
]]></content>
        </item>
        
        <item>
            <title>[golang] zeroformatterでdelay_deserializeできるようにしてみました</title>
            <link>https://shamaton.dev/posts/352/</link>
            <pubDate>Fri, 06 Jan 2017 15:22:32 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/352/</guid>
            <description>お世話になっております。 しゃまとんです。 去年末にgolangでzeroformatterを作り始めたのを記事にしました。 ありがたいことに、い</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>去年末にgolangでzeroformatterを作り始めたのを記事にしました。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fshamaton%2fzeroformatter" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>ありがたいことに、いいねをしてくださっていて嬉しい限りです。<br>
今回はちょっとした進捗報告的な感じです。</p>









<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fshamaton.dev%2fposts%2f249" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>今回は前回の記事で課題にしていた、遅延してシリアライズするというものに対応してみました。
どうやればいいかなーともやもや考えていたのですが、一旦やってみるかという感じで実装しました。</p>
<p>DelayDeserializeを呼ぶと、遅延評価用のデシリアライザを生成して返します。使えるのはindexが存在するデータを想定していて、
golangではstructを利用することにしています。対象のデータが大きいときに後から評価したい場合に有効かもしれません。</p>
<p>READMEに簡単に記載しているのですが、下記みたいな感じで使います。<br>
delay deserializeという英語が正しいのか謎です。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>

<span style="color:#f92672">import</span> (
  <span style="color:#e6db74">&#34;github.com/shamaton/zeroformatter&#34;</span>
  <span style="color:#e6db74">&#34;log&#34;</span>
)

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">how_to_use</span>(<span style="color:#a6e22e">b</span> []<span style="color:#66d9ef">byte</span>) {
    <span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Struct</span> <span style="color:#66d9ef">struct</span> {
        <span style="color:#a6e22e">String</span> <span style="color:#66d9ef">string</span>
    }

    <span style="color:#a6e22e">r</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">Struct</span>{}
    <span style="color:#a6e22e">dds</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">zeroformatter</span>.<span style="color:#a6e22e">DelayDeserialize</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">r</span>, <span style="color:#a6e22e">b</span>)

    <span style="color:#75715e">// 要素を渡してデシリアライズ
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">dds</span>.<span style="color:#a6e22e">DeserializeByElement</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">String</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
        <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
    }

    <span style="color:#75715e">// もしくはインデックスを指定してデシリアライズ
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">dds</span>.<span style="color:#a6e22e">DeserializeByIndex</span>(<span style="color:#ae81ff">0</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
      <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
    }
}
</code></pre></div><p>ちょっとずつ多言語対応拡がってるみたいですね！<br>
対応したくさせるzeroformatterすごいです。</p>
<p>次はタグ指定できるようにしてみるかな。<br>
あ、知見・ご意見・まさかり募集しておりますので、是非ご連絡くださいませ！</p>
<p>以上です。</p>
]]></content>
        </item>
        
        <item>
            <title>[2016/12] 進捗報告</title>
            <link>https://shamaton.dev/posts/342/</link>
            <pubDate>Tue, 03 Jan 2017 13:00:48 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/342/</guid>
            <description>2016年12月の進捗報告まとめです。 [WIP] call dragon and fly to the sky. 呼び出して、空に飛び立つまでの流れ的なやつ。#indiedev #gamedev pic.twitter.com/I4f9dnLXlI &amp;mdash; しゃまとん (@shamaton) December 30, 2016</description>
            <content type="html"><![CDATA[<p>2016年12月の進捗報告まとめです。</p>
<p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">[WIP] call dragon and fly to the sky.<br>呼び出して、空に飛び立つまでの流れ的なやつ。<a href="https://twitter.com/hashtag/indiedev?src=hash&amp;ref_src=twsrc%5Etfw">#indiedev</a> <a href="https://twitter.com/hashtag/gamedev?src=hash&amp;ref_src=twsrc%5Etfw">#gamedev</a> <a href="https://t.co/I4f9dnLXlI">pic.twitter.com/I4f9dnLXlI</a></p>&mdash; しゃまとん (@shamaton) <a href="https://twitter.com/shamaton/status/814835823057072128?ref_src=twsrc%5Etfw">December 30, 2016</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">[WIP] talking test.<br>しゃべらせてみました。<a href="https://twitter.com/hashtag/gamedev?src=hash&amp;ref_src=twsrc%5Etfw">#gamedev</a> <a href="https://twitter.com/hashtag/indiedev?src=hash&amp;ref_src=twsrc%5Etfw">#indiedev</a> <a href="https://t.co/38PgxBsHL3">pic.twitter.com/38PgxBsHL3</a></p>&mdash; しゃまとん (@shamaton) <a href="https://twitter.com/shamaton/status/812327500776775680?ref_src=twsrc%5Etfw">December 23, 2016</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">[WIP] area change using simple fade. he goes into cave, but leaves at once. : )<br>エリア切り替え。シンプルなフェードで。<a href="https://twitter.com/hashtag/indiedev?src=hash&amp;ref_src=twsrc%5Etfw">#indiedev</a> <a href="https://twitter.com/hashtag/gamedev?src=hash&amp;ref_src=twsrc%5Etfw">#gamedev</a> <a href="https://t.co/j8IC5Tfkd3">pic.twitter.com/j8IC5Tfkd3</a></p>&mdash; しゃまとん (@shamaton) <a href="https://twitter.com/shamaton/status/807965005349986305?ref_src=twsrc%5Etfw">December 11, 2016</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">[WIP] player is in snow world. this map is created last week.<br>先週作ってみたマップ内に配置してみました。<a href="https://twitter.com/hashtag/indiedev?src=hash&amp;ref_src=twsrc%5Etfw">#indiedev</a> <a href="https://twitter.com/hashtag/gamedev?src=hash&amp;ref_src=twsrc%5Etfw">#gamedev</a> <a href="https://t.co/4C7ahHET0U">pic.twitter.com/4C7ahHET0U</a></p>&mdash; しゃまとん (@shamaton) <a href="https://twitter.com/shamaton/status/805046540410597376?ref_src=twsrc%5Etfw">December 3, 2016</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</p>
<p>■ 11月分はこちらです</p>









<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fshamaton.dev%2fposts%2f332" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

]]></content>
        </item>
        
        <item>
            <title>dplyのボタンつくってみた</title>
            <link>https://shamaton.dev/posts/341/</link>
            <pubDate>Wed, 28 Dec 2016 14:49:32 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/341/</guid>
            <description>お世話になっております。 しゃまとんです。 dplyという2時間無料で使えるVPSサービスがはじまったそうです。 お金を払えば、長期間維持すること</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p><a href="https://dply.co">dply</a>という2時間無料で使えるVPSサービスがはじまったそうです。<br>
お金を払えば、長期間維持することが可能みたいですがとりあえずサーバで何か検証したい場合に使えそうですね。</p>
<p>dplyとはなんぞやについては下記を素敵に参照してくださると幸いです。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fuzulla.hateblo.jp%2fentry%2f2016%2f11%2f28%2f181949" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>自分もとりあえず触ってみた中で、使い捨てな感じでやっているとセットアップがやはりめんどくさいなということで、初期化スクリプト的なものを書く流れになったのですが、dplyではサーバのセットアップ手順を含めたボタンを作成して、共有できるそうです。</p>
<p>これ →<a href="https://dply.co/button">https://dply.co/button</a></p>
<p>ということで、ボタンをつくってみました。</p>
<p><img src="https://dply.co/b/GuQRnugy" alt="https://dply.co/b.svg"></p>
<p>ボタンを押すとdplyに飛びます。locationやplanを設定しCREATE SERVERを押すと、以下の環境が作成されます。<br>
・CentOS6<br>
・go1.7.4/gitをインストール済<br>
・gitはcompletion対応させている（補完のみ）</p>
<p>雑なのですが、起動時に追加しているスクリプトは下記の通りです。</p>
<script type="application/javascript" src="https://gist.github.com/shamaton/c503424c3b5c7e89fc9bf6b77dba8205.js"></script>

<p>上記のボタンを押したあとの画面に表示されているスクリプトと同じです。<br>
サーバが立ち上がると追加したスクリプトが処理されているので、ログを見て確認することができます。詳細は<a href="https://dply.co/help/cloud-init">こちら</a>にあります（英語）。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">tail -f /var/log/cloud-init-output.log
</code></pre></div><p>現在（2016/12）は日本リージョンがないみたいなので、使うならシンガポールが一番近い感じですね。</p>
<p>サクサクっと使える環境が用意できてありがたいですね！<br>
以上です。</p>
]]></content>
        </item>
        
        <item>
            <title>[golang] zeroformatterを作成してみる</title>
            <link>https://shamaton.dev/posts/249/</link>
            <pubDate>Wed, 21 Dec 2016 15:14:56 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/249/</guid>
            <description>お世話になっております。 しゃまとんです。 タイトルの通りですが、ZeroFormatterをGo言語で使えるようにしたかったので、作ってみてい</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>タイトルの通りですが、ZeroFormatterをGo言語で使えるようにしたかったので、作ってみています。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fshamaton%2fzeroformatter" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>そもそもZeroFormatterとは何ぞやというところですが、infinityにFastなDeserializerです。<br>
C#でserialize/deserializeを爆速で行えるようで、これはすごい・・・！と思った次第です。</p>
<p>詳細はgithubで。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fneuecc%2fZeroFormatter" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>そんなZeroFormatterはもちろんUnityでも使用することができます（zfc等の若干の利用手順があるっぽい）。
作者の<a href="https://twitter.com/neuecc">neuecc</a>さんが所属されている<a href="http://grani.jp/">グラニ</a>さんで使われているはずなので、実績はこれから積まれていくでしょう。</p>
<p>現状、多言語対応は進行中（有志によって）なので、他言語で使いたい場合は待つか、
フォーマットが公開されているので実装する必要があります。<br>
golangでも誰かやってくれないかなーと思っていたのですが、
いなかったのでやり始めてみたのがきっかけです。使えたら面白いんじゃないか的な。</p>
<p>対応状況はリポジトリを見ていただくのがいいのですが、ざ
っくりいうとプリミティブな型に関してはある程度対応するところまで出来ました。
それと少しばかりのチューニングをし、ざっくりとしたベンチマークを取ってみました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">BenchChild</span> <span style="color:#66d9ef">struct</span> {
    <span style="color:#a6e22e">Int</span>    <span style="color:#66d9ef">int</span>
    <span style="color:#a6e22e">String</span> <span style="color:#66d9ef">string</span>
}

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">BenchMarkStruct</span> <span style="color:#66d9ef">struct</span> {
    <span style="color:#a6e22e">Int</span>    <span style="color:#66d9ef">int</span>
    <span style="color:#a6e22e">Uint</span>   <span style="color:#66d9ef">uint</span>
    <span style="color:#a6e22e">Float</span>  <span style="color:#66d9ef">float32</span>
    <span style="color:#a6e22e">Double</span> <span style="color:#66d9ef">float64</span>
    <span style="color:#a6e22e">Bool</span>   <span style="color:#66d9ef">bool</span>
    <span style="color:#a6e22e">String</span> <span style="color:#66d9ef">string</span>
    <span style="color:#a6e22e">Array</span>  []<span style="color:#66d9ef">int</span>
    <span style="color:#a6e22e">Map</span>    <span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">int</span>
    <span style="color:#a6e22e">Child</span>  <span style="color:#a6e22e">BenchChild</span>
}

<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">s</span> = <span style="color:#a6e22e">BenchMarkStruct</span>{
    <span style="color:#a6e22e">Int</span>:    <span style="color:#f92672">-</span><span style="color:#ae81ff">123</span>,
    <span style="color:#a6e22e">Uint</span>:   <span style="color:#ae81ff">456</span>,
    <span style="color:#a6e22e">Float</span>:  <span style="color:#ae81ff">1.234</span>,
    <span style="color:#a6e22e">Double</span>: <span style="color:#ae81ff">6.789</span>,
    <span style="color:#a6e22e">Bool</span>:   <span style="color:#66d9ef">true</span>,
    <span style="color:#a6e22e">String</span>: <span style="color:#e6db74">&#34;this is text.&#34;</span>,
    <span style="color:#a6e22e">Array</span>:  []<span style="color:#66d9ef">int</span>{<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">9</span>},
    <span style="color:#a6e22e">Map</span>:    <span style="color:#66d9ef">map</span>[<span style="color:#66d9ef">string</span>]<span style="color:#66d9ef">int</span>{<span style="color:#e6db74">&#34;this&#34;</span>: <span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#34;is&#34;</span>: <span style="color:#ae81ff">2</span>, <span style="color:#e6db74">&#34;map&#34;</span>: <span style="color:#ae81ff">3</span>},
    <span style="color:#a6e22e">Child</span>:  <span style="color:#a6e22e">BenchChild</span>{<span style="color:#a6e22e">Int</span>: <span style="color:#ae81ff">123456</span>, <span style="color:#a6e22e">String</span>: <span style="color:#e6db74">&#34;this is struct of child&#34;</span>},
}
</code></pre></div><p>比較は日本でよく使われているっぽいMessagePackと。<br>
ちなみにパッケージは<code>vmihailenco/msgpack</code>を使いました。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fvmihailenco%2fmsgpack" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">BenchmarkPackZeroformatter-4          500000          2919 ns/op         760 B/op         14 allocs/op
BenchmarkPackMsgpack-4                200000          6416 ns/op        1000 B/op         14 allocs/op
BenchmarkUnpackZeroformatter-4        300000          3482 ns/op         976 B/op         29 allocs/op
BenchmarkUnpackMsgpack-4              200000          8353 ns/op        1024 B/op         33 allocs/op
</code></pre></div><p>結果としてはMsgPackよりも処理速度はおよそ半分ぐらいになりました。
今後の更新で変わるかもしれないのですが。。。</p>
<p>今後としては、本家がデシリアライズしない仕組みになっているので、
こちらでいい感じに&hellip;は難しいので明示的にでもやれるようにしようかなと思っています。
それとタグ指定で構造体の特定のプロパティのみ評価対象にできるようにしたいと思っています。</p>
<p>それとmapのシリアライズがMsgPackに比べて遅い感じがあるので、改善する予定です。<br>
ということで報告みたいな感じですが、以上です。</p>
]]></content>
        </item>
        
        <item>
            <title>[Docker] CentOS6でMySQLコンテナを作成してみる</title>
            <link>https://shamaton.dev/posts/318/</link>
            <pubDate>Tue, 13 Dec 2016 02:30:28 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/318/</guid>
            <description>お世話になっております。 しゃまとんです。 前回はRedisと連携をやってみたので、今回はMySQLコンテナを作ってみようと思います。 MySQL</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>前回はRedisと連携をやってみたので、今回はMySQLコンテナを作ってみようと思います。<br>
MySQLは試しにAWSのRDSでデフォルトっぽい5.6.27（2016/12/13時点）で作成してみます。</p>
<p>OSは前回と同じでCentOS6を使います。<br>
ちなみに前回の記事はこちら</p>









<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fshamaton.dev%2fposts%2f310" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>MySQLは公式でもイメージが用意されていますが、Dockerfileを見てもややこしい印象。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fdocker-library%2fmysql%2fblob%2fa03bccc7dc259d817643b0ca0bfcf7ce52ea3906%2f5.6%2fDockerfile" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>で他の方々のを拝見している感じだと</p>
<p>・my.cnf（MySQLの設定ファイル）<br>
・mysql用のスクリプト</p>
<p>を事前に作成するなどして、コンテナ起動させている感じだな〜ということで参考にしつつDockerfileから。</p>
<script type="application/javascript" src="https://gist.github.com/shamaton/ed0b7726b70c90374c6746470d6afbe0.js"></script>

<p>CentOS6では標準でインストールされるMySQLが古いためrpmを取得してMySQL公式のリポジトリを有効にします。<br>
そして、指定のバージョンでyum installします。<br>
もしかしてmakeとかしないと行けないのかと思っていましたが、公式ありがとう。</p>
<p>そして、MySQLの設定ファイルを置き換えて、起動用スクリプトをコピーします。<br>
最後にPORTを設定し、スクリプトを実行するようにします。</p>
<p>my.cnfはでデフォルトで用意されているものにエンコード設定などを少し追加しました。<br>
なので純粋に起動確認するだけなら、置き換えはしなくていいと思います。</p>
<script type="application/javascript" src="https://gist.github.com/shamaton/c0b6507ef4eabb1a22414b9521e268cb.js"></script>

<p>そして、起動スクリプトです。起動時にファイルがあるか確認してない場合、初期化を実行させるようにしました。<br>
今回は初期化とユーザー、データベース作成までおこなってみました。<br>
sleepは進捗がわかりやすいようにわざと入れています。</p>
<script type="application/javascript" src="https://gist.github.com/shamaton/0caba307478c78f0faadaf7362c35346.js"></script>

<p>準備が整ったので、実行してみます。<br>
成功するとコンテナが生成されmysqlのプロセスが起動した状態になります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"> docker build -t mysql56 .
Sending build context to Docker daemon 13.31 kB
... skip ...

$ docker run --name mysql_test mysql56
initialize...
Installing MySQL system tables... <span style="color:#f92672">[</span>Warning<span style="color:#f92672">]</span> TIMESTAMP with implicit DEFAULT value is deprecated. 
Please use --explicit_defaults_for_timestamp server option <span style="color:#f92672">(</span>see documentation <span style="color:#66d9ef">for</span> more details<span style="color:#f92672">)</span>.

... skip ...

mysqld_safe Logging to <span style="color:#e6db74">&#39;/var/log/mysqld.log&#39;</span>.
mysqld_safe Starting mysqld daemon with databases from /var/lib/mysql
</code></pre></div><p>もう1つターミナルを開いて、中身を覗いてみます。</p>
<figure>
    <img src="/images/posts/2016/10/docker_mysql_check.png"/> 
</figure>

<p>MySQLが起動してユーザーとデータベースが作成されているのが確認できました。<br>
このコンテナですが、消してしまうとデータが全て消えてしまいます。<br>
データを残して他コンテナで使いたい場合は別でデータ保存部分を用意する必要があるようです。
またこの辺もやってみたいと思います。</p>
<p>以上です。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fshamaton%2fdocker-mysql56-centos6" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>■ 参考</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fj-caw.co.jp%2fblog%2f%3fp%3d1583" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

]]></content>
        </item>
        
        <item>
            <title>[2016/11] 進捗報告</title>
            <link>https://shamaton.dev/posts/332/</link>
            <pubDate>Thu, 01 Dec 2016 13:16:10 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/332/</guid>
            <description>2016年11月の進捗報告まとめです。 [WIP] I created prototype map using by Nostalgia2. Nostalgia2を使って、マップを作成してみました。#indiedev #gamedev pic.twitter.com/cQuhmWmZhr &amp;mdash; しゃま</description>
            <content type="html"><![CDATA[<p>2016年11月の進捗報告まとめです。</p>
<p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">[WIP] I created prototype map using by Nostalgia2.<br>Nostalgia2を使って、マップを作成してみました。<a href="https://twitter.com/hashtag/indiedev?src=hash&amp;ref_src=twsrc%5Etfw">#indiedev</a> <a href="https://twitter.com/hashtag/gamedev?src=hash&amp;ref_src=twsrc%5Etfw">#gamedev</a> <a href="https://t.co/cQuhmWmZhr">pic.twitter.com/cQuhmWmZhr</a></p>&mdash; しゃまとん (@shamaton) <a href="https://twitter.com/shamaton/status/802862806982791168?ref_src=twsrc%5Etfw">November 27, 2016</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">[WIP] Taking off effect and Landing effect. Images are temporary.<br>離陸と着地時の演出的なもの。もろもろ仮です。<a href="https://twitter.com/hashtag/indiedev?src=hash&amp;ref_src=twsrc%5Etfw">#indiedev</a>  <a href="https://twitter.com/hashtag/gamedev?src=hash&amp;ref_src=twsrc%5Etfw">#gamedev</a> <a href="https://t.co/bMjah7vAb6">pic.twitter.com/bMjah7vAb6</a></p>&mdash; しゃまとん (@shamaton) <a href="https://twitter.com/shamaton/status/800350039176409088?ref_src=twsrc%5Etfw">November 20, 2016</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">[WIP] Switch between vertical and horizontal cameras.<br>2パターンのカメラを切り替え表示してみました。<a href="https://twitter.com/hashtag/indiedev?src=hash&amp;ref_src=twsrc%5Etfw">#indiedev</a> <a href="https://twitter.com/hashtag/gamedev?src=hash&amp;ref_src=twsrc%5Etfw">#gamedev</a> <a href="https://t.co/AFR5EOk3bU">pic.twitter.com/AFR5EOk3bU</a></p>&mdash; しゃまとん (@shamaton) <a href="https://twitter.com/shamaton/status/797777832617201664?ref_src=twsrc%5Etfw">November 13, 2016</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">[WIP] Flying in the sky!! Map image is temporary.<br>空を飛んでいる感じ。マップは仮です。<a href="https://twitter.com/hashtag/indiedev?src=hash&amp;ref_src=twsrc%5Etfw">#indiedev</a> <a href="https://twitter.com/hashtag/gamedev?src=hash&amp;ref_src=twsrc%5Etfw">#gamedev</a> <a href="https://t.co/LbOlfA0ue1">pic.twitter.com/LbOlfA0ue1</a></p>&mdash; しゃまとん (@shamaton) <a href="https://twitter.com/shamaton/status/794897088668528640?ref_src=twsrc%5Etfw">November 5, 2016</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</p>
<p>■ 10月分はこちら</p>









<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fshamaton.dev%2fposts%2f317" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

]]></content>
        </item>
        
        <item>
            <title>[Docker] golangとredisのコンテナを繋いでみた</title>
            <link>https://shamaton.dev/posts/310/</link>
            <pubDate>Tue, 22 Nov 2016 16:22:28 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/310/</guid>
            <description>お世話になっております。 しゃまとんです。 先月のDocker触ってみた話に引き続いて、作ったgolang環境からredisに繋いでみるテストを</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>先月のDocker触ってみた話に引き続いて、作ったgolang環境からredisに繋いでみるテストをしました。
今回は複数のコンテナでの連携的なやつです。</p>









<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fshamaton.dev%2fposts%2f305" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>連携にはdocker-composeという仕組み（？）を使うといい感じにやってくれるらしいです。
docker-composeを使うにはdocker-compose.ymlを作成する必要があります。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fdocs.docker.com%2fcompose%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>golangからredisに接続して操作するには外部のパッケージが必要なので、自分で作成したimageを利用して、
環境を用意するDockerfileを作成します。確認用のコードは記事にしたものをそのまま使います。</p>









<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fshamaton.dev%2fposts%2f141" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>まずはDockerfileです。<br>
やっているのは、dockerhubからimageを取得し、redigoをgo getし、確認用コードをコピーします。
redigoでの接続先はdockerの状況で多少異なるかもしれません。（特に意識しなければ、192.168.99.100:6379）</p>
<script type="application/javascript" src="https://gist.github.com/shamaton/9805b8cc93180798337d42e144ba393b.js"></script>

<p>次にdocker-compose.ymlです。<br>
redisはイメージから取得（image）、go-redisはdockerfileから作成する設定（build）にします。
そしてredisにlinkするように設定します。</p>
<script type="application/javascript" src="https://gist.github.com/shamaton/39278b6ccbb9bbadceabb510a87b393b.js"></script>

<p>あとはtest_redis.goを用意したら、イメージとコンテナを作成していきます。まずはイメージをビルドします。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ cd golang-redis
$ docker-compose build&lt;
</code></pre></div><p>実行すると、go_redisのイメージ生成が行われます。（名前がちょっと変）</p>
<figure>
    <img src="/images/posts/2016/10/images.png"/> 
</figure>

<p>それではdocker-composeを利用して、コンテナを起動します。
redisのイメージがローカルにない場合は、取得しにいきます。
今回はrunの後にgo_redisを指定して生成したコンテナに接続するようにしています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">docker-compose run go_redis bash
</code></pre></div><p>ターミナル表示が切り替わるので、テストコードを実行してみます。</p>
<figure>
    <img src="/images/posts/2016/10/test_redis.png"/> 
</figure>

<p>こんな感じで接続できました。docker-composeを使うと簡単に複数のコンテナを組み合わせて使えるし、
構成もサクッと変更できて便利ですね。</p>
<p>今回もリポジトリにしておいたので、ご自由にお使いくださいませ。<br>
以上です。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fshamaton%2fdocker-goredis-centos6" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

]]></content>
        </item>
        
        <item>
            <title>[Unity] Nostalgia2 – 2Dマップエディタを触ってみた</title>
            <link>https://shamaton.dev/posts/336/</link>
            <pubDate>Sat, 19 Nov 2016 13:49:27 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/336/</guid>
            <description>お世話になっております。 しゃまとんです。 （本記事はケットシーウェアさんのキャンペーンに関連した記事になります） 今回はUnityのアセットを紹</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>（本記事はケットシーウェアさんのキャンペーンに関連した記事になります）</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fcaitsithware.com%2fwordpress%2farchives%2f1989" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>今回はUnityのアセットを紹介したいと思います。<br>
Nostalgia2という2Dマップを作ることができるエディタ拡張のアセットです。</p>
<iframe style="width: 600px; height: 130px; border: 0px;" src="https://api.assetstore.unity3d.com/affiliate/embed/package/70610/widget-wide?aid=1100lGtC"></iframe>
<p>まだあまり深く使えていないので、初心者がタイルマップエディタを触ってみて感じたぐらいのニュアンスで受け取って頂けるとよいかと思います。</p>
<p>特徴としてRPGツクールやウディタのオートタイル規格素材が使えます。<br>
自分はこの辺の仕組みを全く知らなかったのですが、ルールに沿って素材作成をされたものを使うと配置時にいい感じに設置してくれました。</p>
<p>オートタイルって何ぞやという方は、この辺を見ると理解できそうです。<br>
<a href="http://www.silversecond.com/WolfRPGEditor/Help/06material.html">ウディタ – 素材規格</a><br>
<a href="https://tkool.jp/products/rpgvx/material">RPGツクール – 素材規格</a></p>
<p>使い方はアセット製作者のcaitsithwareさんがムービーで紹介してくださっています。</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/rOE4arr53C0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p><a href="http://caitsithware.com/wordpress/assetstore/nostalgia/tutorial">チュートリアル</a>は2つあってどっちも丁寧に説明されているので見ると理解が進むと思います。</p>
<p>ここまでふむふむとお勉強をして素材を用意すれば、<br>
すぐにマップ配置をすることができるようになりました。素材はねくらさんのマップチップを利用させていただいています。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fnekuramap.wixsite.com%2fnekuramap" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<figure>
    <img src="/images/posts/2016/11/nostalgia_1.gif"/> 
</figure>

<p>ざっくり使い方な手順はこんな感じでしょうか。</p>
<ol>
<li>素材からタイル情報を作成</li>
<li>シーンにマップオブジェクトを配置後、1を利用して配置</li>
<li>レイヤー状にしたい場合はマップオブジェクトを複数おく</li>
</ol>
<p>アセットにはアクションゲームのサンプルがあるのですが、2Dのアクションゲームなら考えることなくサクサクと作っていけそうです。<br>
（サンプルが十分に遊べるクオリティです・・！）</p>
<p>とりあえず触ってみたいと思った方は<a href="http://caitsithware.com/wordpress/assetstore/nostalgia/demo">Webデモ</a>が用意されているので、<br>
検討されてみてはいかがでしょうか。</p>
<p>また色々と記事にできることがあれば載せたいと思います。<br>
以上です。</p>
<p>■ 参考







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fcaitsithware.com%2fwordpress%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
]]></content>
        </item>
        
        <item>
            <title>[Unity] RaycastのlayerMaskの扱い方について</title>
            <link>https://shamaton.dev/posts/327/</link>
            <pubDate>Fri, 11 Nov 2016 13:08:36 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/327/</guid>
            <description>お世話になっております。 しゃまとんです。 UnityにはRaycastという機能があり、例えばあるオブジェクトの正面にrayを発射して 別のオブ</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>UnityにはRaycastという機能があり、例えばあるオブジェクトの正面にrayを発射して<br>
別のオブジェクトが存在するかを取得することが出来ます。</p>
<p>開発でRaycastを使う必要があり、使い始めたのですが勘違いはハマりポイントらしき点があったので<br>
メモしておきたいと思います。</p>
<p>Raycastの使い方はこちらのサイトで分かりやすく説明されています。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fmegumisoft.hatenablog.com%2fentry%2f2015%2f08%2f13%2f172136" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>おそらく基本的に使うのはPhysics.Raycastということで、使っていたのですが衝突が判定されなかった<br>
のですが、LayerMaskの使い方を勘違いしておりました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">bool</span> Raycast(Vector3 origin, Vector3 direction, <span style="color:#66d9ef">float</span> maxDistance, <span style="color:#66d9ef">int</span> layerMask);
</code></pre></div><p>LayerMaskを使わなければ、Ignore RaycastにLayerを指定していないものをすべて検出されるのですが、<br>
決められたものを検出したい場合はLayerMaskを使うと思います。</p>
<p>LayerMaskには文字通りMaskらしきものを設定しないといけません。<br>
ということで、Layerの番号を取得して下記のようにしてやります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#75715e">// レイヤーの管理番号を取得
</span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> layerNo = LayerMask.NameToLayer(<span style="color:#e6db74">&#34;レイヤーの名前&#34;</span>);
<span style="color:#75715e">// マスクへの変換（ビットシフト）
</span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> layerMask = <span style="color:#ae81ff">1</span> &lt;&lt; layerNo;
</code></pre></div><p>ちなみにLayerを見てみると31まであります。多分bit管理ですよね。</p>
<figure>
    <img src="/images/posts/2016/11/layer_setting.png"/> 
</figure>

<p>簡単に確認してみました。cubeからsphereにrayを射出して当たったら色を変えます。</p>
<figure>
    <img src="/images/posts/2016/11/laycast_test.gif"/> 
</figure>

<p>最初、取得した番号をそのまま渡していたので検出がうまくいきませんでした。<br>
これで検出できるようになりました。よかったよかった。</p>
<p>サンプルにつかったのはこちらです。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fshamaton%2fLaycastSample" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>以上です。</p>
]]></content>
        </item>
        
        <item>
            <title>[Docker] docker.qcow2のサイズを小さくする回避策</title>
            <link>https://shamaton.dev/posts/326/</link>
            <pubDate>Wed, 02 Nov 2016 15:08:52 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/326/</guid>
            <description>お世話になっております。 しゃまとんです。 Docker for Macに関するちょっとしたメモです。 現状のDockerではどうやら使っていると容量がどんどん大き</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>Docker for Macに関するちょっとしたメモです。<br>
現状のDockerではどうやら使っていると容量がどんどん大きくなってしまうようです。</p>
<p>容量を一旦クリアにするには、ファイルを削除してしまうのがシンプルな解決方法みたいです。</p>
<p><a href="http://qiita.com/junkjunctions/items/ad971fd84fb8c30816d6">Docker for macでrmやrmiで消しまくってもストレージが開放されない</a></p>
<p>今あるデータを消したくないという場合は下記の方法が回避策みたいです。<br>
対応の際は自己責任でお願いします。</p>
<p>docker.qcow2というファイルに処置をするのですが、qemu-imgというコマンド使うようです。
qemu系のコマンドは最初から入ってないので、インストールします。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">brew install qemu
</code></pre></div><p>下記のコマンドを実行する場合はDockerに関連するアプリケーションは停止しておいた方がよいと思います。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">cd ~/Library/Containers/com.docker.docker/Data/com.docker.driver.amd64-linux
<span style="color:#75715e"># ファイルリネーム</span>
mv Docker.qcow2 Docker.qcow2.original
<span style="color:#75715e"># 変換</span>
qemu-img convert -O qcow2 Docker.qcow2.original Docker.qcow2
<span style="color:#75715e"># 元ファイルを削除</span>
rm Docker.qcow2.original
</code></pre></div><p>自分の環境では15G程あったのが11Gになりました。あまり小さくならなかったのですが、
参考先にもあるように環境によっては小さくなるのではないでしょうか。</p>
<p>以上です。</p>
<p>■ 参考







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fdocker%2ffor-mac%2fissues%2f371" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
]]></content>
        </item>
        
        <item>
            <title>[2016/10] 開発進捗</title>
            <link>https://shamaton.dev/posts/317/</link>
            <pubDate>Mon, 31 Oct 2016 15:09:04 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/317/</guid>
            <description>2016年10月の進捗報告まとめです。 [WIP] NPC characters appeared. But they can&amp;#39;t talk... NPCを追加しました。まだ喋れません。#indiedev #gamedev pic.twitter.com/gVTKBESeeA &amp;mdash; しゃまとん (@shamaton) October 22, 2016 [WIP] manage item.</description>
            <content type="html"><![CDATA[<p>2016年10月の進捗報告まとめです。</p>
<p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">[WIP] NPC characters appeared. But they can&#39;t talk...<br>NPCを追加しました。まだ喋れません。<a href="https://twitter.com/hashtag/indiedev?src=hash&amp;ref_src=twsrc%5Etfw">#indiedev</a> <a href="https://twitter.com/hashtag/gamedev?src=hash&amp;ref_src=twsrc%5Etfw">#gamedev</a> <a href="https://t.co/gVTKBESeeA">pic.twitter.com/gVTKBESeeA</a></p>&mdash; しゃまとん (@shamaton) <a href="https://twitter.com/shamaton/status/789840341067182080?ref_src=twsrc%5Etfw">October 22, 2016</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">[WIP] manage item. add and remove.<br>アイテムの管理始めました。追加したりなくしたり。地味な進捗。<a href="https://twitter.com/hashtag/indiedev?src=hash&amp;ref_src=twsrc%5Etfw">#indiedev</a> <a href="https://twitter.com/hashtag/gamedev?src=hash&amp;ref_src=twsrc%5Etfw">#gamedev</a> <a href="https://t.co/L3NdqmdOUx">pic.twitter.com/L3NdqmdOUx</a></p>&mdash; しゃまとん (@shamaton) <a href="https://twitter.com/shamaton/status/787298970619949057?ref_src=twsrc%5Etfw">October 15, 2016</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">[WIP] Enemy drop a treasure. What&#39;s in the box?<br>宝箱を落とすようになりました。箱の中身はなんだろな。<a href="https://twitter.com/hashtag/indiedev?src=hash&amp;ref_src=twsrc%5Etfw">#indiedev</a> <a href="https://twitter.com/hashtag/gamedev?src=hash&amp;ref_src=twsrc%5Etfw">#gamedev</a> <a href="https://t.co/uWgIRGlUJ8">pic.twitter.com/uWgIRGlUJ8</a></p>&mdash; しゃまとん (@shamaton) <a href="https://twitter.com/shamaton/status/785106991140044800?ref_src=twsrc%5Etfw">October 9, 2016</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">[WIP] Enemy was able to use magic. very hot...<br>敵が魔法を詠唱できるようにしました。<a href="https://twitter.com/hashtag/indiedev?src=hash&amp;ref_src=twsrc%5Etfw">#indiedev</a> <a href="https://twitter.com/hashtag/gamedev?src=hash&amp;ref_src=twsrc%5Etfw">#gamedev</a> <a href="https://t.co/NP2AkQyxcg">pic.twitter.com/NP2AkQyxcg</a></p>&mdash; しゃまとん (@shamaton) <a href="https://twitter.com/shamaton/status/782553192336719872?ref_src=twsrc%5Etfw">October 2, 2016</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</p>
<p>■ 9月分はこちら</p>









<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fshamaton.dev%2fposts%2f291" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

]]></content>
        </item>
        
        <item>
            <title>sourced.techというところからメールがきた</title>
            <link>https://shamaton.dev/posts/319/</link>
            <pubDate>Wed, 26 Oct 2016 23:00:18 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/319/</guid>
            <description>お世話になっております。 しゃまとんです。 今回は開発メモではないのですが、ちょっとした出来事があったので書いておきたいと思います。 ちょっと前で</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>今回は開発メモではないのですが、ちょっとした出来事があったので書いておきたいと思います。
ちょっと前ですが、一通の英語で書かれたメールが来ました。</p>
<p>英語だったので、迷惑メールの類がフィルターを通過してきたのかな〜と思いつつ、
添付ファイルもなかったので閲覧してみました。タイトルは</p>
<p>Backend Engineer at Zenly</p>
<p>バックエンドエンジニア、Zenly・・・？なんだなんだと思ったので、
ざっくりと最後までよんで見るとsourced.techのDanielさんから来てました。
いきなりURLを踏むのも怖かったのでsourcedについて調べてみると、
多分新しいスタートアップ？で今までにない採用活動を行っているみたいでした。
ちなみにZenlyは位置情報を使ったサービスを運営しているスタートアップ企業だそうです。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fzen.ly%2fja" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p><a href="http://sourced.tech/">sourced.tech</a>のサイトを見てみた感じ</p>
<ul>
<li>githubに公開されている大量のリポジトリを調べている</li>
<li>独自のアルゴリズムでコードを解析している</li>
<li>解析結果に応じて、リポジトリを管理している人にリクルートメールをする</li>
</ul>
<p>といった内容でした。メールはspam的に送っているようで他にもgithubにコードを公開している人にはメールが来ているようです。<br>
ちなみにメールを抜粋するとこんな感じです。</p>
<script type="application/javascript" src="https://gist.github.com/shamaton/3a8446d27604a4f8d0fc2fc2239bd482.js"></script>

<p>サイトにはDanielさんがLinkedin付きで載っていて、実在する人みたいだったので試しに返答をしてみました
（勿論、英語はできません）</p>
<p>英語喋れないですし、技術力もそんなにないので今回はお断りします。
的な英語を苦戦しながら書いて送ってみたところ、返答がきました。</p>
<script type="application/javascript" src="https://gist.github.com/shamaton/3b30f280e961d1512c9bf7a9d712aa59.js"></script>

<p>返信ありがとう、転職をお考えの際はいつでも相談してね。という感じで一応内容を理解していただけたようですｗ</p>
<p>ということで、sourced.tech / aiからのメールはスパムだと思わず海外企業への転職機会かもしれないので、
ちゃんと読んでみても良いかもしれません。<br>
調べてもあまり日本の記事的なものがなかったので、まだ新しい試みなのかも。</p>
<p>良い出会いかもしれない？ですね。<br>
以上です。</p>
]]></content>
        </item>
        
        <item>
            <title>iTermでいい感じにテキストを選択したい</title>
            <link>https://shamaton.dev/posts/257/</link>
            <pubDate>Thu, 20 Oct 2016 14:26:11 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/257/</guid>
            <description>お世話になっております。 しゃまとんです。 Macではデフォルトでターミナルが入っていますが、 自分はiTermというターミナルアプリケーションを</description>
            <content type="html"><![CDATA[<p><figure class="center">
    <img src="/images/posts/2016/08/iterm.jpg"/> 
</figure>

お世話になっております。<br>
しゃまとんです。</p>
<p>Macではデフォルトでターミナルが入っていますが、
自分はiTermというターミナルアプリケーションを使って普段CUI操作しています。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fiterm2.com%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>そのiTerm使っている理由は色々あるのですが、1つにウインドウ上の文字の選択をカスタマイズできるという点です。</p>
<p>ためしにプリインストールされているターミナルで時間（コロンで句切られた文字）をダブルクリックしてみると、
こんな感じで分が選択された状態になります。</p>
<figure>
    <img src="/images/posts/2016/08/term.png"/> 
</figure>

<p>おそらくこのテキストをクリックした時って、時間全体を選択してくれたほうが便利ですよね。この辺を便利さがiTermにはあります。</p>
<p>これをiTermでダブルクリックしてみると・・・全部選択された状態になります。<br>
ダブルクリックするだけなので仕事が捗りますね（多分）</p>
<figure>
    <img src="/images/posts/2016/08/iterm_1.png"/> 
</figure>

<p>さらにiTermでは、いい感じに選択してくれる設定を変更できるようになっています。<br>
Preference → General → Selection → Characters considered part of word for selection<br>
に記号が入ってると思います。そこに考慮した文字を入れてやればOKです。</p>
<figure>
    <img src="/images/posts/2016/08/iterm_2.png"/> 
</figure>

<p>例えば、デフォルトでは@がないので直前までが選択範囲になります</p>
<figure>
    <img src="/images/posts/2016/08/iterm_3.png"/> 
</figure>

<p>が、このように設定しておくと&hellip;</p>
<figure>
    <img src="/images/posts/2016/08/iterm_4.png"/> 
</figure>

<p>このように含めてくれるようになります。<br>
まとめて選択してほしいものを追加しておくとさらに仕事が捗りますね！（多分）</p>
<figure>
    <img src="/images/posts/2016/08/iterm_5.png"/> 
</figure>

<p>iTerm素敵ですね！<br>
以上です。</p>
]]></content>
        </item>
        
        <item>
            <title>[Docker] CentOS6でGo言語の開発環境を作ってみた</title>
            <link>https://shamaton.dev/posts/305/</link>
            <pubDate>Sat, 08 Oct 2016 03:08:44 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/305/</guid>
            <description>お世話になっております。 しゃまとんです。 巷で話題のdockerに興味が湧いてしまいまして、試しに何かやってみようということでイメージを作って</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>巷で話題のdockerに興味が湧いてしまいまして、試しに何かやってみようということでイメージを作ってみたメモです。</p>
<p>何をやろうかなぁということでちょっとしたGoの開発環境をつくることにしました。<br>
作成された環境は下記のような感じを想定しました。</p>
<p>・Go言語をインストールされ開発できる<br>
・go getしたいのでgitがインストールされている<br>
・いつも使うCentOS6をベースにする</p>
<p>dockerではイメージを作って、イメージからコンテナを生成することで使い捨て可能な環境を実現できるそうです。
イメージはDockerfileを用意することで作成が可能です。</p>
<p>ということでDockerfileを作ってみました。gitの最新版を導入し、goをインストールし、
dockerというユーザーを作成し、GOPATHを設定しています。</p>
<p>イメージを作成には下記のようにコマンド実行します。go_verは指定しない場合Dockerfileに定義されている値を使います。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">docker build . -t &lt;タグ名&gt; --build-arg go_ver<span style="color:#f92672">=</span>1.7.1
</code></pre></div><p>ずらずらーと実行されて、イメージが作成されます。</p>
<figure>
    <img src="/images/posts/2016/10/docker_image.png"/> 
</figure>

<p>イメージを使ってコンテナを生成して起動してみます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">docker run --name &lt;名前&gt; -it &lt;タグ名&gt; /bin/bash
</code></pre></div><p>もろもろ確認してみます。</p>
<figure>
    <img src="/images/posts/2016/10/docker_run_check.png"/> 
</figure>

<p>確認が終わったら削除します。起動時に名前をつけておくと削除しやすいですね。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">docker rm &lt;名前&gt;
</code></pre></div><p>Dockerfileの記述は知識が必要ですが、なれればサクサクを環境を作っていけそうな感じでおもしろいですね。
作ったイメージはdockerhubで共有できたり、他のユーザーが作ったイメージも使えるので、とても便利そう。</p>
<p>自分のやつも一応アップしておきましたのでご自由にどうぞ。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fshamaton%2fgolang-centos6" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>dockerhubはこちら。<br>
<a href="https://hub.docker.com/r/shamaton/golang-centos6/">dockerhub/golang-centos6</a></p>
<p>色々と有効活用したいですね。<br>
以上です。</p>
<p>■ 参考</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fqiita.com%2fmuddydixon%2fitems%2f15e5fe8f04a0c325eb8e" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

]]></content>
        </item>
        
        <item>
            <title>[2016/09] 開発進捗</title>
            <link>https://shamaton.dev/posts/291/</link>
            <pubDate>Sat, 01 Oct 2016 14:24:50 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/291/</guid>
            <description>2016年9月の進捗報告まとめです。 [WIP] create animation of critical damage. 大打撃をくらったときのアニメーション。#indiedev #gamedev pic.twitter.com/4gfOrVEpHJ &amp;mdash; しゃまとん (@shamaton) September 24, 2016 [WIP] ouch!! Enemy learned how to</description>
            <content type="html"><![CDATA[<p>2016年9月の進捗報告まとめです。</p>
<p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">[WIP] create animation of critical damage.<br>大打撃をくらったときのアニメーション。<a href="https://twitter.com/hashtag/indiedev?src=hash&amp;ref_src=twsrc%5Etfw">#indiedev</a> <a href="https://twitter.com/hashtag/gamedev?src=hash&amp;ref_src=twsrc%5Etfw">#gamedev</a> <a href="https://t.co/4gfOrVEpHJ">pic.twitter.com/4gfOrVEpHJ</a></p>&mdash; しゃまとん (@shamaton) <a href="https://twitter.com/shamaton/status/779686574325850113?ref_src=twsrc%5Etfw">September 24, 2016</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">[WIP] ouch!! Enemy learned how to attack.<br>敵が攻撃するようになりました。<a href="https://twitter.com/hashtag/indiedev?src=hash&amp;ref_src=twsrc%5Etfw">#indiedev</a> <a href="https://twitter.com/hashtag/gamedev?src=hash&amp;ref_src=twsrc%5Etfw">#gamedev</a> <a href="https://twitter.com/hashtag/screenshotsaturday?src=hash&amp;ref_src=twsrc%5Etfw">#screenshotsaturday</a> <a href="https://t.co/E6MNy17BEQ">pic.twitter.com/E6MNy17BEQ</a></p>&mdash; しゃまとん (@shamaton) <a href="https://twitter.com/shamaton/status/777152327824224256?ref_src=twsrc%5Etfw">September 17, 2016</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">[WIP] Are chased by enemies. But... they look cute for some reason.<br>敵が追いかけてくるように。なんかかわいい。<a href="https://twitter.com/hashtag/indiedev?src=hash&amp;ref_src=twsrc%5Etfw">#indiedev</a> <a href="https://twitter.com/hashtag/gamedev?src=hash&amp;ref_src=twsrc%5Etfw">#gamedev</a> <a href="https://t.co/n9XYICOaXN">pic.twitter.com/n9XYICOaXN</a></p>&mdash; しゃまとん (@shamaton) <a href="https://twitter.com/shamaton/status/774801423355695105?ref_src=twsrc%5Etfw">September 11, 2016</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">[WIP] magic attack to all target. DOOOOON!!<br>魔法を全対象にかけてみました。どーーーん！<a href="https://twitter.com/hashtag/indiedev?src=hash&amp;ref_src=twsrc%5Etfw">#indiedev</a> <a href="https://twitter.com/hashtag/gamedev?src=hash&amp;ref_src=twsrc%5Etfw">#gamedev</a> <a href="https://t.co/cPmr1ano8e">pic.twitter.com/cPmr1ano8e</a></p>&mdash; しゃまとん (@shamaton) <a href="https://twitter.com/shamaton/status/772411718836166656?ref_src=twsrc%5Etfw">September 4, 2016</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</p>
<p>■ 8月分はこちら</p>









<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fshamaton.dev%2fposts%2f261" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

]]></content>
        </item>
        
        <item>
            <title>[Unity] Colliderの比較するのは何がいいのか</title>
            <link>https://shamaton.dev/posts/186/</link>
            <pubDate>Sun, 25 Sep 2016 13:13:28 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/186/</guid>
            <description>お世話になっております しゃまとんです。 最近、当たり判定について考えていたのですが、Colliderを受け取ったら何を対象に比較するのがいいの</description>
            <content type="html"><![CDATA[<p>お世話になっております<br>
しゃまとんです。</p>
<p>最近、当たり判定について考えていたのですが、Colliderを受け取ったら何を対象に比較するのがいいのだろう</p>
<ul>
<li>名前</li>
<li>タグ</li>
<li>ID</li>
</ul>
<p>色々な情報から判定が出来そうなのですが、個人的に</p>
<ul>
<li>文字より数値のほうが比較が早い</li>
<li>常にユニークな値</li>
</ul>
<p>がいいなぁと思っていたので、何かユニークなIDはないのか！と探すと</p>
<p>GetInstanceIDというものがあったのですね。使ったことなかった。<br>
Unityで生成されているオブジェクトは必ずIDがついていて、ユニークな値になっているそうです。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2ftasogare-games.hatenablog.jp%2fentry%2f20150502%2f1430565009" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>じゃあ、これでいい！</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp">collider.GetInstanceId()
</code></pre></div><p>とすると、ColliderのIDになってしまうらしく、判定がうまくいかないので注意です。<br>
もしオブジェクトとの比較ならば</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp">collider.gameObject.GetInstanceID()
</code></pre></div><p>とする必要があるようです。gameObjectを参照する形になるのが嫌だなーと思ったのですが<br>
衝突が大量に発生しないようならこれでもいいかなと落ち着きました。
なんかパフォーマンス気にしすぎな気もするのですが&hellip;;</p>
<p>簡単にまとめるとこんな感じに。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">using</span> UnityEngine;
<span style="color:#66d9ef">using</span> System.Collections;

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Attack</span> : MonoBehaviour {

  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">int</span> enemyId = <span style="color:#ae81ff">0</span>;

  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> SetEnemyId(<span style="color:#66d9ef">int</span> id) {
    enemyId = id;
  }

  <span style="color:#66d9ef">void</span> OnTriggerEnter2D(Collider2D c) {
    <span style="color:#66d9ef">if</span> (c.gameObject.GetInstanceID() == enemyId) {
      <span style="color:#75715e">// 何かしらの処理
</span><span style="color:#75715e"></span>    }
  }
}
</code></pre></div><p>複数のオブジェクトを対象にするときはDictionaryとか使って何が当たっているのか判断したらよいかなと思っています。<br>
開発が進んできて処理が重いのに悩むのなるべく避けたいですよね&hellip;</p>
<p>以上です。</p>
]]></content>
        </item>
        
        <item>
            <title>sshでローカル環境だけにパスワード認証を有効にする</title>
            <link>https://shamaton.dev/posts/258/</link>
            <pubDate>Sat, 17 Sep 2016 02:25:33 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/258/</guid>
            <description>お世話になっております。 しゃまとんです。 環境構築のテストをしていて、ssh前の環境から鍵情報をもってきてgit操作したいなーと思い調査してい</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>環境構築のテストをしていて、ssh前の環境から鍵情報をもってきてgit操作したいなーと思い調査していた際のメモです。<br>
やりたかったのは</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">自分PC　→ Server(user:shamaton) → Server(user:hoge)
</code></pre></div><p>の流れでログインし、最終的にhogeになった状態でgit操作したい、でした。
はじめは<code>sudo su hoge</code>とかでなんとか出来ないかなーと思っていたのですが、どうやら無理みたいでした。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fngyuki.hatenablog.com%2fentry%2f20120508%2fp1" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>ということでssh localhost hogeという手段をとり、鍵をそのまま使えるようにしようと思いました。<br>
ただ、hogeに関しては外部からログインできないようにしたくどうしようかというところ、調べてみるとsshのMatchキーワードを設定すると実現できました。</p>
<p>以下、設定方法です。</p>
<p>一応、バックアップしておきます</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.org
sudo vi /etc/ssh/sshd_config
</code></pre></div><p>デフォルトのパスワード認証は無効にしておきます</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">PasswordAuthentication no
</code></pre></div><p>そしてローカル環境だけパスワード認証できるようにします</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Match Address 127.0.0.1
PasswordAuthentication yes
</code></pre></div><!-- raw HTML omitted -->
<p>Matchのキーワードには User, Group, Host, Addressが設定できるようです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Match User hoge, fuga Host localhost
PasswordAuthentication yes
</code></pre></div><p>とすると、hogeとfugaはローカルからのパスワード認証を許可することができます。</p>
<p>設定後は再起動しておきましょう。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo /etc/rc.d/init.d/sshd restart
</code></pre></div><p>この際に編集していたシェルは万が一のために残しておいて、別のシェルから確認作業しましょう。</p>
<p>簡単に設定できました。細かいユーザー分けもできそうですね。<br>
以上です。</p>
]]></content>
        </item>
        
        <item>
            <title>[Unity] AnimationClip内のSpriteのプロパティ名を変更したい</title>
            <link>https://shamaton.dev/posts/281/</link>
            <pubDate>Mon, 05 Sep 2016 12:54:54 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/281/</guid>
            <description>お世話になっております。 しゃまとんです。 悩んでおりましたが良い解決方法は見つからず。。 UnityでAnimationClipを作成して、結構</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>悩んでおりましたが良い解決方法は見つからず。。<br>
UnityでAnimationClipを作成して、結構な数を作成つくったあとにプロパティ名を変更したい・・・ということがあると思います。</p>
<p>例えばTransformとかのプロパティに関して変更するときはエディタ上から修正することが可能です。（画像では参照ができなくなりMissingになっています）</p>
<figure>
    <img src="/images/posts/2016/09/enable_change.gif"/> 
</figure>

<p>同じようにSpriteも変更しようとすると、変更されずコンソールにはエラーが表示されます。</p>
<figure>
    <img src="/images/posts/2016/09/not_sprite.gif"/> 
</figure>

<figure>
    <img src="/images/posts/2016/09/sprite_error.png"/> 
</figure>

<p>サクッと変更できないだと・・・<br>
ということで、巷で公開してくださっているエディタ拡張などで変更を試みましたが、解決には至りませんでした。</p>
<p>ということで、色々調べた挙句の対処法は「Animファイルを直接編集する」になりました。<br>
では以下、手順です。（Unityは5.4.0f3です）</p>
<p>■ シリアライズの形式をforce textにする<br>
Menu → Edit → Project Settings → EditorでAsset Serializationを下記のようにします。<br>
こうすることで、Animファイルがテキストで見えるようになります。</p>
<figure>
    <img src="/images/posts/2016/09/force_text_setting.png"/> 
</figure>

<p>■ 変更したいファイルをテキストエディタで開く<br>
（ファイルを開く前に念のためにUnity閉じておく方がいいかもしれません。）<br>
好きなテキストエディタでファイルを開きます。その中からpathを探してみてください。
階層構造でプロパティ名が記載されていると思います。これを参照させたい名称に変更します。</p>
<figure>
    <img src="/images/posts/2016/09/missing.png"/> 
</figure>

<p>画面は変更のイメージで、実際はSprite_Object_Changeのみになります。</p>
<figure>
    <img src="/images/posts/2016/09/text_change.png"/> 
</figure>

<p>これでUnityを再度立ち上げます。これで確認してみると・・・</p>
<figure>
    <img src="/images/posts/2016/09/ok.png"/> 
</figure>

<p>プロパティ名が変更され、Missingが解決されます＾＾<br>
あとは1つずつファイルを開いて・・・って、数が多い場合はつらいので一括置換したい場合はターミナルでsedコマンドを使うといいかなと思います。</p>
<p>下記のような感じでxargsを組み合わせて使います。<br>
Macではsedの挙動が少し違うらしく-iのあとに””を記載しないと動作しないみたいです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">find <span style="color:#f92672">{</span>対象のファイル<span style="color:#f92672">}</span> -type f | xargs sed -i <span style="color:#e6db74">&#34;&#34;</span>  <span style="color:#e6db74">&#34;s/{置換したい文字}/{置換後の文字}/g&#34;</span>
</code></pre></div><p>実行すると、ファイルの中身が変更されるので心配な場合は-iをつけずに出力して確認してみるといいかもです。
同様にUnityは閉じた状態でやってみてください。</p>
<p>Unityのバージョンアップでエディタ上から変更できるようになるといいですね。。<br>
以上です。</p>
<p>■ 参考</p>
<p>






<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fqiita.com%2fnekobako%2fitems%2fb647a701b6070d1ca872" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>








<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2ftkuchiki.hatenablog.com%2fentry%2f2013%2f02%2f27%2f130114" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
]]></content>
        </item>
        
        <item>
            <title>[2016/08] 開発進捗</title>
            <link>https://shamaton.dev/posts/261/</link>
            <pubDate>Thu, 01 Sep 2016 13:31:36 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/261/</guid>
            <description>2016年8月の進捗報告まとめです。 [WIP] combo attack!! (slash and thrust） 連撃できるように組み合わせてみました。#indiedev #gamedev pic.twitter.com/eclrCQfBsn &amp;mdash; しゃまとん (@shamaton) August 28, 2016</description>
            <content type="html"><![CDATA[<p>2016年8月の進捗報告まとめです。</p>
<p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">[WIP] combo attack!! (slash and thrust）<br>連撃できるように組み合わせてみました。<a href="https://twitter.com/hashtag/indiedev?src=hash&amp;ref_src=twsrc%5Etfw">#indiedev</a> <a href="https://twitter.com/hashtag/gamedev?src=hash&amp;ref_src=twsrc%5Etfw">#gamedev</a> <a href="https://t.co/eclrCQfBsn">pic.twitter.com/eclrCQfBsn</a></p>&mdash; しゃまとん (@shamaton) <a href="https://twitter.com/shamaton/status/769882923361116160?ref_src=twsrc%5Etfw">August 28, 2016</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">[WIP] attack animation of lunge.<br>突き攻撃のアニメーション。<a href="https://twitter.com/hashtag/indiedev?src=hash&amp;ref_src=twsrc%5Etfw">#indiedev</a> <a href="https://twitter.com/hashtag/gamedev?src=hash&amp;ref_src=twsrc%5Etfw">#gamedev</a> <a href="https://t.co/vqLNmjEUeh">pic.twitter.com/vqLNmjEUeh</a></p>&mdash; しゃまとん (@shamaton) <a href="https://twitter.com/shamaton/status/767370522803843072?ref_src=twsrc%5Etfw">August 21, 2016</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">[WIP] make a magic test.<br>魔法の詠唱をさせてみるテスト<a href="https://twitter.com/hashtag/indiedev?src=hash&amp;ref_src=twsrc%5Etfw">#indiedev</a> <a href="https://twitter.com/hashtag/gamedev?src=hash&amp;ref_src=twsrc%5Etfw">#gamedev</a> <a href="https://t.co/am8QOxNumm">pic.twitter.com/am8QOxNumm</a></p>&mdash; しゃまとん (@shamaton) <a href="https://twitter.com/shamaton/status/764832610665111552?ref_src=twsrc%5Etfw">August 14, 2016</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">[WIP] I implemented icon animations of ring command.<br>リングコマンドにアニメーションをつけました。<a href="https://twitter.com/hashtag/indiedev?src=hash&amp;ref_src=twsrc%5Etfw">#indiedev</a> <a href="https://twitter.com/hashtag/gamedev?src=hash&amp;ref_src=twsrc%5Etfw">#gamedev</a> <a href="https://t.co/iIzsV9q8f9">pic.twitter.com/iIzsV9q8f9</a></p>&mdash; しゃまとん (@shamaton) <a href="https://twitter.com/shamaton/status/761941829096919041?ref_src=twsrc%5Etfw">August 6, 2016</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</p>
<p>■ 7月分はこちら</p>









<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fshamaton.dev%2fposts%2f247" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

]]></content>
        </item>
        
        <item>
            <title>[cocos2dx] IntのVectorクラスを雑に作った</title>
            <link>https://shamaton.dev/posts/132/</link>
            <pubDate>Mon, 29 Aug 2016 13:01:33 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/132/</guid>
            <description>お世話になっております。 しゃまとんです。 以前にcocosで作業をしていた際に、タイルマップ的な処理をするときに 通常のVectorクラスはfl</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>以前にcocosで作業をしていた際に、タイルマップ的な処理をするときに
通常のVectorクラスはfloat型（だったかな）で定義されているため、Int型で使いたいと思うと毎回キャストしないといけません。</p>
<p>そこで自作でInt型のVectorクラスを作って利用していました。
少し前のものですが、そんなに特殊なことはしていないので使えると思います（ます）。</p>
<p>もし同じように考えている方がいらっしゃれば、ご自由にお使いいただければ幸いです。<br>
（ビルド通らなかったらごめんなさい）</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#75715e">//
</span><span style="color:#75715e">//  IntVec2.cpp
</span><span style="color:#75715e">//
</span><span style="color:#75715e"></span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;IntVec2.h&#34;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>

IntVec2<span style="color:#f92672">::</span>IntVec2()
<span style="color:#f92672">:</span> x(<span style="color:#ae81ff">0</span>), y(<span style="color:#ae81ff">0</span>)
{
}

IntVec2<span style="color:#f92672">::</span>IntVec2(<span style="color:#66d9ef">int</span> xx, <span style="color:#66d9ef">int</span> yy)
<span style="color:#f92672">:</span> x(xx), y(yy)
{
}

IntVec2<span style="color:#f92672">::</span>IntVec2(<span style="color:#66d9ef">const</span> IntVec2<span style="color:#f92672">&amp;</span> p1, <span style="color:#66d9ef">const</span> IntVec2<span style="color:#f92672">&amp;</span> p2)
{
    set(p1, p2);
}

IntVec2<span style="color:#f92672">::</span>IntVec2(<span style="color:#66d9ef">const</span> IntVec2<span style="color:#f92672">&amp;</span> copy)
{
    set(copy);
}

IntVec2<span style="color:#f92672">::~</span>IntVec2()
{
}


<span style="color:#66d9ef">void</span> IntVec2<span style="color:#f92672">::</span>set(<span style="color:#66d9ef">int</span> xx, <span style="color:#66d9ef">int</span> yy)
{
    <span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>x <span style="color:#f92672">=</span> xx;
    <span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>y <span style="color:#f92672">=</span> yy;
}

<span style="color:#66d9ef">void</span> IntVec2<span style="color:#f92672">::</span>set(<span style="color:#66d9ef">const</span> IntVec2<span style="color:#f92672">&amp;</span> v)
{
    <span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>x <span style="color:#f92672">=</span> v.x;
    <span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>y <span style="color:#f92672">=</span> v.y;
}

<span style="color:#66d9ef">void</span> IntVec2<span style="color:#f92672">::</span>set(<span style="color:#66d9ef">const</span> IntVec2<span style="color:#f92672">&amp;</span> p1, <span style="color:#66d9ef">const</span> IntVec2<span style="color:#f92672">&amp;</span> p2)
{
    x <span style="color:#f92672">=</span> p2.x <span style="color:#f92672">-</span> p1.x;
    y <span style="color:#f92672">=</span> p2.y <span style="color:#f92672">-</span> p1.y;
}


<span style="color:#66d9ef">void</span> IntVec2<span style="color:#f92672">::</span>setPoint(<span style="color:#66d9ef">int</span> xx, <span style="color:#66d9ef">int</span> yy)
{
    <span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>x <span style="color:#f92672">=</span> xx;
    <span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>y <span style="color:#f92672">=</span> yy;
}

<span style="color:#66d9ef">bool</span> IntVec2<span style="color:#f92672">::</span>equals(<span style="color:#66d9ef">const</span> IntVec2<span style="color:#f92672">&amp;</span> target) <span style="color:#66d9ef">const</span>
{
    <span style="color:#66d9ef">return</span> ((<span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>x <span style="color:#f92672">==</span> target.x) <span style="color:#f92672">&amp;&amp;</span> (<span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>y <span style="color:#f92672">==</span> target.y));
}

<span style="color:#66d9ef">void</span> IntVec2<span style="color:#f92672">::</span>negate()
{
    x <span style="color:#f92672">=</span> <span style="color:#f92672">-</span>x;
    y <span style="color:#f92672">=</span> <span style="color:#f92672">-</span>y;
}

<span style="color:#66d9ef">void</span> IntVec2<span style="color:#f92672">::</span>add(<span style="color:#66d9ef">const</span> IntVec2<span style="color:#f92672">&amp;</span> v)
{
    x <span style="color:#f92672">+=</span> v.x;
    y <span style="color:#f92672">+=</span> v.y;
}

<span style="color:#66d9ef">void</span> IntVec2<span style="color:#f92672">::</span>subtract(<span style="color:#66d9ef">const</span> IntVec2<span style="color:#f92672">&amp;</span> v)
{
    x <span style="color:#f92672">-=</span> v.x;
    y <span style="color:#f92672">-=</span> v.y;
}

<span style="color:#66d9ef">void</span> IntVec2<span style="color:#f92672">::</span>scale(<span style="color:#66d9ef">int</span> scalar)
{
    x <span style="color:#f92672">*=</span> scalar;
    y <span style="color:#f92672">*=</span> scalar;
}

<span style="color:#66d9ef">void</span> IntVec2<span style="color:#f92672">::</span>scale(<span style="color:#66d9ef">const</span> IntVec2<span style="color:#f92672">&amp;</span> scale)
{
    x <span style="color:#f92672">*=</span> scale.x;
    y <span style="color:#f92672">*=</span> scale.y;
}

<span style="color:#75715e">//---------------------------------------------------------
</span><span style="color:#75715e">// oprator
</span><span style="color:#75715e">//---------------------------------------------------------
</span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> IntVec2 IntVec2<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">+</span>(<span style="color:#66d9ef">const</span> IntVec2<span style="color:#f92672">&amp;</span> v) <span style="color:#66d9ef">const</span>
{
    IntVec2 <span style="color:#a6e22e">result</span>(<span style="color:#f92672">*</span><span style="color:#66d9ef">this</span>);
    result.add(v);
    <span style="color:#66d9ef">return</span> result;
}

IntVec2<span style="color:#f92672">&amp;</span> IntVec2<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">+=</span>(<span style="color:#66d9ef">const</span> IntVec2<span style="color:#f92672">&amp;</span> v)
{
    add(v);
    <span style="color:#66d9ef">return</span> <span style="color:#f92672">*</span><span style="color:#66d9ef">this</span>;
}

<span style="color:#66d9ef">const</span> IntVec2 IntVec2<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">-</span>(<span style="color:#66d9ef">const</span> IntVec2<span style="color:#f92672">&amp;</span> v) <span style="color:#66d9ef">const</span>
{
    IntVec2 <span style="color:#a6e22e">result</span>(<span style="color:#f92672">*</span><span style="color:#66d9ef">this</span>);
    result.subtract(v);
    <span style="color:#66d9ef">return</span> result;
}

IntVec2<span style="color:#f92672">&amp;</span> IntVec2<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">-=</span>(<span style="color:#66d9ef">const</span> IntVec2<span style="color:#f92672">&amp;</span> v)
{
    subtract(v);
    <span style="color:#66d9ef">return</span> <span style="color:#f92672">*</span><span style="color:#66d9ef">this</span>;
}

<span style="color:#66d9ef">const</span> IntVec2 IntVec2<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">-</span>() <span style="color:#66d9ef">const</span>
{
    IntVec2 <span style="color:#a6e22e">result</span>(<span style="color:#f92672">*</span><span style="color:#66d9ef">this</span>);
    result.negate();
    <span style="color:#66d9ef">return</span> result;
}

<span style="color:#66d9ef">const</span> IntVec2 IntVec2<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">*</span>(<span style="color:#66d9ef">int</span> s) <span style="color:#66d9ef">const</span>
{
    IntVec2 <span style="color:#a6e22e">result</span>(<span style="color:#f92672">*</span><span style="color:#66d9ef">this</span>);
    result.scale(s);
    <span style="color:#66d9ef">return</span> result;
}

IntVec2<span style="color:#f92672">&amp;</span> IntVec2<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">*=</span>(<span style="color:#66d9ef">int</span> s)
{
    scale(s);
    <span style="color:#66d9ef">return</span> <span style="color:#f92672">*</span><span style="color:#66d9ef">this</span>;
}

<span style="color:#66d9ef">const</span> IntVec2 IntVec2<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">/</span>(<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">int</span> s) <span style="color:#66d9ef">const</span>
{
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">IntVec2</span>(<span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>x <span style="color:#f92672">/</span> s, <span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>y <span style="color:#f92672">/</span> s);
}

<span style="color:#66d9ef">bool</span> IntVec2<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&amp;</span>lt;(<span style="color:#66d9ef">const</span> IntVec2<span style="color:#f92672">&amp;</span> v) <span style="color:#66d9ef">const</span>
{
    <span style="color:#66d9ef">if</span> (x <span style="color:#f92672">==</span> v.x)
    {
        <span style="color:#66d9ef">return</span> y <span style="color:#f92672">&lt;</span> v.y;
    }
    <span style="color:#66d9ef">return</span> x <span style="color:#f92672">&lt;</span> v.x;
}

<span style="color:#66d9ef">bool</span> IntVec2<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">==</span>(<span style="color:#66d9ef">const</span> IntVec2<span style="color:#f92672">&amp;</span> v) <span style="color:#66d9ef">const</span>
{
    <span style="color:#66d9ef">return</span> x <span style="color:#f92672">==</span> v.x <span style="color:#f92672">&amp;&amp;</span> y <span style="color:#f92672">==</span> v.y;
}

<span style="color:#66d9ef">bool</span> IntVec2<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">!=</span>(<span style="color:#66d9ef">const</span> IntVec2<span style="color:#f92672">&amp;</span> v) <span style="color:#66d9ef">const</span>
{
    <span style="color:#66d9ef">return</span> x <span style="color:#f92672">!=</span> v.x <span style="color:#f92672">||</span> y <span style="color:#f92672">!=</span> v.y;
}

<span style="color:#66d9ef">const</span> IntVec2 <span style="color:#66d9ef">operator</span><span style="color:#f92672">*</span>(<span style="color:#66d9ef">float</span> x, <span style="color:#66d9ef">const</span> IntVec2<span style="color:#f92672">&amp;</span> v)
{
    IntVec2 <span style="color:#a6e22e">result</span>(v);
    result.scale(x);
    <span style="color:#66d9ef">return</span> result;
}
</code></pre></div><!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p> </p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#75715e">//
</span><span style="color:#75715e">//  IntVec2.h
</span><span style="color:#75715e">//
</span><span style="color:#75715e"></span>
<span style="color:#75715e">#ifndef __IntVec2__
</span><span style="color:#75715e">#define __IntVec2__
</span><span style="color:#75715e"></span>
<span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;algorithm&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;functional&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;math.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;math/CCMathBase.h&#34;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
<span style="color:#75715e">/**
</span><span style="color:#75715e"> * Defines a 2-element int point vector.
</span><span style="color:#75715e"> */</span>
<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">IntVec2</span>
{
<span style="color:#66d9ef">public</span><span style="color:#f92672">:</span>

    <span style="color:#75715e">/**
</span><span style="color:#75715e">     * The x coordinate.
</span><span style="color:#75715e">     */</span>
    <span style="color:#66d9ef">int</span> x;

    <span style="color:#75715e">/**
</span><span style="color:#75715e">     * The y coordinate.
</span><span style="color:#75715e">     */</span>
    <span style="color:#66d9ef">int</span> y;

    IntVec2();
    IntVec2(<span style="color:#66d9ef">int</span> xx, <span style="color:#66d9ef">int</span> yy);
    IntVec2(<span style="color:#66d9ef">const</span> IntVec2<span style="color:#f92672">&amp;</span> p1, <span style="color:#66d9ef">const</span> IntVec2<span style="color:#f92672">&amp;</span> p2);
    IntVec2(<span style="color:#66d9ef">const</span> IntVec2<span style="color:#f92672">&amp;</span> copy);

    <span style="color:#75715e">/**
</span><span style="color:#75715e">     * Destructor.
</span><span style="color:#75715e">     */</span>
    <span style="color:#f92672">~</span>IntVec2();

    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">set</span>(<span style="color:#66d9ef">int</span> xx, <span style="color:#66d9ef">int</span> yy);
    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">set</span>(<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">*</span> array);
    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">set</span>(<span style="color:#66d9ef">const</span> IntVec2<span style="color:#f92672">&amp;</span> v);
    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">set</span>(<span style="color:#66d9ef">const</span> IntVec2<span style="color:#f92672">&amp;</span> p1, <span style="color:#66d9ef">const</span> IntVec2<span style="color:#f92672">&amp;</span> p2);

    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">negate</span>();

    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">add</span>(<span style="color:#66d9ef">const</span> IntVec2<span style="color:#f92672">&amp;</span> v);

    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">scale</span>(<span style="color:#66d9ef">int</span> scalar);
    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">scale</span>(<span style="color:#66d9ef">const</span> IntVec2<span style="color:#f92672">&amp;</span> scale);

    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">subtract</span>(<span style="color:#66d9ef">const</span> IntVec2<span style="color:#f92672">&amp;</span> v);


    <span style="color:#66d9ef">const</span> IntVec2 <span style="color:#66d9ef">operator</span><span style="color:#f92672">+</span>(<span style="color:#66d9ef">const</span> IntVec2<span style="color:#f92672">&amp;</span> v) <span style="color:#66d9ef">const</span>;
    IntVec2<span style="color:#f92672">&amp;</span> <span style="color:#66d9ef">operator</span><span style="color:#f92672">+=</span>(<span style="color:#66d9ef">const</span> IntVec2<span style="color:#f92672">&amp;</span> v);
    <span style="color:#66d9ef">const</span> IntVec2 <span style="color:#66d9ef">operator</span><span style="color:#f92672">-</span>(<span style="color:#66d9ef">const</span> IntVec2<span style="color:#f92672">&amp;</span> v) <span style="color:#66d9ef">const</span>;
    IntVec2<span style="color:#f92672">&amp;</span> <span style="color:#66d9ef">operator</span><span style="color:#f92672">-=</span>(<span style="color:#66d9ef">const</span> IntVec2<span style="color:#f92672">&amp;</span> v);
    <span style="color:#66d9ef">const</span> IntVec2 <span style="color:#66d9ef">operator</span><span style="color:#f92672">-</span>() <span style="color:#66d9ef">const</span>;
    <span style="color:#66d9ef">const</span> IntVec2 <span style="color:#66d9ef">operator</span><span style="color:#f92672">*</span>(<span style="color:#66d9ef">int</span> s) <span style="color:#66d9ef">const</span>;
    IntVec2<span style="color:#f92672">&amp;</span> <span style="color:#66d9ef">operator</span><span style="color:#f92672">*=</span>(<span style="color:#66d9ef">int</span> s);
    <span style="color:#66d9ef">const</span> IntVec2 <span style="color:#66d9ef">operator</span><span style="color:#f92672">/</span>(<span style="color:#66d9ef">int</span> s) <span style="color:#66d9ef">const</span>;
    <span style="color:#66d9ef">bool</span> <span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;</span>(<span style="color:#66d9ef">const</span> IntVec2<span style="color:#f92672">&amp;</span> v) <span style="color:#66d9ef">const</span>;
    <span style="color:#66d9ef">bool</span> <span style="color:#66d9ef">operator</span><span style="color:#f92672">==</span>(<span style="color:#66d9ef">const</span> IntVec2<span style="color:#f92672">&amp;</span> v) <span style="color:#66d9ef">const</span>;
    <span style="color:#66d9ef">bool</span> <span style="color:#66d9ef">operator</span><span style="color:#f92672">!=</span>(<span style="color:#66d9ef">const</span> IntVec2<span style="color:#f92672">&amp;</span> v) <span style="color:#66d9ef">const</span>;

    <span style="color:#75715e">//code added compatible for Point
</span><span style="color:#75715e"></span><span style="color:#66d9ef">public</span><span style="color:#f92672">:</span>
    <span style="color:#75715e">/**
</span><span style="color:#75715e">     * @js NA
</span><span style="color:#75715e">     * @lua NA
</span><span style="color:#75715e">     */</span>
    <span style="color:#66d9ef">void</span> setPoint(<span style="color:#66d9ef">int</span> xx, <span style="color:#66d9ef">int</span> yy);
    <span style="color:#75715e">/**
</span><span style="color:#75715e">     * @js NA
</span><span style="color:#75715e">     */</span>
    <span style="color:#66d9ef">bool</span> <span style="color:#a6e22e">equals</span>(<span style="color:#66d9ef">const</span> IntVec2<span style="color:#f92672">&amp;</span> target) <span style="color:#66d9ef">const</span>;

};


<span style="color:#75715e">#endif </span><span style="color:#75715e">/* defined(__IntVec2__) */</span><span style="color:#75715e">
</span></code></pre></div><p>以上です。</p>
]]></content>
        </item>
        
        <item>
            <title>[Unity5]OnCollision系とかOnTrigger系のコールバックを入力補間する</title>
            <link>https://shamaton.dev/posts/212/</link>
            <pubDate>Mon, 15 Aug 2016 15:01:28 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/212/</guid>
            <description>お世話になっております。 しゃまとんです。 MonoBehaviourにあるOnCollisionEnterやOnTriggerEnterなどの</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>MonoBehaviourにあるOnCollisionEnterやOnTriggerEnterなどの衝突判定時のコールバック系メソッドを
実装しようと思ったら都度調べたりして、面倒なことがあります。</p>
<p>そこでエディタでOn…などと入力すると補間してくれるの機能があるので、利用するのが吉です。
入力補間できるようにするファイルも公開されています。</p>
<p>今回は以下の環境になります。</p>
<ul>
<li>OS：Mac</li>
<li>Unity：Unity5</li>
<li>エディタ：MonoDevelop、Unity5での対応</li>
</ul>
<p>いつもの如くテラシュールさんのブログが参考になるのですが、
公開されているファイルの適用方法が少しだけ変わっているのでメモしておきます。</p>
<p>まずはこちらからzipもしくはgit経由で取得してきます。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fanchan828%2funity-snippets" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<figure>
    <img src="/images/posts/2016/06/snippets.png"/> 
</figure>

<p>取得したら、Unity.template.xmlをMonoDevelop側にコピーします。配置場所は</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">/Users/{UserName}/Library/MonoDevelop-Unity-5.0/Snippets
</code></pre></div><figure>
    <img src="/images/posts/2016/06/monodevelop.png"/> 
</figure>

<p>となります。この状態でMonoDevelopを再起動しておきます。<br>
これでOn&hellip;と入力してみると</p>
<figure>
    <img src="/images/posts/2016/06/codetemplate.gif"/> 
</figure>

<p>上記のように補間してくれるようになります。<br>
補間された後にTabを押すことでテンプレートが展開されます。テンプレートはこれ以外にも色々使えそうですね。</p>
<p>以上です。</p>
]]></content>
        </item>
        
        <item>
            <title>[Unity] CSVからScriptableObjectを作成してみる</title>
            <link>https://shamaton.dev/posts/202/</link>
            <pubDate>Thu, 04 Aug 2016 14:49:00 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/202/</guid>
            <description>お世話になっております。 しゃまとんです。 ExcelからScriptableObjectを生成する記事はあるのですが、 CSVからScripta</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>ExcelからScriptableObjectを生成する記事はあるのですが、
CSVからScriptableObjectを生成するものが見当たらなかったのでちょっと実装してみました。</p>
<p>■ 参考<br>
エクセルからScriptableObjectを生成するやつ</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2ftsubakit1.hateblo.jp%2fentry%2f20131010%2f1381411760" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>すみません、コチラの記事はノーコーディングにはなりませぬ。。。<br>
ただimporterはExcel系の処理をしないので割りとシンプルです。</p>
<p>ScriptableObjectにしたいやつです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">using</span> UnityEngine;
<span style="color:#66d9ef">using</span> System.Collections;
<span style="color:#66d9ef">using</span> System.Collections.Generic;

<span style="color:#75715e">// ScriptableObject化するマスタ
</span><span style="color:#75715e"></span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Data</span> : ScriptableObject { 
  <span style="color:#66d9ef">public</span> List&lt;Param&gt; param = <span style="color:#66d9ef">new</span> List&lt;Param&gt; ();
<span style="color:#a6e22e">
</span><span style="color:#a6e22e">  [System.SerializableAttribute]</span>
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Param</span> {
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span>      intValue;
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">float</span>    floatValue;
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span>   stringValue;
  }
}
</code></pre></div><p>Importerはこれ。該当のCSV(Data.csv)に変更があると、更新処理が走ります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">using</span> UnityEngine;
<span style="color:#66d9ef">using</span> UnityEditor;
<span style="color:#66d9ef">using</span> System.Collections;
<span style="color:#66d9ef">using</span> System.IO;

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">CSV_Impoter</span> : AssetPostprocessor {

  <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> OnPostprocessAllAssets(<span style="color:#66d9ef">string</span>[] importedAssets, <span style="color:#66d9ef">string</span>[] deletedAssets, <span style="color:#66d9ef">string</span>[] movedAssets, <span style="color:#66d9ef">string</span>[] movedFromAssetPaths) {

    <span style="color:#66d9ef">string</span> targetFile = <span style="color:#e6db74">&#34;Assets/CSV/Data.csv&#34;</span>;
    <span style="color:#66d9ef">string</span> exportFile = <span style="color:#e6db74">&#34;Assets/CSV/Data.asset&#34;</span>;

    <span style="color:#66d9ef">foreach</span> (<span style="color:#66d9ef">string</span> asset <span style="color:#66d9ef">in</span> importedAssets) {

      <span style="color:#75715e">// 合致しないものはスルー
</span><span style="color:#75715e"></span>      <span style="color:#66d9ef">if</span> (!targetFile.Equals(asset)) <span style="color:#66d9ef">continue</span>;

      <span style="color:#75715e">// 既存のマスタを取得
</span><span style="color:#75715e"></span>      Data data = AssetDatabase.LoadAssetAtPath&lt;Data&gt;(exportFile);

      <span style="color:#75715e">// 見つからなければ作成する
</span><span style="color:#75715e"></span>      <span style="color:#66d9ef">if</span> (data == <span style="color:#66d9ef">null</span>) {
        data = ScriptableObject.CreateInstance&lt;Data&gt;();
        AssetDatabase.CreateAsset((ScriptableObject)data, exportFile);
      }
      <span style="color:#75715e">// 中身を削除
</span><span style="color:#75715e"></span>      data.param.Clear();

      <span style="color:#75715e">// CSVファイルをオブジェクトへ保存
</span><span style="color:#75715e"></span>      <span style="color:#66d9ef">using</span> (StreamReader sr = <span style="color:#66d9ef">new</span> StreamReader(targetFile)) {

        <span style="color:#75715e">// ヘッダをやり過ごす
</span><span style="color:#75715e"></span>        sr.ReadLine();

        <span style="color:#75715e">// ファイルの終端まで繰り返す
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">while</span> (!sr.EndOfStream) {
          <span style="color:#66d9ef">string</span>   line     = sr.ReadLine();
          <span style="color:#66d9ef">string</span>[] dataStrs = line.Split(<span style="color:#e6db74">&#39;,&#39;</span>);

          <span style="color:#75715e">// 追加するパラメータを生成
</span><span style="color:#75715e"></span>          Data.Param p = <span style="color:#66d9ef">new</span> Data.Param();
          <span style="color:#75715e">// 値を設定する
</span><span style="color:#75715e"></span>          p.intValue    = <span style="color:#66d9ef">int</span>.Parse(dataStrs[<span style="color:#ae81ff">0</span>]);
          p.floatValue  = <span style="color:#66d9ef">float</span>.Parse(dataStrs[<span style="color:#ae81ff">1</span>]);
          p.stringValue = dataStrs[<span style="color:#ae81ff">2</span>];
          <span style="color:#75715e">// 追加
</span><span style="color:#75715e"></span>          data.param.Add(p);
        }
      }

      <span style="color:#75715e">// 保存
</span><span style="color:#75715e"></span>      AssetDatabase.SaveAssets();

      Debug.Log(<span style="color:#e6db74">&#34;Data updated.&#34;</span>);
    }
  }
}
</code></pre></div><p>CSVファイル（Data.csv）はこんな感じで適当に作ります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">intValue,floatValue,stringValue
1,2.3,text
4,5.6,テキスト
7,8.9,てきすと
</code></pre></div><p>今回の場合、Assets/CSVに上記のファイルを配置すると、importが開始されましてData.assetが生成されます。
中身も入ってますね。</p>
<figure>
    <img src="/images/posts/2016/06/csv_scriptable.png"/> 
</figure>

<p>エクセルだと中身がどのように変わったのかわからないので嫌だな〜と思ったりするのですが、
何かいい術はないものか。。いろいろあれですね。<br>
以上です。</p>
]]></content>
        </item>
        
        <item>
            <title>[2016/07] 開発進捗</title>
            <link>https://shamaton.dev/posts/247/</link>
            <pubDate>Mon, 01 Aug 2016 13:00:18 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/247/</guid>
            <description>2016年7月の進捗報告まとめです。 [WIP] I implemented process which player uses item. アイテムを使った一連の流れを実装してみました。ちょっと詰まり気味。#indiedev #gamedev pic.twitter.com/BrFVqF7yU3</description>
            <content type="html"><![CDATA[<p>2016年7月の進捗報告まとめです。</p>
<p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">[WIP] I implemented process which player uses item.<br>アイテムを使った一連の流れを実装してみました。ちょっと詰まり気味。<a href="https://twitter.com/hashtag/indiedev?src=hash&amp;ref_src=twsrc%5Etfw">#indiedev</a> <a href="https://twitter.com/hashtag/gamedev?src=hash&amp;ref_src=twsrc%5Etfw">#gamedev</a> <a href="https://t.co/BrFVqF7yU3">pic.twitter.com/BrFVqF7yU3</a></p>&mdash; しゃまとん (@shamaton) <a href="https://twitter.com/shamaton/status/757595276127285248?ref_src=twsrc%5Etfw">July 25, 2016</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">[WIP] made effects. These are written by shader. Shader is difficult!!<br>エフェクト作ってみました。シェーダ難しい！<a href="https://twitter.com/hashtag/indiedev?src=hash&amp;ref_src=twsrc%5Etfw">#indiedev</a> <a href="https://twitter.com/hashtag/gamedev?src=hash&amp;ref_src=twsrc%5Etfw">#gamedev</a> <a href="https://t.co/fhAraCJAsi">pic.twitter.com/fhAraCJAsi</a></p>&mdash; しゃまとん (@shamaton) <a href="https://twitter.com/shamaton/status/755025480147808257?ref_src=twsrc%5Etfw">July 18, 2016</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">[WIP] Enemies started to move in my game. still only move...<br>敵っぽいものを配置してみました。まだ動くだけですが。。<a href="https://twitter.com/hashtag/indiedev?src=hash&amp;ref_src=twsrc%5Etfw">#indiedev</a> <a href="https://twitter.com/hashtag/gamedev?src=hash&amp;ref_src=twsrc%5Etfw">#gamedev</a> <a href="https://t.co/DJffncwwuc">pic.twitter.com/DJffncwwuc</a></p>&mdash; しゃまとん (@shamaton) <a href="https://twitter.com/shamaton/status/752877843890044928?ref_src=twsrc%5Etfw">July 12, 2016</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">[WIP] I added animations of attack. Player can attack enemies. <br>プレーヤーが攻撃できるようになりました。<a href="https://twitter.com/hashtag/indiedev?src=hash&amp;ref_src=twsrc%5Etfw">#indiedev</a>  <a href="https://twitter.com/hashtag/gamedev?src=hash&amp;ref_src=twsrc%5Etfw">#gamedev</a> <a href="https://t.co/HYux17gJbX">pic.twitter.com/HYux17gJbX</a></p>&mdash; しゃまとん (@shamaton) <a href="https://twitter.com/shamaton/status/751069748515876868?ref_src=twsrc%5Etfw">July 7, 2016</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</p>
<p>■ 6月分はこちら</p>









<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fshamaton.dev%2fposts%2f193" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

]]></content>
        </item>
        
        <item>
            <title>[Unity] Shaderで波紋のようなものを出してみる（2Dだよ）</title>
            <link>https://shamaton.dev/posts/250/</link>
            <pubDate>Mon, 18 Jul 2016 02:17:58 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/250/</guid>
            <description>お世話になっております。 しゃまとんです。 UnityのShader初心者でございます。ちょっとエフェクト作ってみようかなということで、 触ってい</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>UnityのShader初心者でございます。ちょっとエフェクト作ってみようかなということで、
触っているのですが、ちょっと勝手が違っていて調べたり試行錯誤が大変ですね。<br>
UnityでShader頑張ってみた系の記事を作ってくださっている方に感謝しきりです。</p>
<p>で、何か波打ってるようなものを作ろうとということで波紋的なものを出せないかなということをやっていて、
なんとかできたのでメモしておきます。</p>
<p>ちなみにこの記事ですが3Dの波紋表現ではないので、ご注意くださいませ。</p>
<p>それでは、Shaderはこんな感じです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Shader &#34;Custom/Sprite-Ripple&#34; {
  Properties
  {
    [PerRendererData] _MainTex (&#34;Sprite Texture&#34;, 2D) = &#34;white&#34; {}
    _Color (&#34;Tint&#34;, Color) = (1,1,1,1)
    [MaterialToggle] PixelSnap (&#34;Pixel snap&#34;, Float) = 0
  }

  SubShader
  {
    Tags
    { 
      &#34;Queue&#34;=&#34;Transparent&#34; 
      &#34;IgnoreProjector&#34;=&#34;True&#34; 
      &#34;RenderType&#34;=&#34;Transparent&#34; 
      &#34;PreviewType&#34;=&#34;Plane&#34;
      &#34;CanUseSpriteAtlas&#34;=&#34;True&#34;
    }

    Cull Off
    Lighting Off
    ZWrite Off
    Fog { Mode Off }
    Blend SrcAlpha OneMinusSrcAlpha

    Pass
    {
    CGPROGRAM
      #pragma vertex vert
      #pragma fragment frag
      #pragma multi_compile DUMMY PIXELSNAP_ON
      #include &#34;UnityCG.cginc&#34;
      
      struct appdata_t
      {
        float4 vertex   : POSITION;
        float4 color    : COLOR;
        float2 texcoord : TEXCOORD0;
      };

      struct v2f
      {
        float4 vertex   : SV_POSITION;
        fixed4 color    : COLOR;
        half2 texcoord  : TEXCOORD0;
      };
      
      fixed4 _Color;

      v2f vert(appdata_t IN)
      {
        v2f OUT;
        OUT.vertex = mul(UNITY_MATRIX_MVP, IN.vertex);
        OUT.texcoord = IN.texcoord;
        OUT.color = IN.color * _Color;
        #ifdef PIXELSNAP_ON
        OUT.vertex = UnityPixelSnap (OUT.vertex);
        #endif

        return OUT;
      }

      sampler2D _MainTex;

      fixed4 frag(v2f_img IN) : COLOR
      {
        half4 tex = tex2D(_MainTex, IN.uv);

        float c = 120.0;
        float t = _Time.x * c;
        float s = abs(sin(-t + c * length(float2(IN.uv.x - 0.5, IN.uv.y - 0.5))));
        tex.rgb = red * s + tex.rgb * (1-s);
        return tex;
      }
    ENDCG
    }
  }
}
</code></pre></div><p>波紋のような表示をさせる部分はフラグメントシェーダーの部分のみ（frag関数）で他の部分は何もいじっていません。</p>
<p>波紋にはsin関数を使って、その波をそのまま利用しています。
適当に係数（c）をつけることで変化を細かくするようにしています。<br>
sin関数の引数にはテクスチャの中心点から波が発生していくような数値を設定しています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">length(float2(IN.uv.x - 0.5, IN.uv.y - 0.5))
</code></pre></div><p>この部分で中心点でるように計算されています。</p>
<p>シェーダを作成後、マテリアルを生成して適当なSpriteに設定します。<br>
実行するとこんな感じになります。</p>
<figure>
    <img src="/images/posts/2016/07/ripple_eye.gif"/> 
</figure>

<p>なんか洗脳されそうですねｗ<br>
行数にしたら数行ですが、これだけで出来ちゃうShaderすごい。もっと色々な表現できるようになりたいものです。</p>
<p>以上です。</p>
<p>■ UnityのShader関連</p>
<p>






<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fqiita.com%2fedo_m18%2fitems%2f591925d7fc960d843afa" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>








<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2ftips.hecomi.com%2fentry%2f2014%2f03%2f16%2f233943" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
<p>■ UnityのShaderじゃないけど勉強になります！







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fqiita.com%2fdoxas%2fitems%2fb8221e92a2bfdc6fc211" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
]]></content>
        </item>
        
        <item>
            <title>[golang]Go1.6で正式採用されたvendorの参照の挙動をみてみた</title>
            <link>https://shamaton.dev/posts/223/</link>
            <pubDate>Fri, 08 Jul 2016 14:59:50 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/223/</guid>
            <description>お世話になっております。 しゃまとんです。 先日、Go1.5から1.6にアップデートしたときのあれこれという記事を書きまして、 vendorがいい</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>先日、Go1.5から1.6にアップデートしたときのあれこれという記事を書きまして、
vendorがいいねと思っていたのですが、どんな仕組みで参照しているんだろうともやもやしたので挙動を少し確認してみました。</p>









<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fshamaton.dev%2fposts%2f217" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>ちなみに検証が結構ながいので、先にまとめっぽことを書いておくと&hellip;</p>
<hr>
<p>${GOPATH}/src/{package}内に存在するコードhoge.goのビルド時に、自分の位置からvendorを検索し、
見つからなかったら上位層でのvendorを探す。最終的にはsrc/vendorまで検索する。</p>
<p>ただし、検索は他のGOPATHや上位層に存在する他ディレクトリまでは見に行かない。</p>
<p>また、src直下にコードをおいてbuildしてもsrc/vendorは参照しようとしない。
（そもそもそこにコードは配置される想定ではないと思われる）</p>
<hr>
<p>かなと思います。<br>
では以下検証です。</p>
<p>わかっていることとして、vendorフォルダがあると配下のパッケージが簡単にimportできるということだったので、
下記のようにディレクトリとコードを配置しました。色々なところに空のvendorフォルダを作成してどうなるか確認します。</p>
<figure>
    <img src="/images/posts/2016/06/tree.png"/> 
</figure>

<p>その前に、コードですが以下の様な感じです。vendor配下にあるであろうprintパッケージを呼び出すようなテストコードです。</p>
<p>■ test.go</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>

<span style="color:#f92672">import</span> <span style="color:#e6db74">&#34;print&#34;</span>

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
  <span style="color:#a6e22e">print</span>.<span style="color:#a6e22e">Hello</span>()
}
</code></pre></div><p>■ vendor/print/print.go</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">print</span>

<span style="color:#f92672">import</span> <span style="color:#e6db74">&#34;fmt&#34;</span>

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">Hello</span>() {
  <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;hello!!&#34;</span>)
}
</code></pre></div><p>■ 何もない状態<br>
<strong>1. go run src/hoge/fuga/test.go（GOPATH未定義）</strong><br>
GOPATHが無いので、エラーになります。vendorに関する表示もなし。</p>
<figure>
    <img src="/images/posts/2016/06/vendor_check_1.png"/> 
</figure>

<p>そこでGOPATHを下記のように設定します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">export GOPATH=~/vendor_check
</code></pre></div><p><strong>2. go run src/hoge/fuga/test.go</strong><br>
実行すると、vendorが表示されるようになります。ただpiyoは検索対象にはならないようです。どうやら実行するファイルから上に辿って検索するっぽい。</p>
<figure>
    <img src="/images/posts/2016/06/vendor_check_2.png"/> 
</figure>

<p><strong>3. go run src/test.go</strong><br>
src/vendorが表示されるのかと思ったら、何もでませんでした。</p>
<figure>
    <img src="/images/posts/2016/06/vendor_check_3.png"/> 
</figure>

<p><strong>4. go run lib/src/hoge/fuga/test.go</strong><br>
そもそも、GOPATHの定義外なのでダメなようです。</p>
<figure>
    <img src="/images/posts/2016/06/vendor_check_4.png"/> 
</figure>

<p>そこでGOPATHを追加します。</p>
<!-- raw HTML omitted -->
<p><strong>5. go run lib/src/hoge/fuga/test.go</strong><br>
vendorの表示がでるようになりました。こちらではlib/src/vendorまで見ているようです。src/は見ないようですね。</p>
<figure>
    <img src="/images/posts/2016/06/vendor_check_5.png"/> 
</figure>

<p><strong>6. go run lib/src/test.go</strong><br>
src/test.goと同じでvendorは出ません。</p>
<figure>
    <img src="/images/posts/2016/06/vendor_check_5.5.png"/> 
</figure>

<p><strong>7. go run lib/hoge/fuga/test.go</strong><br>
やはり、どこかしらのsrc配下にないとダメなようですね。</p>
<figure>
    <img src="/images/posts/2016/06/vendor_check_6.png"/> 
</figure>

<p><strong>8. go run test.go</strong><br>
当然なにも出ません。</p>
<figure>
    <img src="/images/posts/2016/06/vendor_check_7.png"/> 
</figure>

<p>全体的に確認したのでprintを有効にします</p>
<!-- raw HTML omitted -->
<p><strong>9. go run src/hoge/fuga/test.go</strong><br>
helloと表示されました。ちゃんと参照できていますね。</p>
<figure>
    <img src="/images/posts/2016/06/vendor_check_8.png"/> 
</figure>

<p><strong>10. go run src/test.go</strong><br>
こちらは参照できませんでした。src直下は想定外っぽい・・・？</p>
<figure>
    <img src="/images/posts/2016/06/vendor_check_9.png"/> 
</figure>

<p>src直下は利用するべきではないようですね。<br>
実行できるっぽいlib/src配下もダメなよう。（vendor配下に配置すればいけます）<br>
挙動からするとGOPATH/src配下で自分が関係している上位層のvendorまで探しに行くようです。</p>
<p>これからするとGOPATHは複数にせず、1つのsrc内で完結させるのがよさそうですね。<br>
以上です。</p>
]]></content>
        </item>
        
        <item>
            <title>[2016/06] 開発進捗まとめ</title>
            <link>https://shamaton.dev/posts/193/</link>
            <pubDate>Sun, 03 Jul 2016 01:07:15 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/193/</guid>
            <description>2016年6月の進捗報告まとめです。 [WIP] make scene transition tests. エフェクト入れてフィールドの切り替えテストしてみた。#indiedev #gamedev pic.twitter.com/DJbXvf35nm &amp;mdash; しゃまとん (@shamaton) June 30, 2016</description>
            <content type="html"><![CDATA[<p>2016年6月の進捗報告まとめです。</p>
<p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">[WIP] make scene transition tests. <br>エフェクト入れてフィールドの切り替えテストしてみた。<a href="https://twitter.com/hashtag/indiedev?src=hash&amp;ref_src=twsrc%5Etfw">#indiedev</a>  <a href="https://twitter.com/hashtag/gamedev?src=hash&amp;ref_src=twsrc%5Etfw">#gamedev</a> <a href="https://t.co/DJbXvf35nm">pic.twitter.com/DJbXvf35nm</a></p>&mdash; しゃまとん (@shamaton) <a href="https://twitter.com/shamaton/status/748530763813908480?ref_src=twsrc%5Etfw">June 30, 2016</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">[WIP] camera chases target if target goes out render space.<br>[進捗]キャラがはみ出そうになるとカメラ追いかけるようにしてみた。<a href="https://twitter.com/hashtag/indiedev?src=hash&amp;ref_src=twsrc%5Etfw">#indiedev</a> <a href="https://twitter.com/hashtag/gamedev?src=hash&amp;ref_src=twsrc%5Etfw">#gamedev</a> <a href="https://t.co/G3fHzQ7xNq">pic.twitter.com/G3fHzQ7xNq</a></p>&mdash; しゃまとん (@shamaton) <a href="https://twitter.com/shamaton/status/744496094479060992?ref_src=twsrc%5Etfw">June 19, 2016</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">[WIP] Some objects move from enemy to player.<br>倒すと何かでてきて、対象に向かっていく的なやつ。<a href="https://twitter.com/hashtag/indiedev?src=hash&amp;ref_src=twsrc%5Etfw">#indiedev</a> <a href="https://t.co/d9HfPbFQrP">pic.twitter.com/d9HfPbFQrP</a></p>&mdash; しゃまとん (@shamaton) <a href="https://twitter.com/shamaton/status/742011569735794688?ref_src=twsrc%5Etfw">June 12, 2016</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">[WIP] It is difficult for me to draw pixelart...<br>とりあえずキャラを用意して歩かせた。ドット絵はやっぱむずいな〜 <a href="https://t.co/W2SOEggWyT">pic.twitter.com/W2SOEggWyT</a></p>&mdash; しゃまとん (@shamaton) <a href="https://twitter.com/shamaton/status/738744102032801793?ref_src=twsrc%5Etfw">June 3, 2016</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</p>
]]></content>
        </item>
        
        <item>
            <title>[golang]Go1.5から1.6に更新した際のあれこれ（IntelliJとか）</title>
            <link>https://shamaton.dev/posts/217/</link>
            <pubDate>Fri, 01 Jul 2016 16:22:09 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/217/</guid>
            <description>お世話になっております。 しゃまとんです。 少し前（2016/02）にgo1.6がリリースされました。 で更新しなきゃと思っていたのですがやってい</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>少し前（2016/02）にgo1.6がリリースされました。
で更新しなきゃと思っていたのですがやっていなかったのでやったというメモです。</p>
<p>ちなみに1.6の新機能に関してはコチラでまとめてくださっています。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fqiita.com%2fksato9700%2fitems%2f5505e506c20b6048c218" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>Go自体の更新（アップグレード）はとてもシンプルです。公式でも下記のように言われています。</p>
<blockquote>
<p>If you are upgrading from an older version of Go you must first <a href="https://golang.org/doc/install#uninstall">remove the existing version</a>.</p>
</blockquote>
<p>公式で配布されているパッケージを利用している再は/usr/local以下にインストールされているはずなので、下記ように実行します。
削除したくない場合はディレクトリ名を変更してもいいかと思います。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e"># 現在のバージョンを削除</span>
rm -rf /usr/local/go

<span style="color:#75715e"># 残しておきたい場合（例）</span>
mv /usr/local/go /usr/local/go.1.5
</code></pre></div><p>コマンド実行後にダウンロードしたパッケージを実行するだけでアップグレードできます。
アップグレード後はおそらく管理者権限でインストールしているので、必要に応じてファイル権限を変更しておきます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e"># your_name：ユーザー名をいれてください</span>
chmod -R your_name:admin /usr/local/go
</code></pre></div><p>これで更新は完了ですが、外部のパッケージ（github.com）などをgo getしてた場合は
なくなっていると思うので再度go getが必要になるかもしれません。</p>
<p><strong>■ 1.6更新時のintelliJで対応したこと</strong></p>
<p>goの開発ではintelliJを使っているのですが、細かい設定を更新したのでこれも一応メモしておきます。
個人的に大きかったところとしてはvendor（外部パッケージ管理）の部分で、
GO15VENDOREXPERIMENTで提供されていた部分がデフォルトになったそうです。1.7でパラメータ自体が削除されるみたいです。</p>
<p>それではintelliJでGo関係の設定を変更していきます。</p>
<p>まずは既存のプロジェクトを開き、ツリーの一番したにあるExternal LibrariesからGoを右クリックし、
Open Library Settingsを選択します。 そしてNameのところを1.6にしておきます。</p>
<figure>
    <img src="/images/posts/2016/06/sdks.png"/> 
</figure>

<p>次にIntellij IDEA -&gt; Preferences -&gt; Languages &amp; Frameworks -&gt; Goを開き、Project Settingsを確認します。
ここではEnable vendoringが有効になっているかを確認しておきます。（デフォルトでは有効のはず）</p>
<figure>
    <img src="/images/posts/2016/06/projectsettings.png"/> 
</figure>

<p>もしDisableの状態でvendor配下の外部パッケージを参照しようとすると&hellip;</p>
<figure>
    <img src="/images/posts/2016/06/error.png"/> 
</figure>

<p>上記のようにエラーになります（赤色なだけだけど…）、正常な場合はコチラ</p>
<figure>
    <img src="/images/posts/2016/06/ok.png"/> 
</figure>

<p>Go Librariesは基本的に変更する必要なないと思いますが、何かあれば対応しておきましょう。</p>
<figure>
    <img src="/images/posts/2016/06/golibraries.png"/> 
</figure>

<p>なんか長くなってしまいましたが、vendoring対応してくれてよかったね！という感じですね！<br>
以上です。</p>
<p>■参考







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fqiita.com%2fdorayaki_kun%2fitems%2f6762a452010d42e38bd9" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>








<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fjunchang1031.hatenablog.com%2fentry%2f2016%2f03%2f12%2f175744" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

MacにGo言語の開発環境を構築する【IDE編】







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fakirachiku.com%2f2016%2f03%2f01%2fgo16-development.html" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
]]></content>
        </item>
        
        <item>
            <title>CentOS7に.NET Coreを入れてhello worldしてみる</title>
            <link>https://shamaton.dev/posts/209/</link>
            <pubDate>Fri, 24 Jun 2016 15:07:44 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/209/</guid>
            <description>お世話になっております。 しゃまとんです。 UnityでC#を触り始めて、ふと「LinuxでもC#で開発できるのだろうか？」と思いました。 たしか</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>UnityでC#を触り始めて、ふと「LinuxでもC#で開発できるのだろうか？」と思いました。<br>
たしかC#ってMicrosoft的な何かじゃなかったっけ・・・と思いつつググると。</p>
<p>.NET Coreなるものが存在するそうで、Windows / Mac / Linuxな環境でC#の開発や実行が可能だそうです。<br>
（monoとかいろいろあるんだけれど、まぁそれはあれで）</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fwww.microsoft.com%2fnet%2fcore%23centos" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>紹介ページをみると、なんとも簡単に環境を用意できそうだったのでhello worldするまでやってみました。<br>
サイトではCentOS7.1向けの手順となっていました（2016/06時点）。ちなみにPreview版でした。</p>
<p>とりあえず手元にあるCentOS6.7で試みたのですが、途中で何度もつまづきhello worldできなかったので、
何もなければCentOS7でやるのがいいと思います。</p>
<p>ちなみにCentOS7でもちょっと余分な手順が必要でした。（preview版）だからでしょうか・・・以下、手順となります。</p>
<p>まず最初に記載されているコマンドを実行します。
インストールしたての状態で実行すると何かしらのエラーが出ます。自分の時はこんな感じでした。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ curl -sSL https://raw.githubusercontent.com/dotnet/cli/rel/1.0.0-preview1/scripts/obtain/dotnet-install.sh | bash /dev/stdin --version 1.0.0-preview1-002702 --install-dir ~/dotnet
dotnet_install: Error: Unable to locate libunwind. Install libunwind to <span style="color:#66d9ef">continue</span>
dotnet_install: Error: Unable to locate libicu. Install libicu to <span style="color:#66d9ef">continue</span>
dotnet_install: Error: Unable to locate gettext. Install gettext to <span style="color:#66d9ef">continue</span>
</code></pre></div><p>何やら足らないので、yum install で追加していきます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo yum install libunwind libicu gettext
</code></pre></div><p>これで再度実行してみます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ curl -sSL https://raw.githubusercontent.com/dotnet/cli/rel/1.0.0-preview1/scripts/obtain/dotnet-install.sh | bash /dev/stdin --version 1.0.0-preview1-002702 --install-dir ~/dotnet
dotnet-install: Downloading https://dotnetcli.blob.core.windows.net/dotnet/beta/Binaries/1.0.0-preview1-002702/dotnet-dev-centos-x64.1.0.0-preview1-002702.tar.gz
dotnet-install: Extracting zip
dotnet-install: Adding to current process PATH: /home/game/dotnet. Note: This change will be visible only when sourcing script.
dotnet-install: Installation finished successfuly.
</code></pre></div><p>インストールに成功したようです。<br>
続いて手順通りにリンクを貼ります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo ln -s ~/dotnet/dotnet /usr/local/bin
</code></pre></div><p>手順通りに空のディレクトリを作成し、cdしたのち新規作成っぽいコマンドを実行します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ mkdir hwapp
<span style="color:#f92672">[</span>user@centos7 ~<span style="color:#f92672">]</span>$ cd hwapp/
<span style="color:#f92672">[</span>user@centos7 hwapp<span style="color:#f92672">]</span>$ dotnet new
Created new C# project in /home/user/hwapp.

<span style="color:#f92672">[</span>user@centos7 hwapp<span style="color:#f92672">]</span>$ ls
Program.cs project.json
</code></pre></div><p>さらに手順通りに実行してみます。<br>
restoreを実行すると、必要なモジュールをInstallするようですね。nugetして必要なものを解決してくれるようです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#f92672">[</span>user@centos7 hwapp<span style="color:#f92672">]</span>$ dotnet restore
log : Restoring packages <span style="color:#66d9ef">for</span> /home/game/hwapp/project.json...

...（中略）...

Installed:
<span style="color:#ae81ff">113</span> package<span style="color:#f92672">(</span>s<span style="color:#f92672">)</span> to /home/game/hwapp/project.json
</code></pre></div><p>最後に実行です。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#f92672">[</span>user@centos7 hwapp<span style="color:#f92672">]</span>$ dotnet run
Project hwapp <span style="color:#f92672">(</span>.NETCoreApp,Version<span style="color:#f92672">=</span>v1.0<span style="color:#f92672">)</span> will be compiled because expected outputs are missing
Compiling hwapp <span style="color:#66d9ef">for</span> .NETCoreApp,Version<span style="color:#f92672">=</span>v1.0

Compilation succeeded.
<span style="color:#ae81ff">0</span> Warning<span style="color:#f92672">(</span>s<span style="color:#f92672">)</span>
<span style="color:#ae81ff">0</span> Error<span style="color:#f92672">(</span>s<span style="color:#f92672">)</span>

Time elapsed 00:00:05.1812463
Hello World!
</code></pre></div><p>こんにちは。</p>
<p>これからC#が様々なOSで開発に利用されていくのでしょうか。<br>
Unity使っている人にはとっつきやすくていいかも（？）ですね〜</p>
<p>以上です。</p>
<p>■ 参考<br>
LinuxでもC#プログラミング(導入編)</p>
<p>■ メモ<br>
No package libmpc-devel available.といわれたら<br>
→ <a href="http://www.kakiro-web.com/linux/centos6-epel-install.html">epelを追加する<br>
</a></p>
<p>ldconfig -p | grep hogehoge でビルドしたライブラリが見つからない場合<a href="http://blog.goo.ne.jp/asakurah/e/7f9cdf8cbada8841c388ece8cd421432"><br>
/usr/local/libを認識させる</a></p>
]]></content>
        </item>
        
        <item>
            <title>アプリ – Reflect Number – をリリースしました</title>
            <link>https://shamaton.dev/posts/200/</link>
            <pubDate>Sat, 11 Jun 2016 23:45:18 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/200/</guid>
            <description>お世話になっております。 しゃまとんです。 昨日ですが、初めてUnityで作ったアプリをリリースしました。 Reflect Numberというタイトルです。 Un</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>昨日ですが、初めてUnityで作ったアプリをリリースしました。<br>
Reflect Numberというタイトルです。</p>
<p>Unityに使えるようになるためのきっかけとして作成しました。<br>
簡単な脳トレ系ゲームになります。</p>
<figure class="center">
    <img src="/images/posts/2016/06/ReflectNumber.png"/> 
</figure>

<p>あとよく使いそうな機能としてランキングを実装しました。<br>
Lobiを利用して、全期間と週間のランキングを用意しました。</p>
<p>サーバーを用意することなく、自分のサービスのように利用できてこんなのあったのか、という感じなので個人開発では有用だなと思いました。</p>
<p>どうぞよろしくお願いいたします。</p>
<p><a href="https://itunes.apple.com/jp/app/reflect-number/id1096148296?mt=8">iOSはこちら</a></p>
<p><a href="https://play.google.com/store/apps/details?id=com.shamaton.numberliner">androidはこちら</a></p>
]]></content>
        </item>
        
        <item>
            <title>[iOS] アプリを申請するときの広告まわりの設定</title>
            <link>https://shamaton.dev/posts/197/</link>
            <pubDate>Sat, 11 Jun 2016 12:41:25 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/197/</guid>
            <description>お世話になっております。 しゃまとんです。 iOSのアプリをitunes connectで申請するときにいつも検索してどうだったけなーとなるので、</description>
            <content type="html"><![CDATA[<p>お世話になっております。</p>
<p>しゃまとんです。</p>
<p>iOSのアプリをitunes connectで申請するときにいつも検索してどうだったけなーとなるので、
その際の設定メモです。対象になるアプリは何かしらの広告が表示されるものになります。</p>
<p>※2016/06時点のものなので、今後変わる可能性があります。</p>
<p>・輸出コンプライアンス<br>
→　いいえ</p>
<p>・コンテンツ配信件<br>
→　いいえ</p>
<p>・広告ID（Advertising Identifier又はIDFA）<br>
→　はい</p>
<p>■ このAppでは、下記の目的で広告ID（IDFA）を使用します<br>
→　App内で広告を出す<br>
のみにチェック</p>
<p>■ iOSの「追跡型広告を制限」設定<br>
→　チェックする</p>
<p>以上です。</p>
]]></content>
        </item>
        
        <item>
            <title>[Unity] DoTweenで擬似的に追従させてみる</title>
            <link>https://shamaton.dev/posts/194/</link>
            <pubDate>Thu, 09 Jun 2016 13:43:54 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/194/</guid>
            <description>お世話になっております。 しゃまとんです。 以前にDoTweenで跳ねるような演出を記事にしたのですが、 はねた後に続けて何かを追従する（追いかけ</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>以前にDoTweenで跳ねるような演出を記事にしたのですが、
はねた後に続けて何かを追従する（追いかける）ような仕組みを実装してみました。</p>
<p>前回の記事</p>









<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fshamaton.dev%2fposts%2f176" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>追従なので、対象のtransform.positionにDoMoveすればよさ気なのですが、
それだと対象物が動き回っている場合、設定した場所までしか移動せず中途半端な感じになってしまいます。</p>
<p>そこでDoTweenのサンプルにもあったのですが、
ChangeEndValueという機能を使えば呼び出し時に設定したpositionを更新してTweenさせることができるようです。</p>
<p>値を更新するにはDoMove実行時に返り値を取得しておき、それに対してChangeEndValueを呼び出す形になります。</p>
<p>サンプルはこんな感じ。<br>
はねた後から、対象との距離を確認して一定値に達していない場合は更新するようにしています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">using</span> UnityEngine;
<span style="color:#66d9ef">using</span> System.Collections;

<span style="color:#66d9ef">using</span> DG.Tweening;

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">TextAction</span> : MonoBehaviour {

  <span style="color:#66d9ef">private</span> Transform myTrans;

  <span style="color:#66d9ef">public</span> Transform target;

  <span style="color:#66d9ef">private</span> Tweener tweener;

  <span style="color:#75715e">// 起動時
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">void</span> Start() {
    myTrans = transform;

    StartCoroutine(start());
  }

  <span style="color:#66d9ef">private</span> IEnumerator start() {
    <span style="color:#75715e">// 待つ
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">yield</span> <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> WaitForSeconds(<span style="color:#ae81ff">1</span>);

    Sequence seq = DOTween.Sequence();
    <span style="color:#75715e">// バウンド
</span><span style="color:#75715e"></span>    seq.Append(myTrans.DOLocalMoveY(-<span style="color:#ae81ff">0.1f</span>, <span style="color:#ae81ff">1f</span>).SetEase(Ease.OutBounce).OnComplete(callback).SetRelative());
    seq.Join(myTrans.DOLocalMoveX(<span style="color:#ae81ff">0.3f</span>, <span style="color:#ae81ff">1f</span>).SetRelative());
  }

  <span style="color:#75715e">// 更新
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">void</span> Update () {
    <span style="color:#75715e">// 標的を適当に移動
</span><span style="color:#75715e"></span>    Vector3 pos = target.position;
    pos.x -= <span style="color:#ae81ff">0.005f</span>;
    target.position = pos;

    <span style="color:#75715e">// バウンド終了後から監視する
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (tweener != <span style="color:#66d9ef">null</span>) {
      <span style="color:#75715e">// ある程度近づいたら消す
</span><span style="color:#75715e"></span>      <span style="color:#66d9ef">if</span> (Vector3.Distance(myTrans.position, target.position) &lt; <span style="color:#ae81ff">0.05f</span>) {
        <span style="color:#75715e">// 消す
</span><span style="color:#75715e"></span>        gameObject.SetActive(<span style="color:#66d9ef">false</span>);
      }
      <span style="color:#75715e">// 終点を更新
</span><span style="color:#75715e"></span>      tweener.ChangeEndValue(target.position, <span style="color:#ae81ff">0.2f</span>, <span style="color:#66d9ef">true</span>);
    }
  }

  <span style="color:#75715e">// バウンド終了後に呼ばれる
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">void</span> callback() {
    tweener = myTrans.DOMove(target.position, <span style="color:#ae81ff">0.5f</span>);
  }
}
</code></pre></div><p>実行するとこんな感じです。<br>
赤が対象（target）オブジェクト、白がTextActionを追加したオブジェクトです。</p>
<figure class="center">
    <img src="/images/posts/2016/06/dotween_chase.gif"/> 
</figure>

<p>これですが、あくまで擬似的なものなので障害物等は考慮されません。色々考慮したい場合はNavMeshを使うのがいいみたいです（まだ使ったこと無い）<br>
演出としてある程度使えるかもーと思います。</p>
<p>以上です。</p>
]]></content>
        </item>
        
        <item>
            <title>[Unity] transformはcacheした方が早いけど、gameObjectはどうなんだろう</title>
            <link>https://shamaton.dev/posts/187/</link>
            <pubDate>Sun, 29 May 2016 07:42:26 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/187/</guid>
            <description>お世話になっております。 しゃまとんです。 Unityでパフォーマンスのよいコードを書く上でコンポーネントを取得してしまって扱うのは常套手段です</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>Unityでパフォーマンスのよいコードを書く上でコンポーネントを取得してしまって扱うのは常套手段ですよね。<br>
transformはgameObject.transfromで呼び出すと実は毎回GetComponentしていて遅いということで自分も取得して使うようにしています。</p>
<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">GetComponentについて。<br>同一GameObjectなら：RequireComponentとして、Startで取得<br>違うGameObjectなら：FindWithTagとAssertのコンボで<a href="https://twitter.com/hashtag/UnityTips?src=hash&amp;ref_src=twsrc%5Etfw">#UnityTips</a> <a href="https://t.co/8tAeYBxmWn">pic.twitter.com/8tAeYBxmWn</a></p>&mdash; 伊藤周@おなかソフト (@warapuri) <a href="https://twitter.com/warapuri/status/730933842895208449?ref_src=twsrc%5Etfw">May 13, 2016</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>そこで疑問があったのですが、gameObjectはどうなのかな〜もしかしてtransformみたいに遅かったりするのだろうか&hellip;と思い、
簡単ですが計測してみました。（他に誰か調べてたりしないかな&hellip;）</p>
<p>計測に利用したコードはこんな感じで、適当なゲームオブジェクトを作成してスクリプトをひっつけるだけです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">using</span> UnityEngine;
<span style="color:#66d9ef">using</span> System.Collections;
<span style="color:#66d9ef">using</span> System.Diagnostics; 

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">CacheTest</span> : MonoBehaviour {

  <span style="color:#75715e">// Use this for initialization
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">void</span> Start () {
    Transform cacheTrans = transform;

    <span style="color:#66d9ef">var</span> sw = <span style="color:#66d9ef">new</span> Stopwatch();
    sw.Start();
    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i = <span style="color:#ae81ff">0</span>; i &amp;lt; <span style="color:#ae81ff">1000000</span>; i++) {
      Transform t = cacheTrans;
    }
    sw.Stop();
    <span style="color:#75715e">// キャッシュしたtransfrom
</span><span style="color:#75715e"></span>    UnityEngine.Debug.Log(<span style="color:#e6db74">&#34;cacheTransform : &#34;</span> + sw.ElapsedMilliseconds);

    sw.Reset();
    sw.Start();
    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i = <span style="color:#ae81ff">0</span>; i &amp;lt; <span style="color:#ae81ff">1000000</span>; i++) {
      Transform t = transform;
    }
    sw.Stop();
    <span style="color:#75715e">// キャッシュしてないtransform
</span><span style="color:#75715e"></span>    UnityEngine.Debug.Log(<span style="color:#e6db74">&#34;getTransform : &#34;</span> + sw.ElapsedMilliseconds);

    GameObject cacheObj = gameObject;

    sw.Reset();
    sw.Start();
    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i = <span style="color:#ae81ff">0</span>; i &amp;lt; <span style="color:#ae81ff">1000000</span>; i++) {
      GameObject g = cacheObj;
    }
    sw.Stop();
    <span style="color:#75715e">// キャッシュしたgameObject
</span><span style="color:#75715e"></span>    UnityEngine.Debug.Log(<span style="color:#e6db74">&#34;cacheGameObject : &#34;</span> + sw.ElapsedMilliseconds);

    sw.Reset();
    sw.Start();
    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i = <span style="color:#ae81ff">0</span>; i &amp;lt; <span style="color:#ae81ff">1000000</span>; i++) {
      GameObject g = gameObject;
    }
    sw.Stop();
    <span style="color:#75715e">// キャッシュしてないgameObject
</span><span style="color:#75715e"></span>    UnityEngine.Debug.Log(<span style="color:#e6db74">&#34;get GameObject : &#34;</span> + sw.ElapsedMilliseconds);
  }
}
</code></pre></div><p>で計測してみたら、transformと似たような結果になりました。</p>
<figure>
    <img src="/images/posts/2016/05/time_check.png"/> 
</figure>

<p>gameObjectも場合によってはキャッシュしたほうがよいかもですね。<br>
以上です。</p>
<p>■参考<br>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fqiita.com%2fcrow_ver6%2fitems%2f3dc6ba29062d397bbf60" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
]]></content>
        </item>
        
        <item>
            <title>[golang]pre-commit-hookでビルドチェックしてみる</title>
            <link>https://shamaton.dev/posts/183/</link>
            <pubDate>Sat, 14 May 2016 12:48:14 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/183/</guid>
            <description>お世話になっております。 しゃまとんです。 gitでプロジェクトやコードを管理する場合、commit時にhookをいれて変なcommitが混ざら</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>gitでプロジェクトやコードを管理する場合、commit時にhookをいれて変なcommitが混ざらないようにすることができます。
pre-commit-hookという機能なのですが、phpに関しての設定記事はよく見るのですが、goでもやりたいなーということで考えてみました。</p>
<p>やはりやりたいのはコードのビルドが通るかなので、、コンパイルチェック的なものをしたいのですが、
そういうのはスクリプト言語のチェック機構なので普通にビルドして確認することにしてみます。（phpならphp -l、perlならperl -cでしょうか）</p>
<p>下記がチェックスクリプトです。<br>
通常のビルドをしているのですが、問題なく成功したときに実行ファイルができてしまうので、削除処理をしてから最後の手続きをしています。</p>
<p>{リポジトリトップ}/.git/hooks/pre-commitあたりに記載するとcommit時に実行してくれます。
（今回はtouch pre-commitで作成しました）</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e">#!/bin/sh
</span><span style="color:#75715e"></span>
HAS_ERROR<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>
TMP<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;___build_check&#34;</span>

<span style="color:#75715e"># go file num</span>
NUM<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>git diff --cached --name-status | cut -f2 | grep &amp;<span style="color:#75715e">#039;.go$&amp;#039; | wc -l`</span>

<span style="color:#75715e"># build check</span>
<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">${</span>NUM<span style="color:#e6db74">}</span> -ne <span style="color:#ae81ff">0</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
    echo <span style="color:#e6db74">&#34;build checking...&#34;</span>
    <span style="color:#66d9ef">for</span> f in <span style="color:#e6db74">`</span>git diff --cached --name-status | cut -f2 | grep &amp;<span style="color:#75715e">#039;.go$&amp;#039;`;</span>
    <span style="color:#66d9ef">do</span>
        <span style="color:#66d9ef">if</span> ! go build -o <span style="color:#e6db74">${</span>TMP<span style="color:#e6db74">}</span> <span style="color:#e6db74">${</span>f<span style="color:#e6db74">}</span>; <span style="color:#66d9ef">then</span>
            HAS_ERROR<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
        <span style="color:#66d9ef">fi</span>
    <span style="color:#66d9ef">done</span>
<span style="color:#66d9ef">fi</span>

<span style="color:#75715e"># delete test build file</span>
<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> -e <span style="color:#e6db74">${</span>TMP<span style="color:#e6db74">}</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
    rm <span style="color:#e6db74">${</span>TMP<span style="color:#e6db74">}</span>
<span style="color:#66d9ef">fi</span>

<span style="color:#75715e"># has error?</span>
<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">${</span>HAS_ERROR<span style="color:#e6db74">}</span> -ne <span style="color:#ae81ff">0</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
    echo <span style="color:#e6db74">&#34;build error found!!&#34;</span>
    exit <span style="color:#ae81ff">1</span>
<span style="color:#66d9ef">fi</span>

<span style="color:#75715e"># 正常終了</span>
exit <span style="color:#ae81ff">0</span>
</code></pre></div><p>実行するとこんな感じ。（わかりづらいですが&hellip;）</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"> git commit
build checking...

<span style="color:#75715e"># abortしました</span>
Aborting commit due to empty commit message.
</code></pre></div><p>今回の場合はコミット対象のものを単一ファイルでビルドチェックをしていくのですが、
記載をかえれば大きなアプリケーションにもチェックを入れられると思います。</p>
<p>以上です。</p>
<p>■参考







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fblog.manaten.net%2fentry%2f645" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
]]></content>
        </item>
        
        <item>
            <title>[Unity] DoTweenでuGUIにバウンドさせてみる</title>
            <link>https://shamaton.dev/posts/176/</link>
            <pubDate>Sun, 01 May 2016 11:57:45 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/176/</guid>
            <description>お世話になっております。 しゃまとんです。 unityで何かしらのオブジェクトに対して、バウンドアクション（跳ねるような動作）をさせたいなーと思</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>unityで何かしらのオブジェクトに対して、バウンドアクション（跳ねるような動作）をさせたいなーと思いまして、その際のメモです。</p>
<p>やはりtween系のアセットを利用してやるのが楽そうだなということで、今回もiTweenを使うかな−と思っていたのですが、
こんな情報を見まして。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fassetstore.unity.com%2fpackages%2ftools%2fanimation%2fitween-84%3flocale%3dja-JP" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<blockquote>
<p>なるほど、iTweenに慣れてしまう前にDOTweenにするのが良いか RT <!-- raw HTML omitted -->@takaoka_hide<!-- raw HTML omitted -->: DOTweenと他のTweenAssetのスピード比較表 <!-- raw HTML omitted -->pic.twitter.com/24283nfP3v<!-- raw HTML omitted -->
— ホウチ (@houchi_game) <!-- raw HTML omitted -->2016年4月22日<!-- raw HTML omitted --></p>
</blockquote>
<p>後々処理落ちが発生すると面倒そうだな…というのと、DoTweenが軽くてよさそうだなということで、
使い始めがてら利用して見ました。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fdotween.demigiant.com%2findex.php" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>DoTweenではtransformに対して、Tweenの関数が埋め込まれる形で利用できるように実装されていることで、
iTweenよりも簡潔に記載できるようです。callbackも簡単に設定できました。</p>
<p>とりあえず跳ねるっぽいコードです（callbackはログ出力のみです）。
利用する際はusingが必要です。テキスト等のUIに追加してください。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">using</span> UnityEngine;

<span style="color:#75715e">// これを追加する
</span><span style="color:#75715e"></span><span style="color:#66d9ef">using</span> DG.Tweening;

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">BoundText</span> : MonoBehaviour {
  <span style="color:#75715e">// Use this for initialization
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">void</span> Start () {
  }

  <span style="color:#75715e">// Update is called once per frame
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">void</span> Update () {

    <span style="color:#75715e">// キー入力
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (Input.GetKeyDown(KeyCode.H)) {
      <span style="color:#75715e">// 跳ねるっぽく
</span><span style="color:#75715e"></span>      transform.DOLocalMoveY(-<span style="color:#ae81ff">30f</span>, <span style="color:#ae81ff">2f</span>).SetEase(Ease.OutBounce);
      transform.DOLocalMoveX(<span style="color:#ae81ff">30f</span>, <span style="color:#ae81ff">2f</span>).OnComplete(callback);
    }
  }

  <span style="color:#75715e">// コールバック
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">void</span> callback() {
    Debug.Log(<span style="color:#e6db74">&#34;do tween callback!!&#34;</span>);
  }
}
</code></pre></div><p>動作はこんな感じになります。</p>
<figure>
    <img src="/images/posts/2016/04/bound_text.gif"/> 
</figure>

<p>iTweenよりも直感的だったので、今後はこちらを利用したいと思います。<br>
以上です。</p>
<p>■参考







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2falbatrus.com%2fentry%2fmain%2funity%2f7416" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>








<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2ftkhsken.hatenablog.com%2fentry%2f2016%2f04%2f06%2f220600" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>








<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fesakun.hateblo.jp%2fentry%2f2015%2f08%2f26%2f090000" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
]]></content>
        </item>
        
        <item>
            <title>[Unity] ジェネリックを使っている親クラス内のクラスはインスペクタに表示できない</title>
            <link>https://shamaton.dev/posts/180/</link>
            <pubDate>Fri, 29 Apr 2016 05:59:15 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/180/</guid>
            <description>お世話になっております。 しゃまとんです。 タイトルの通りなのですが、クラス内に定義した内部クラスや構造体をインスペクタに表示して、色々調整した</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>タイトルの通りなのですが、クラス内に定義した内部クラスや構造体をインスペクタに表示して、色々調整した場合があると思います。</p>
<p>上記の場合[System.Serializable]と[SerializableField]を利用すれば問題なく表示されます。<br>
これに加えて、親クラス（基底クラス）でジェネリックを利用しつつ内部クラスを定義して小クラスからインスペクタ上で操作したいと思い下記みたいな感じにしました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">using</span> UnityEngine;
<span style="color:#66d9ef">using</span> System.Collections;

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">TestParent</span>&lt;T&gt; : MonoBehaviour <span style="color:#66d9ef">where</span> T : MonoBehaviour {
  <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">public</span> T instance;
<span style="color:#a6e22e">
</span><span style="color:#a6e22e">  [System.Serializable]</span>
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">TestInnerParent</span> {
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span>   hoge;
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">float</span> fuga;
  }
<span style="color:#a6e22e">
</span><span style="color:#a6e22e">  [SerializeField]</span>
  <span style="color:#66d9ef">private</span> TestInnerParent innerValue;

  <span style="color:#75715e">// シングルトンにする処理...
</span><span style="color:#75715e"></span>}
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">using</span> UnityEngine;
<span style="color:#66d9ef">using</span> System.Collections;

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">TestChild</span> : TestParent&lt;TestChild&gt; {
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> childHoge;
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> childFuga;
}
</code></pre></div><p>こうすると表示されなくなってしまいました。</p>
<p><a href="https://gyazo.com/df3eb5de6e8824aeaffe28673f552f4e"><img src="https://i.gyazo.com/df3eb5de6e8824aeaffe28673f552f4e.png" alt="https://gyazo.com/df3eb5de6e8824aeaffe28673f552f4e"></a></p>
<p>どうしても表示したい場合は内部クラスを外に出せば表示できるようです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">using</span> UnityEngine;
<span style="color:#66d9ef">using</span> System.Collections;

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">TestParent</span>&lt;T&gt; : MonoBehaviour <span style="color:#66d9ef">where</span> T : MonoBehaviour {
  <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">public</span> T instance;
<span style="color:#a6e22e">
</span><span style="color:#a6e22e">  [SerializeField]</span>
  <span style="color:#66d9ef">private</span> TestInnerParent innerValue;

  <span style="color:#75715e">// シングルトンにする処理...
</span><span style="color:#75715e"></span>}
<span style="color:#a6e22e">
</span><span style="color:#a6e22e">[System.Serializable]</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">TestInnerParent</span> {
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span>   hoge;
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">float</span> fuga;
}
</code></pre></div><p>これで表示されます。</p>
<p><a href="https://gyazo.com/da588e9bbab7c83d47598c8b7fcc41e4"><img src="https://i.gyazo.com/da588e9bbab7c83d47598c8b7fcc41e4.png" alt="https://gyazo.com/da588e9bbab7c83d47598c8b7fcc41e4"></a></p>
<p>他の方も書かれていますが、ジェネリック周りはちとうまくいかないのですね。<br>
以上です。</p>
<p>■参考







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fqiita.com%2fk_yanase%2fitems%2f3bb59963a6f477f5a523" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>








<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fftvoid.com%2fblog%2fpost%2f732" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
]]></content>
        </item>
        
        <item>
            <title>[Unity]PC用とかに解像度対応どうするか</title>
            <link>https://shamaton.dev/posts/171/</link>
            <pubDate>Sat, 23 Apr 2016 11:45:12 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/171/</guid>
            <description>お世話になります。 しゃまとんです。 いつも問題になる解像度についてなのですが、どの辺を設定しておけばうまいことやれるかなーという忘備録になりま</description>
            <content type="html"><![CDATA[<p>お世話になります。<br>
しゃまとんです。</p>
<p>いつも問題になる解像度についてなのですが、どの辺を設定しておけばうまいことやれるかなーという忘備録になります。</p>
<p>PC用にゲーム作る場合ってどうするのかな、ユーザーによってフルスクリーンだったり、
この解像度で遊びたいとかありそうだなーともやもやしているのですが、
やはり基本解像度を決めてあとは拡縮させるのがよさ気だなという結論に至りました。</p>
<p>※まだ何も作ってないのでアレですが。。</p>
<p>解像度の周りの設定として、2要素の設定が大事かなと思いました</p>
<ul>
<li>Player Setting</li>
<li>Canvas</li>
</ul>
<p>■Player Setting<br>
遊ぶときにどのような環境でプレーさせるかの設定。個人的には起動時フルスクリーンのチェックも外したい。</p>
<ul>
<li>Default Screen Width / heightに基本解像度を指定</li>
<li>Resizable Windowのチェックを外す</li>
<li>Supported Aspect Ratioでアスペクト比を制御</li>
</ul>
<p>この辺りを設定することで意図した解像度でゲームが表示されるでしょうか。</p>
<figure>
    <img src="/images/posts/2016/04/playersetting.png"/> 
</figure>

<p>■Canvas<br>
キャンバスはPlayer Settingとは違い全体設定ではないですが、UIの描画に大きく関わっているので追加するキャンバス毎に対応が必要かと思われます。Canvasに付いているCanvas Scalerで設定できます。</p>
<ul>
<li>UI Scale Modeを[Scale With Screen Size]にする</li>
<li>Reference Resolutionを基本解像度にする</li>
<li>Screen Match ModeをExpandにする（場合によって）</li>
</ul>
<p>この辺りを設定すればよさそうです。</p>
<figure>
    <img src="/images/posts/2016/04/canvas_scaler.png"/> 
</figure>

<p>それと、設定ではないけど見えてはいけない領域対策として何かタイリングして隠すものを用意しておくよさげかなーと思いました。</p>
<p>あと、検証がてらですがPixel Per Unitも注意しておかないと、意図した大きさで表示されなかったりしますね。</p>
<p>この辺は設定をいじってみて、実際の動作を確認すると理解が早いかなと思います。<br>
以上です。</p>
<p>■参考







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2ftsubakit1.hateblo.jp%2fentry%2f2014%2f12%2f11%2f223427" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
]]></content>
        </item>
        
        <item>
            <title>[Unity]複数のuGUIを円運動させる</title>
            <link>https://shamaton.dev/posts/166/</link>
            <pubDate>Sat, 09 Apr 2016 04:34:25 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/166/</guid>
            <description>お世話になっております。 しゃまとんです。 UnityのuGUIを使って、画面上で円運動させたいなーと思いやってみました。 Mathfにあるsin</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>UnityのuGUIを使って、画面上で円運動させたいなーと思いやってみました。<br>
Mathfにあるsin/cos関数をx，yに当てはめることで回転させられます。</p>
<p>sin/cos関数にはラジアンを渡します。MathfのDeg2Radを使うと角度を簡単にラジアンに変換できます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">float</span> rad = angle * Mathf.Deg2Rad;

<span style="color:#66d9ef">float</span> x = Mathf.Cos(rad) * r;
<span style="color:#66d9ef">float</span> y = Mathf.Sin(rad) * r;
</code></pre></div><p>今回は複数のUIオブジェクトを均等に配置したかったので、ベースオブジェクトを用意してスクリプト上から複製して、
座標計算して設定しています。<br>
半径はスクリプトで定義してもいいですし、
ベースオブジェクトを0度などわかりやすい位置に置いて利用してもいいと思います。</p>
<figure>
    <img src="/images/posts/2016/04/UI_inspector.png"/> 
</figure>

<p>スクリプトは上記画像のUIオブジェクトにつけて、Baseを参照させます。<br>
コードはこんな感じです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">using</span> UnityEngine;
<span style="color:#66d9ef">using</span> UnityEngine.UI;
<span style="color:#66d9ef">using</span> System.Collections;
<span style="color:#66d9ef">using</span> System.Collections.Generic;

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">UICircle</span> : MonoBehaviour {
  <span style="color:#75715e">// 回転速度
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">float</span> speed = <span style="color:#ae81ff">2f</span>;
  <span style="color:#75715e">// 生成数
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">int</span> num = <span style="color:#ae81ff">5</span>;
<span style="color:#a6e22e">
</span><span style="color:#a6e22e">  [SerializeField]</span>
  <span style="color:#66d9ef">private</span> Image imgBase; <span style="color:#75715e">// ベース
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">float</span> r;       <span style="color:#75715e">// 半径
</span><span style="color:#75715e"></span>
  <span style="color:#75715e">// 回転に利用する
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">private</span> List&amp;lt;RectTransform&amp;gt; transes = <span style="color:#66d9ef">new</span> List&amp;lt;RectTransform&amp;gt;();
  <span style="color:#66d9ef">private</span> List&amp;lt;<span style="color:#66d9ef">float</span>&amp;gt; startRads = <span style="color:#66d9ef">new</span> List&amp;lt;<span style="color:#66d9ef">float</span>&amp;gt;();

  <span style="color:#75715e">// cache
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">private</span> Transform myTrans;

  <span style="color:#66d9ef">void</span> Start() {
    <span style="color:#75715e">// キャッシュする
</span><span style="color:#75715e"></span>    myTrans = transform;

    <span style="color:#75715e">// 半径を取得
</span><span style="color:#75715e"></span>    r = imgBase.rectTransform.localPosition.y;

    <span style="color:#75715e">// ベースから生成
</span><span style="color:#75715e"></span>    GameObject objBase = imgBase.gameObject;
    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i = <span style="color:#ae81ff">0</span>; i &amp;lt; num; i++) {
      GameObject obj = Instantiate(objBase);
      obj.transform.SetParent(myTrans, <span style="color:#66d9ef">false</span>);

      RectTransform trans = obj.GetComponent&amp;lt;RectTransform&amp;gt;();

      <span style="color:#75715e">// 角度
</span><span style="color:#75715e"></span>      <span style="color:#66d9ef">float</span> angle = i * (<span style="color:#ae81ff">360</span> / num) + <span style="color:#ae81ff">90f</span>;
      <span style="color:#75715e">// ラジアン
</span><span style="color:#75715e"></span>      <span style="color:#66d9ef">float</span> rad = angle * Mathf.Deg2Rad;
      <span style="color:#75715e">// 座標変換
</span><span style="color:#75715e"></span>      <span style="color:#66d9ef">float</span> x = Mathf.Cos(rad) * r;
      <span style="color:#66d9ef">float</span> y = Mathf.Sin(rad) * r;

      <span style="color:#75715e">// 初期位置
</span><span style="color:#75715e"></span>      trans.anchoredPosition = <span style="color:#66d9ef">new</span> Vector2(x, y);

      <span style="color:#75715e">// update用に取得
</span><span style="color:#75715e"></span>      transes.Add(trans);
      startRads.Add(rad);
    }

    <span style="color:#75715e">// ベースを消す
</span><span style="color:#75715e"></span>    objBase.SetActive(<span style="color:#66d9ef">false</span>);
  }

  <span style="color:#66d9ef">void</span> Update () {
    <span style="color:#75715e">// 回転処理
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i = <span style="color:#ae81ff">0</span>; i &amp;lt; transes.Count; i++) {
      <span style="color:#66d9ef">float</span> nowRad = Time.time * speed + startRads[i];
      <span style="color:#66d9ef">float</span> x = Mathf.Cos(nowRad) * r;
      <span style="color:#66d9ef">float</span> y = Mathf.Sin(nowRad) * r;

      transes[i].anchoredPosition = <span style="color:#66d9ef">new</span> Vector2(x, y);
    }
  }
}
</code></pre></div><p>実行するとくるくると回ります。</p>
<figure>
    <img src="/images/posts/2016/04/circle.gif"/> 
</figure>

<p>以上です。</p>
<p>■ 参考<br>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fmatudozer.blog.fc2.com%2fblog-entry-21.html" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
]]></content>
        </item>
        
        <item>
            <title>[Unity]パッケージ重複でAndroidのBuildに失敗した</title>
            <link>https://shamaton.dev/posts/163/</link>
            <pubDate>Sun, 27 Mar 2016 03:05:18 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/163/</guid>
            <description>お世話になっております。 しゃまとんです。 Unityのモバイル開発で外部のサービスを組み込む場合、iOSやAndroid用のパッケージを利用す</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>Unityのモバイル開発で外部のサービスを組み込む場合、iOSやAndroid用のパッケージを利用することになるのですが、
下記のようなエラーが出ることがあります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Error building Player: CommandInvokationFailure: Unable to convert classes into dex format. See the Console for details. 
/Library/Java/JavaVirtualMachines/jdk1.7.0_65.jdk/Contents/Home/bin/java -Xmx2048M -Dcom.android.sdkmanager.toolsdir=&#34;/Users/mukaidaichi/Developer/Android/sdk/tools&#34; -Dfile.encoding=UTF8 -jar &#34;/Applications/Unity/Unity.app/Contents/BuildTargetTools/AndroidPlayer/sdktools.jar&#34;
</code></pre></div><p>このようなメッセージがでていて更に下記のようなメッセージが続く場合</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">UNEXPECTED TOP-LEVEL EXCEPTION: 
java.lang.IllegalArgumentException: already added:
</code></pre></div><p>何かのパッケージが複数同梱されている状態になっています。<br>
already addedの後に続くメッセージにパッケージ名に似た文字列が表示されていると思います。</p>
<p>今回のメモでは、android-support-v4が外部のunitypackageを利用した際に別のディレクトリに複数配置されていました。</p>
<p>対処としては、どちらかを削除することで解決できました。<br>
以上です。</p>
]]></content>
        </item>
        
        <item>
            <title>[Unity]LitJsonで入れ子なJsonの使い方</title>
            <link>https://shamaton.dev/posts/161/</link>
            <pubDate>Sun, 06 Mar 2016 10:31:19 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/161/</guid>
            <description>お世話になっております。 しゃまとんです。 UnityでLobiを利用したランキングなんぞ使ってみようと画策しております。 他のサービスでは、サー</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>UnityでLobiを利用したランキングなんぞ使ってみようと画策しております。<br>
他のサービスでは、サービス側の画面でランキングを表示するような感じですが、
LobiではランキングをJSONで取得できるようになっており、ゲーム内に合わせた表示ができるっぽくなっています。</p>
<p>データはこんな感じ。すべてstringで返ってくるようです。（抜粋）</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">{
  &#34;id&#34; : &#34;test_ranking&#34;,
  &#34;status_code&#34; : &#34;0&#34;,
  &#34;result&#34; : {
    &#34;cursor&#34; : &#34;1&#34;,
    &#34;limit&#34;  : &#34;10&#34;,
    &#34;orders&#34; : [
      {
        &#34;display_score&#34; : &#34;12345ほん&#34;,
        &#34;name&#34;          : &#34;こぬこ1&#34;,
        &#34;rank&#34;          : &#34;1&#34;,
        &#34;score&#34;         : &#34;12345&#34;
      },
      {
        &#34;display_score&#34; : &#34;1234ほん&#34;,
        &#34;name&#34;          : &#34;こぬこ2&#34;,
        &#34;rank&#34;          : &#34;2&#34;,
        &#34;score&#34;         : &#34;1234&#34;
      }
    ],
    &#34;ranking&#34; : {
      &#34;icon&#34;       : &#34;/img/icon/none_appranking_120.png&#34;,
      &#34;id&#34;         : &#34;shippo&#34;,
      &#34;join_count&#34; : &#34;100&#34;,
      &#34;name&#34;       : &#34;しっぽすう&#34;
    },
    &#34;self_order&#34; : {
      &#34;display_score&#34; : &#34;123456ほん&#34;,
      &#34;name&#34;          : &#34;こぬこ1&#34;,
      &#34;rank&#34;          : &#34;1&#34;,
      &#34;score&#34;         : &#34;12345&#34;
    },
    &#34;total_results&#34; : &#34;10&#34;
  }
}
</code></pre></div><p>というところで、自分はLitJsonを使ってJSONの処理をしているのですが、
記事ではややこしい構造のJSONを扱っている記事があまりなかったので、調べたついでにメモしておきます。</p>
<p>やり方としては2つ<br>
・LitJson.JsonData側で各要素にアクセス<br>
・ToObject時に構造体、クラスに突っ込む<br>
です。各やり方は下記のとおりです。</p>
<p>■ JsonData型でのアクセス<br>
ToObjectの時に型を指定しないとJsonData型になり、Mapのように扱えます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">void</span> keyAccess() {

  TextAsset json = Resources.Load(<span style="color:#e6db74">&#34;Json/test&#34;</span>) <span style="color:#66d9ef">as</span> TextAsset;
  JsonData info = JsonMapper.ToObject(json.text);
  Debug.Log(<span style="color:#e6db74">&#34;id : &#34;</span> + info[<span style="color:#e6db74">&#34;id&#34;</span>] + <span style="color:#e6db74">&#34; st : &#34;</span> + info[<span style="color:#e6db74">&#34;status_code&#34;</span>]);
  Debug.Log(<span style="color:#e6db74">&#34;result : &#34;</span> + info[<span style="color:#e6db74">&#34;result&#34;</span>][<span style="color:#e6db74">&#34;cursor&#34;</span>]);


  JsonData result = (JsonData)info[<span style="color:#e6db74">&#34;result&#34;</span>];

  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i = <span style="color:#ae81ff">0</span>; i &amp;lt; result[<span style="color:#e6db74">&#34;orders&#34;</span>].Count; i++) {
    Debug.Log(result[<span style="color:#e6db74">&#34;orders&#34;</span>][i][<span style="color:#e6db74">&#34;name&#34;</span>]);
  }
}
</code></pre></div><p>■構造体を定義してのアクセス<br>
ToObject時に指定すると、構造体に展開してくれます。データと型が異なる場合はエラーになります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">void</span> toStruct() {

  TextAsset json = Resources.Load(<span style="color:#e6db74">&#34;Json/test&#34;</span>) <span style="color:#66d9ef">as</span> TextAsset;

  Response res = JsonMapper.ToObject&amp;lt;Response&amp;gt;(json.text);
  Debug.Log(res.id);
  Debug.Log(res.status_code);
  Debug.Log(res.result.cursor);
  Debug.Log(res.result.limit);
  <span style="color:#66d9ef">foreach</span> (Response.Result.User user <span style="color:#66d9ef">in</span> res.result.orders) {
    Debug.Log(user.display_score);
  }
  Debug.Log(res.result.ranking.icon);
  Debug.Log(res.result.total_results);
  Debug.Log(res.result.self_order.display_score);

  <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;&#34;</span>;
}


<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Response</span> {

  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Result</span> {
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">User</span> {
      <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> display_score { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">set</span>; }
      <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> icon          { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">set</span>; }
      <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> is_self       { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">set</span>; }
      <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> name          { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">set</span>; }
      <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> rank          { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">set</span>; }
      <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> score         { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">set</span>; }
      <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> uid           { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">set</span>; }
    };

    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Ranking</span> {
      <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> icon       { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">set</span>; }
      <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> id         { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">set</span>; }
      <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> join_count { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">set</span>; }
      <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> name       { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">set</span>; }
    }
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> limit { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">set</span>; }
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> cursor { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">set</span>; }
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> total_results { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">set</span>; }
    <span style="color:#66d9ef">public</span> List&amp;lt;User&amp;gt; orders { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">set</span>;}
    <span style="color:#66d9ef">public</span> Ranking ranking { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">set</span>;}
    <span style="color:#66d9ef">public</span> User self_order { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">set</span>;}
  }
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> id          { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">set</span>; }
  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">string</span> status_code { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">set</span>; }
  <span style="color:#66d9ef">public</span> Result result      { <span style="color:#66d9ef">get</span>; <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">set</span>; }
}
</code></pre></div><p>構造体で定義された変数が存在しない場合は無視されるようですね。<br>
キャストも必要なく、コードも見やすいので個人的には構造体かなーと思いました。</p>
<p>以上です。</p>
]]></content>
        </item>
        
        <item>
            <title>GithubクローンのGitBucketをCentOS6に入れる</title>
            <link>https://shamaton.dev/posts/154/</link>
            <pubDate>Sat, 20 Feb 2016 03:41:24 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/154/</guid>
            <description>お世話になっております。 しゃまとんです。 ひょんなことから、プライベートなgitホスティングサービスを触ってみる機会があったのですが、 以前に「</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>ひょんなことから、プライベートなgitホスティングサービスを触ってみる機会があったのですが、
以前に「gitlabがあるけどインストールがややこしい」という噂を聞いていて、ちょっとめんどそう…かと思いきや、
割りと簡単にセットアップできたので、それのメモです。</p>
<p>今回はgithubクローンなgitbucketを触ってみました。<br>
gitlabに関しては公式サイトの手順でそのままいけて、yumまで使えるようになっていてサクッとできすぎる感じになってました！</p>
<p>他の方々が構築手順を載せてくださっていますが、自分は</p>
<ul>
<li>CentOS 6</li>
<li>GITBUCKET_HOMEを/home/gitbucket/.gitbucketにする</li>
<li>80ポートで確認できる</li>
</ul>
<p>という条件で構築されるようにしています。</p>
<p>以下、手順です。<br>
CentOSは<a href="https://www.centos.org/download/">この辺</a>から取得してインストールしてください。<br>
ユーザーはgitbucketを作成し、sudoの実行権限を与えておくとよいです。</p>
<p>gitbucketはjava(tomcat)で動作するので、openjdkとhttpd(apache)をyumでインストールします。wgetはファイル取得に使います。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo yum install wget httpd java-1.8.0-openjdk-devel java-1.8.0-openjdk
</code></pre></div><p>続いて、tomcatを取得します。サイトからversion8の最新版を取得してください。<br>
取得したら、解凍しリネームしておきます。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2ftomcat.apache.org%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">wget http://ftp.kddilabs.jp/infosystems/apache/tomcat/tomcat-8/v8.0.32/bin/apache-tomcat-8.0.32.tar.gz
tar zvxf apache-tomcat-8.0.32.tar.gz
mv apache-tomcat-8.0.32 tomcat8
</code></pre></div><p>次にgitbucketを取得します。こちらもサイトで最新版を取得してください。<br>
取得したら先ほどリネームしたtomcatの下に移動させます。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fgitbucket%2fgitbucket%2freleases" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">wget https://github.com/gitbucket/gitbucket/releases/download/3.11/gitbucket.war
mv gitbucket.war ./tomcat8/webapps/gitbucket.war
</code></pre></div><p>これで必要なファイルが揃ったので、80ポートで受け付けるようにhttpdとtomcatの設定ファイルを少しだけ修正します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">vi ./tomcat8/conf/server.xml
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">&lt;!-- 元設定
    &lt;Connector port=&#34;8080&#34; protocol=&#34;HTTP/1.1&#34;
               connectionTimeout=&#34;20000&#34;
               redirectPort=&#34;8443&#34; /&gt;
    --&gt;

    &lt;!-- こちらに変更 --&gt;
    &lt;Connector port=&#34;8009&#34; protocol=&#34;AJP/1.3&#34; redirectPort=&#34;8443&#34; /&gt;
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo vi /etc/httpd/conf.d/gitbucket.conf
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">&lt;VirtualHost *:80&gt;
  DocumentRoot /home/gitbucket/tomcat8/webapps/gitbucket
  #ServerName yourhost.domain
  ErrorLog logs/gitbucket-error_log
  CustomLog logs/gitbucket-access_log common

    &lt;Proxy *&gt;
      Order deny,allow
      Allow from all
    &lt;/Proxy&gt;

  ProxyPass /assets !

  ProxyPass /gitbucket ajp://localhost:8009/gitbucket
  ProxyPassReverse /gitbucket ajp://localhost:8009/gitbucket
  ProxyPreserveHost on

&lt;/VirtualHost&gt;
</code></pre></div><p>※ServerNameは今回設定していません。</p>
<p>環境によってはiptablesが効いていると思うので、止めておくかポートを設定しておく必要があります。<br>
今回の場合は止めておきました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo service iptables stop
</code></pre></div><p>これで、tomcatを起動してhttpdを再起動したら、http://IPアドレスなど/gitbucket/でアクセスすることができます。
（最初は表示されるまで数秒かかるっぽい）</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">~/tomcat8/bin/startup.sh
sudo service httpd restart
</code></pre></div><p>githubと同じような間隔で使えるっぽいです！<br>
user : root, password : rootでログインできます。</p>
<figure>
    <img src="/images/posts/2016/02/gitbuket_home.png"/> 
</figure>

<p>環境変数はこんな感じです。</p>
<figure>
    <img src="/images/posts/2016/02/gitbuket_home2.png"/> 
</figure>

<p>以上です。</p>
<p>■ 参考<br>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fblacknd.com%2flinux-server%2fcentos7-gitbucket-jenkins-auto-deploy%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>








<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fqiita.com%2fYN0314%2fitems%2fd205dfed2e968bf8f408" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
]]></content>
        </item>
        
        <item>
            <title>UnityとGoで暗号化してみた</title>
            <link>https://shamaton.dev/posts/142/</link>
            <pubDate>Mon, 08 Feb 2016 15:58:47 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/142/</guid>
            <description>お世話になっております。 しゃまとんです。 Unity環境とGo環境でSHA256で同一ハッシュ値を得るにはどうしたらいいかと、ちょっと試した時</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>Unity環境とGo環境でSHA256で同一ハッシュ値を得るにはどうしたらいいかと、ちょっと試した時のメモです。</p>
<p>どちらも外部のライブラリ等は不要で対応できます。<br>
これでUnity &lt;–&gt; Goで同じハッシュ値を得ることができます。</p>
<p>以下、コードと実行結果です。<br>
Goの方がコード量が少ないです。</p>
<p>■Unity</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">using</span> UnityEngine;
<span style="color:#66d9ef">using</span> System.Collections;

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">crypt</span> : MonoBehaviour {

    <span style="color:#75715e">// Use this for initialization
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">void</span> Start () {
    <span style="color:#66d9ef">string</span> res = sha256(<span style="color:#e6db74">&#34;shamaton.orz.hm&#34;</span>, <span style="color:#e6db74">&#34;secret_key&#34;</span>);
    Debug.Log (res);
    }   

  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">string</span> sha256(<span style="color:#66d9ef">string</span> planeStr, <span style="color:#66d9ef">string</span> key) {
    <span style="color:#75715e">// バイト化
</span><span style="color:#75715e"></span>    System.Text.UTF8Encoding ue = <span style="color:#66d9ef">new</span> System.Text.UTF8Encoding();
    <span style="color:#66d9ef">byte</span>[] planeBytes = ue.GetBytes(planeStr);
    <span style="color:#66d9ef">byte</span>[] keyBytes   = ue.GetBytes(key);

    <span style="color:#75715e">// SHA256化
</span><span style="color:#75715e"></span>    System.Security.Cryptography.HMACSHA256 sha256 = <span style="color:#66d9ef">new</span> System.Security.Cryptography.HMACSHA256(keyBytes);
    <span style="color:#66d9ef">byte</span>[] hashBytes = sha256.ComputeHash(planeBytes);

    <span style="color:#75715e">// 文字列化
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">string</span> hashStr = <span style="color:#e6db74">&#34;&#34;</span>;
    <span style="color:#66d9ef">foreach</span>(<span style="color:#66d9ef">byte</span> b <span style="color:#66d9ef">in</span> hashBytes) {
      hashStr += <span style="color:#66d9ef">string</span>.Format(<span style="color:#e6db74">&#34;{0,0:x2}&#34;</span>, b);
    }
    <span style="color:#66d9ef">return</span> hashStr;
  }
}
</code></pre></div><figure>
    <img src="/images/posts/2016/02/unity_sha256.png"/> 
</figure>

<p>■Go</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>

<span style="color:#f92672">import</span> (
    <span style="color:#e6db74">&#34;crypto/hmac&#34;</span>
    <span style="color:#e6db74">&#34;crypto/sha256&#34;</span>
    <span style="color:#e6db74">&#34;fmt&#34;</span>
)

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
    <span style="color:#75715e">// SHA256
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">hash</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">hmac</span>.<span style="color:#a6e22e">New</span>(<span style="color:#a6e22e">sha256</span>.<span style="color:#a6e22e">New</span>, []byte(<span style="color:#e6db74">&#34;secret_key&#34;</span>))
    <span style="color:#a6e22e">hash</span>.<span style="color:#a6e22e">Write</span>([]byte(<span style="color:#e6db74">&#34;shamaton.orz.hm&#34;</span>))
    <span style="color:#a6e22e">hashSum</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprintf</span>(<span style="color:#e6db74">&#34;%x&#34;</span>, <span style="color:#a6e22e">hash</span>.<span style="color:#a6e22e">Sum</span>(<span style="color:#66d9ef">nil</span>))
    <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">hashSum</span>)
}
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ go run sha.go
9e3103953957435e407752ec0d4b063058a55338c6ac2e15ea4f07c21f90e10c
</code></pre></div><p>以上です。</p>
]]></content>
        </item>
        
        <item>
            <title>assimp2jsonを使えるようにするまで</title>
            <link>https://shamaton.dev/posts/149/</link>
            <pubDate>Wed, 06 Jan 2016 15:34:37 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/149/</guid>
            <description>お世話になっております。 しゃまとんです。 テストで実装してみたいことがあり、assimp2jsonというツールが必要になったので準備していたの</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>テストで実装してみたいことがあり、assimp2jsonというツールが必要になったので準備していたのですが、
使えるようになるまでの備忘録です。</p>
<p>cmakeというものを知らなかったのですが、当たり前な内容かもしれません。<br>
cmake便利ですね！<a href="https://ja.wikipedia.org/wiki/CMake">そもそもcmakeとは</a></p>
<p>assimp2jsonとは3DのファイルをJSON(assimp)に変換してくれるものです。<br>
3Dを何かしらやるやつですね。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2facgessler%2fassimp2json" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>はい。それではcmakeから使えるようにしていきます。<br>
<a href="https://cmake.org/download/">https://cmake.org/download/</a>からOSにあったものを選びます。（今回はmacのdmg）<br>
実行して、Applicationsに入れるだけ。</p>
<p>今回はコマンドラインで実行するので、Applicationsのappからリンクをはります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo ln -s /Applications/CMake.app/Contents/bin/ccmake /usr/bin/ccmake
sudo ln -s /Applications/CMake.app/Contents/bin/cmake /usr/bin/cmake
sudo ln -s /Applications/CMake.app/Contents/bin/cmake-gui /usr/bin/cmake-gui
sudo ln -s /Applications/CMake.app/Contents/bin/cmakexbuild /usr/bin/cmakexbuild
sudo ln -s /Applications/CMake.app/Contents/bin/cpack /usr/bin/cpack
sudo ln -s /Applications/CMake.app/Contents/bin/ctest /usr/bin/ctest
</code></pre></div><p>次にassimp2jsonをビルドします。まずはgithubからcloneします。<br>
任意のディレクトリでやればOK。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">git clone git@github.com:acgessler/assimp2json.git
</code></pre></div><p>cloneした状態だとassimp2json/assimpが空になっています。assimp以下はsubmoduleとして設定されているので、取得します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">cd assimp2json
git submodule init
git submodule update
</code></pre></div><p>これを行うと <code>commit : 93bb63fdb40d9682e60ca97b0eda4951a552c742</code> の状態のassimpがcloneされます。</p>
<p>これでビルドの準備が整ったので、topに移動して下記のコマンドを実行します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">cmake CMakeLists.txt -G &#39;Unix Makefiles&#39; # makefile生成
</code></pre></div><p>実行すると下記のように表示されます（はず）</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">-- The C compiler identification is AppleClang 7.0.0.7000176
-- The CXX compiler identification is AppleClang 7.0.0.7000176
-- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc
-- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++
-- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Found PkgConfig: /usr/local/bin/pkg-config (found version &#34;0.28&#34;)
-- Building a non-boost version of Assimp.
-- Looking for ZLIB...
-- Checking for module &amp;#039;zzip-zlib-config&amp;#039;
--   Package &amp;#039;zzip-zlib-config&amp;#039; not found
-- Found ZLIB: optimized;/usr/lib/libz.dylib;debug;/usr/lib/libz.dylib
-- Checking for module &amp;#039;minizip&amp;#039;
--   Package &amp;#039;minizip&amp;#039; not found
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Looking for pthread_create
-- Looking for pthread_create - found
-- Found Threads: TRUE
-- Configuring done
CMake Warning (dev):
  Policy CMP0042 is not set: MACOSX_RPATH is enabled by default.  Run &#34;cmake
  --help-policy CMP0042&#34; for policy details.  Use the cmake_policy command to
  set the policy and suppress this warning.

  MACOSX_RPATH is not specified for the following targets:

   assimp

This warning is for project developers.  Use -Wno-dev to suppress it.

-- Generating done
-- Build files have been written to: /Users/xxxxxxxx/Downloads/assimp2json
</code></pre></div><p>makeします。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ make
Scanning dependencies of target assimp
<span style="color:#f92672">[</span>  0%<span style="color:#f92672">]</span> Building CXX object assimp/code/CMakeFiles/assimp.dir/Assimp.cpp.o
<span style="color:#f92672">[</span>  0%<span style="color:#f92672">]</span> Building CXX object assimp/code/CMakeFiles/assimp.dir/BaseImporter.cpp.o
<span style="color:#f92672">[</span>  1%<span style="color:#f92672">]</span> Building CXX object assimp/code/CMakeFiles/assimp.dir/BaseProcess.cpp.o

... ビルドが続く ...

<span style="color:#f92672">[</span> 99%<span style="color:#f92672">]</span> Building CXX object assimp/test/CMakeFiles/unit.dir/unit/utNoBoostTest.cpp.o
<span style="color:#f92672">[</span>100%<span style="color:#f92672">]</span> Linking CXX executable ../../bin/unit
<span style="color:#f92672">[</span>100%<span style="color:#f92672">]</span> Built target unit
</code></pre></div><p>ビルドが通ると bin配下にassimp2jsonが作られます。</p>
<p>実行できるか簡単にテストしてみます。こちらからデータを取得します。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fgolang-samples%2fgopher-3d" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">git clone git@github.com:golang-samples/gopher-3d.git
assimp2json gopher.stl &gt; gopher.json
</code></pre></div><p>PATHを通してない場合、bin配下を指定してください。<br>
エディタ等でひらくと結構長めなjsonが記載されていれば変換されています。</p>
<p>以上です。</p>
<p>モデルデータは下記のサイト等で確認できます。(github上でも見れますが）</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2ffablabshibuya.org%2fapplications%2f3dviewer%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

]]></content>
        </item>
        
        <item>
            <title>[golang]標準入力を受け取りつつ、システムコマンド(mysqlなど)を実行する</title>
            <link>https://shamaton.dev/posts/145/</link>
            <pubDate>Sun, 06 Dec 2015 09:47:34 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/145/</guid>
            <description>お世話になっております。 しゃまとんです。 最近、golangに触れる機会が多くなっております。Gopherかわいい(*´∀｀) さて、goでDB</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>最近、golangに触れる機会が多くなっております。Gopherかわいい(*´∀｀)</p>
<p>さて、goでDBを初期化するためのバッチファイルを書いていたのですが、</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ mysql -uroot -ppassword dbname &gt; hoge.sql
</code></pre></div><p>上記のようにgoからシステムコマンドを実行したかったのですが、もろもろ調査して標準入力含めて、実行できた際のメモです。</p>
<p>はじめは、上記のコマンドをそのまま、exec.Commandに渡してやろうとしたのですが、&quot;&lt;&quot;, &ldquo;&gt;&rdquo; のような特殊文字は渡せないみたいで、
StdinPipeを使うことで入力を渡すことができるようです。</p>
<p>下記がサンプルになります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>

<span style="color:#f92672">import</span> (
	<span style="color:#e6db74">&#34;fmt&#34;</span>
	<span style="color:#e6db74">&#34;io/ioutil&#34;</span>
	<span style="color:#e6db74">&#34;os/exec&#34;</span>
)

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
	<span style="color:#a6e22e">user</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;root&#34;</span>
	<span style="color:#a6e22e">password</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;password&#34;</span>
	<span style="color:#a6e22e">dbName</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;dbname&#34;</span>

	<span style="color:#a6e22e">path</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">exec</span>.<span style="color:#a6e22e">LookPath</span>(<span style="color:#e6db74">&#34;mysql&#34;</span>)
	<span style="color:#a6e22e">cmd</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">exec</span>.<span style="color:#a6e22e">Command</span>(<span style="color:#a6e22e">path</span>, <span style="color:#e6db74">&#34;-u&#34;</span><span style="color:#f92672">+</span><span style="color:#a6e22e">user</span>, <span style="color:#e6db74">&#34;-p&#34;</span><span style="color:#f92672">+</span><span style="color:#a6e22e">password</span>, <span style="color:#a6e22e">dbName</span>)

	<span style="color:#75715e">// 入力SQLファイル
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">readFile</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;/home/shamaton/test.sql&#34;</span>
	<span style="color:#a6e22e">input</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">ioutil</span>.<span style="color:#a6e22e">ReadFile</span>(<span style="color:#a6e22e">readFile</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		panic(<span style="color:#a6e22e">err</span>)
	}
	<span style="color:#a6e22e">stdin</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">cmd</span>.<span style="color:#a6e22e">StdinPipe</span>()
	<span style="color:#a6e22e">stdin</span>.<span style="color:#a6e22e">Write</span>(<span style="color:#a6e22e">input</span>)
	<span style="color:#a6e22e">stdin</span>.<span style="color:#a6e22e">Close</span>()

	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">stdErr</span>, <span style="color:#a6e22e">stdOut</span> <span style="color:#a6e22e">bytes</span>.<span style="color:#a6e22e">Buffer</span>
	<span style="color:#a6e22e">cmd</span>.<span style="color:#a6e22e">Stderr</span> = <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">stdErr</span>
	<span style="color:#a6e22e">cmd</span>.<span style="color:#a6e22e">Stdout</span> = <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">stdOut</span>

	<span style="color:#75715e">// exec
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">cmd</span>.<span style="color:#a6e22e">Run</span>()
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">stdErr</span>.<span style="color:#a6e22e">String</span>())
		panic(<span style="color:#a6e22e">err</span>)
	}
	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">stdOut</span>.<span style="color:#a6e22e">String</span>())
}
</code></pre></div><p>paswwordに関しては-pにくっつけておかないとエラーになるかと思います。<br>
mysqlでの例ですが、変数等は適宜置き換えたらいいのではないかと思います。</p>
<p>以上です。</p>
<p>■参考</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2ftkuchiki.hatenablog.com%2fentry%2f2014%2f11%2f10%2f123447" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

]]></content>
        </item>
        
        <item>
            <title>[golang]redisで構造体を扱ってみる</title>
            <link>https://shamaton.dev/posts/141/</link>
            <pubDate>Sat, 21 Nov 2015 14:15:52 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/141/</guid>
            <description>お世話になっております。 しゃまとんです。 goでredisを使ったデータ永続化の際に、構造体を保存し取り出すメモです。 encoding/jso</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>goで<a href="http://redis.io/">redis</a>を使ったデータ永続化の際に、構造体を保存し取り出すメモです。</p>
<p><code>encoding/json</code>を使うことで簡単に扱うことができます。<br>
redisの操作に関しては<a href="https://github.com/garyburd/redigo">redigo</a>を利用しました。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fgaryburd%2fredigo" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>以下、簡単なサンプルです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>

<span style="color:#f92672">import</span> (
    <span style="color:#e6db74">&#34;encoding/json&#34;</span>
    <span style="color:#e6db74">&#34;github.com/garyburd/redigo/redis&#34;</span>
    <span style="color:#e6db74">&#34;log&#34;</span>
)

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">User</span> <span style="color:#66d9ef">struct</span> {
    <span style="color:#a6e22e">Id</span>    <span style="color:#66d9ef">int32</span>
    <span style="color:#a6e22e">Name</span>  <span style="color:#66d9ef">string</span>
    <span style="color:#a6e22e">Score</span> <span style="color:#66d9ef">int32</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {

    <span style="color:#a6e22e">c</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">redis</span>.<span style="color:#a6e22e">Dial</span>(<span style="color:#e6db74">&#34;tcp&#34;</span>, <span style="color:#e6db74">&#34;:6379&#34;</span>)
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
        <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
    }
    <span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">Close</span>()

    <span style="color:#75715e">// struct to JSON
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">user</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">User</span>{<span style="color:#a6e22e">Id</span>: <span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">Name</span>: <span style="color:#e6db74">&#34;name&#34;</span>, <span style="color:#a6e22e">Score</span>: <span style="color:#ae81ff">2</span>}
    <span style="color:#a6e22e">serialized</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">json</span>.<span style="color:#a6e22e">Marshal</span>(<span style="color:#a6e22e">user</span>)
    <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;serialized : &#34;</span>, string(<span style="color:#a6e22e">serialized</span>))

    <span style="color:#75715e">// set
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">Do</span>(<span style="color:#e6db74">&#34;SET&#34;</span>, <span style="color:#e6db74">&#34;test&#34;</span>, <span style="color:#a6e22e">serialized</span>)

    <span style="color:#75715e">// get
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">data</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">redis</span>.<span style="color:#a6e22e">Bytes</span>(<span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">Do</span>(<span style="color:#e6db74">&#34;GET&#34;</span>, <span style="color:#e6db74">&#34;test&#34;</span>))
    <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;data : &#34;</span>, <span style="color:#a6e22e">data</span>)

    <span style="color:#75715e">// JSON to struct
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">data</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
        <span style="color:#a6e22e">deserialized</span> <span style="color:#f92672">:=</span> new(<span style="color:#a6e22e">User</span>)
        <span style="color:#a6e22e">json</span>.<span style="color:#a6e22e">Unmarshal</span>(<span style="color:#a6e22e">serialized</span>, <span style="color:#a6e22e">deserialized</span>)
        <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;deserialized : &#34;</span>, <span style="color:#a6e22e">deserialized</span>)
    }

}
</code></pre></div><p>実行結果は下になります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ go run main.go 
 serialized :  <span style="color:#f92672">{</span><span style="color:#e6db74">&#34;Id&#34;</span>:1,<span style="color:#e6db74">&#34;Name&#34;</span>:<span style="color:#e6db74">&#34;name&#34;</span>,<span style="color:#e6db74">&#34;Score&#34;</span>:2<span style="color:#f92672">}</span>
 data :  <span style="color:#f92672">[</span><span style="color:#ae81ff">123</span> <span style="color:#ae81ff">34</span> <span style="color:#ae81ff">73</span> <span style="color:#ae81ff">100</span> <span style="color:#ae81ff">34</span> <span style="color:#ae81ff">58</span> <span style="color:#ae81ff">49</span> <span style="color:#ae81ff">44</span> <span style="color:#ae81ff">34</span> <span style="color:#ae81ff">78</span> <span style="color:#ae81ff">97</span> <span style="color:#ae81ff">109</span> <span style="color:#ae81ff">101</span> <span style="color:#ae81ff">34</span> <span style="color:#ae81ff">58</span> <span style="color:#ae81ff">34</span> <span style="color:#ae81ff">110</span> <span style="color:#ae81ff">97</span> <span style="color:#ae81ff">109</span> <span style="color:#ae81ff">101</span> <span style="color:#ae81ff">34</span> <span style="color:#ae81ff">44</span> <span style="color:#ae81ff">34</span> <span style="color:#ae81ff">83</span> <span style="color:#ae81ff">99</span> <span style="color:#ae81ff">111</span> <span style="color:#ae81ff">114</span> <span style="color:#ae81ff">101</span> <span style="color:#ae81ff">34</span> <span style="color:#ae81ff">58</span> <span style="color:#ae81ff">50</span> 125<span style="color:#f92672">]</span>
 deserialized :  &amp;<span style="color:#f92672">{</span><span style="color:#ae81ff">1</span> name 2<span style="color:#f92672">}</span>
</code></pre></div><p>以上です。</p>
]]></content>
        </item>
        
        <item>
            <title>[golang]interfaceに変換されたstructの値を比較する</title>
            <link>https://shamaton.dev/posts/138/</link>
            <pubDate>Sat, 14 Nov 2015 15:42:25 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/138/</guid>
            <description>お世話になっております。 しゃまとんです。 完全にメモな感じです。 goで汎用的に使えるメソッドを用意するとなると、interfaceやrefle</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>完全にメモな感じです。<br>
goで汎用的に使えるメソッドを用意するとなると、interfaceやreflectを使う場面がでてきます。</p>
<p>試作していた部分で構造体の中身が同じかどうか比較したいことがあり、下記のようにすれば確認することができました。</p>
<p>やっていることとしては、Elemで要素を取得して、value.Interface()で値が取得できるので、それを比較しています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Hoge</span> <span style="color:#66d9ef">struct</span> {
	<span style="color:#a6e22e">Id</span> <span style="color:#66d9ef">int</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
	<span style="color:#a6e22e">a</span> <span style="color:#f92672">:=</span> new(<span style="color:#a6e22e">Hoge</span>)
	<span style="color:#a6e22e">a</span>.<span style="color:#a6e22e">Id</span> = <span style="color:#ae81ff">1</span>
	<span style="color:#a6e22e">b</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">a</span>
	<span style="color:#a6e22e">IsEqual</span>(<span style="color:#a6e22e">a</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">b</span>) <span style="color:#75715e">// true
</span><span style="color:#75715e"></span>}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">IsEqual</span>(<span style="color:#a6e22e">i1</span> <span style="color:#a6e22e">Interface</span>{}, <span style="color:#a6e22e">i2</span> <span style="color:#a6e22e">Interface</span>{}) <span style="color:#66d9ef">bool</span> {
	<span style="color:#a6e22e">e1</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">reflect</span>.<span style="color:#a6e22e">ValueOf</span>(<span style="color:#a6e22e">i1</span>).<span style="color:#a6e22e">Elem</span>()
	<span style="color:#a6e22e">e2</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">reflect</span>.<span style="color:#a6e22e">ValueOf</span>(<span style="color:#a6e22e">i2</span>).<span style="color:#a6e22e">Elem</span>()
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">e1</span>.<span style="color:#a6e22e">Interface</span>() <span style="color:#f92672">==</span> <span style="color:#a6e22e">e2</span>.<span style="color:#a6e22e">Interface</span>() {
		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
	}
	<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>
}
</code></pre></div><p>今回はポインタで構造体を渡しているケースなので、型次第ではinterfaceに至るまでの過程が変わってくると思いますが、
基本的は上記のような形で大丈夫だと思います。</p>
<p>以上です。</p>
]]></content>
        </item>
        
        <item>
            <title>MySQLの空コミットが気になったので調べてみた</title>
            <link>https://shamaton.dev/posts/136/</link>
            <pubDate>Sat, 07 Nov 2015 09:19:33 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/136/</guid>
            <description>お世話になっております。 しゃまとんです。 webの開発をやっていると、データベースは切っても切れないものだと思います。 自分はMySQLを使うこ</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>webの開発をやっていると、データベースは切っても切れないものだと思います。<br>
自分はMySQLを使うことが多いのですが、最近MySQLを使った開発を行っているときにトランザクション管理ちゃんと
しないとなと思い考えていた時、</p>
<p>MySQLで空コミットしたときって処理重くなるのかな・・・？<br>
と思い、すこし調べてみました。<br>
（webでググっても、サクッとでてこなかった）</p>
<p>簡単に処理を何個か作成しループを100回させてみました。</p>
<p>申し訳ないですが、自分はそこまで精通している人間ではないので、参考程度に読んでいただけると幸いです。<br>
言語にはgoを使っています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>

<span style="color:#f92672">import</span> (
	<span style="color:#e6db74">&#34;database/sql&#34;</span>
	<span style="color:#e6db74">&#34;log&#34;</span>
	<span style="color:#e6db74">&#34;time&#34;</span>

	<span style="color:#a6e22e">_</span> <span style="color:#e6db74">&#34;github.com/go-sql-driver/mysql&#34;</span>
)

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">User</span> <span style="color:#66d9ef">struct</span> {
	<span style="color:#a6e22e">Id</span>    <span style="color:#66d9ef">int32</span>
	<span style="color:#a6e22e">Name</span>  <span style="color:#66d9ef">string</span>
	<span style="color:#a6e22e">Score</span> <span style="color:#66d9ef">int32</span>
}

<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">loop</span> = <span style="color:#ae81ff">100</span>

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
	<span style="color:#a6e22e">cnn</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">sql</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#e6db74">&#34;mysql&#34;</span>, <span style="color:#e6db74">&#34;user:pass@tcp(localhost:port)/database&#34;</span>)
	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">cnn</span>.<span style="color:#a6e22e">Close</span>()

	<span style="color:#75715e">// txなしselect
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">f1</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">func</span>() {
		<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">user</span> <span style="color:#a6e22e">User</span>
		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">cnn</span>.<span style="color:#a6e22e">QueryRow</span>(<span style="color:#e6db74">&#34;SELECT id, name, score FROM user WHERE id = ? LIMIT 1&#34;</span>, <span style="color:#ae81ff">1</span>).<span style="color:#a6e22e">Scan</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">user</span>.<span style="color:#a6e22e">Id</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">user</span>.<span style="color:#a6e22e">Name</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">user</span>.<span style="color:#a6e22e">Score</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
			<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
		}
	}

	<span style="color:#a6e22e">latency1</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">exec</span>(<span style="color:#a6e22e">f1</span>)
	<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;f1 : &#34;</span>, <span style="color:#a6e22e">latency1</span>)

	<span style="color:#75715e">// txありselect
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">f2</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">func</span>() {
		<span style="color:#a6e22e">tx</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">cnn</span>.<span style="color:#a6e22e">Begin</span>()
		<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">user</span> <span style="color:#a6e22e">User</span>
		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">tx</span>.<span style="color:#a6e22e">QueryRow</span>(<span style="color:#e6db74">&#34;SELECT id, name, score FROM user WHERE id = ? LIMIT 1&#34;</span>, <span style="color:#ae81ff">1</span>).<span style="color:#a6e22e">Scan</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">user</span>.<span style="color:#a6e22e">Id</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">user</span>.<span style="color:#a6e22e">Name</span>, <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">user</span>.<span style="color:#a6e22e">Score</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
			<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
		}
		<span style="color:#a6e22e">tx</span>.<span style="color:#a6e22e">Commit</span>()
	}

	<span style="color:#a6e22e">latency2</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">exec</span>(<span style="color:#a6e22e">f2</span>)
	<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;f2 : &#34;</span>, <span style="color:#a6e22e">latency2</span>)

	<span style="color:#75715e">// updateレコード変更なし
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">f3</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">func</span>() {
		<span style="color:#a6e22e">tx</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">cnn</span>.<span style="color:#a6e22e">Begin</span>()
		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">tx</span>.<span style="color:#a6e22e">Exec</span>(<span style="color:#e6db74">&#34;UPDATE user SET score = score WHERE id = ?&#34;</span>, <span style="color:#ae81ff">1</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
			<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
		}
		<span style="color:#a6e22e">tx</span>.<span style="color:#a6e22e">Commit</span>()
	}

	<span style="color:#a6e22e">latency3</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">exec</span>(<span style="color:#a6e22e">f3</span>)
	<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;f3 : &#34;</span>, <span style="color:#a6e22e">latency3</span>)

	<span style="color:#75715e">// update レコード変更ありrollback
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">f4</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">func</span>() {
		<span style="color:#a6e22e">tx</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">cnn</span>.<span style="color:#a6e22e">Begin</span>()
		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">tx</span>.<span style="color:#a6e22e">Exec</span>(<span style="color:#e6db74">&#34;UPDATE user SET score = score + 1 WHERE id = ?&#34;</span>, <span style="color:#ae81ff">1</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
			<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
		}
		<span style="color:#a6e22e">tx</span>.<span style="color:#a6e22e">Rollback</span>()
	}

	<span style="color:#a6e22e">latency4</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">exec</span>(<span style="color:#a6e22e">f4</span>)
	<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;f4 : &#34;</span>, <span style="color:#a6e22e">latency4</span>)

	<span style="color:#75715e">// update レコード変更ありcommit
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">f5</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">func</span>() {
		<span style="color:#a6e22e">tx</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">cnn</span>.<span style="color:#a6e22e">Begin</span>()
		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">tx</span>.<span style="color:#a6e22e">Exec</span>(<span style="color:#e6db74">&#34;UPDATE user SET score = score + 1 WHERE id = ?&#34;</span>, <span style="color:#ae81ff">1</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
			<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
		}
		<span style="color:#a6e22e">tx</span>.<span style="color:#a6e22e">Commit</span>()
	}

	<span style="color:#a6e22e">latency5</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">exec</span>(<span style="color:#a6e22e">f5</span>)
	<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;f5 : &#34;</span>, <span style="color:#a6e22e">latency5</span>)

}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">exec</span>(<span style="color:#a6e22e">f</span> <span style="color:#66d9ef">func</span>()) <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Duration</span> {

	<span style="color:#a6e22e">t</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>()

	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">lt</span>; <span style="color:#a6e22e">loop</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
		<span style="color:#a6e22e">f</span>()
	}

	<span style="color:#a6e22e">latency</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Since</span>(<span style="color:#a6e22e">t</span>)
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">latency</span>

}
</code></pre></div><p>結果は下記のようになりました。<br>
見た感じですと</p>
<p>select(txなし) &laquo; select(txあり) &lt;= update(空コミット) &laquo; update(commit) &lt;= update(rollback)</p>
<p>となりました。selectの速度差はトランザクション開始の処理が入っているので当然なのですが、
oracleの空コミットと同様に何も処理されない(?)ので、select(txあり)とほぼ変わらないっぽいですね。</p>
<p>勉強になりました。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text"> go run main.go 
f1 :  32.243891ms
f2 :  46.160667ms
f3 :  50.834508ms
f4 :  83.56319ms
f5 :  76.303116ms
---
f1 :  33.905533ms
f2 :  46.795762ms
f3 :  54.755387ms
f4 :  84.56939ms
f5 :  74.385792ms
---
f1 :  33.64808ms
f2 :  46.192082ms
f3 :  52.673612ms
f4 :  85.065523ms
f5 :  80.058726ms
---
f1 :  32.868818ms
f2 :  51.224252ms
f3 :  51.798962ms
f4 :  81.424738ms
f5 :  71.117165ms
---
f1 :  33.805161ms
f2 :  45.889625ms
f3 :  50.216731ms
f4 :  78.674484ms
f5 :  78.635478ms
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>[cocos2dx]タッチイベント処理を削除する</title>
            <link>https://shamaton.dev/posts/130/</link>
            <pubDate>Sun, 04 Oct 2015 04:36:57 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/130/</guid>
            <description>お世話になっております。 しゃまとんです。 レイヤーを複数に分けていて、あるレイヤーのタッチ処理を切り分けたかったのですが、 検索してもあまり出て</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>レイヤーを複数に分けていて、あるレイヤーのタッチ処理を切り分けたかったのですが、
検索してもあまり出てこなかったので、実装できた際のメモです。</p>
<p>cocos2d-xのver3.7での実装例です。</p>
<p>レイヤーにてタッチ処理を登録して、処理の優先度をあげておくと、仮にレイヤーをsetVisible(false)にしても、
優先度をあげた方が呼ばれてしまいうまくいかなかったため、登録を外すようにしてレイヤーを非表示にするようにしました。</p>
<p>下記は関数化されていますが、trueで呼ぶとタッチ処理をレイヤーに登録し、falseで呼ぶと切り離すようになっています。</p>
<p>_touchListenerとか_eventDispatcherとか存在してたんですね。知らなかった。。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#66d9ef">void</span> HelloWorld<span style="color:#f92672">::</span>setTouchListener(<span style="color:#66d9ef">bool</span> enabled)
{
    <span style="color:#66d9ef">if</span> (enabled) {
        _touchListener <span style="color:#f92672">=</span> EventListenerTouchAllAtOnce<span style="color:#f92672">::</span>create();
        _touchListener<span style="color:#f92672">-&gt;</span>retain();
        _touchListener<span style="color:#f92672">-&gt;</span>onTouchesBegan <span style="color:#f92672">=</span> CC_CALLBACK_2(HelloWorld<span style="color:#f92672">::</span>onTouchesBegan, <span style="color:#66d9ef">this</span>);
        _eventDispatcher<span style="color:#f92672">-&gt;</span>addEventListenerWithSceneGraphPriority(_touchListener, <span style="color:#66d9ef">this</span>);
    }
    <span style="color:#66d9ef">else</span> {
        _eventDispatcher<span style="color:#f92672">-&gt;</span>removeEventListener(_touchListener);
        _touchListener<span style="color:#f92672">-&gt;</span>release();
        _touchListener <span style="color:#f92672">=</span> <span style="color:#66d9ef">nullptr</span>;
    }
}
</code></pre></div><p>以上です。</p>
]]></content>
        </item>
        
        <item>
            <title>痛monodevelopで括弧が補間されるようにする</title>
            <link>https://shamaton.dev/posts/126/</link>
            <pubDate>Mon, 21 Sep 2015 14:32:30 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/126/</guid>
            <description>お世話になっております。 しゃまとんです。 unityのエディタで痛monodevelopを使っているのですが、 デフォルトの設定で使っていると括</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>unityのエディタで痛monodevelopを使っているのですが、
デフォルトの設定で使っていると括弧を入力した時に、自動で閉じる側を補間してくれなくて、
慣れている方には少し不便なことがあります。</p>
<p>検索しても、あまり出てこなかったので一応メモしておきます。<br>
痛monodevelop側で少し設定してやれば完了です。</p>
<p>■手順<br>
痛monodevelopでの括弧保管設定<br>
設定　→　テキストエディタ　→　動作<br>
対応する括弧を追加</p>
<figure>
    <img src="/images/posts/2015/09/ita_monodevelop_setting.png"/> 
</figure>

<p>以上です。</p>
]]></content>
        </item>
        
        <item>
            <title>[cocos2dx]TMXTiledMapの各タイルからスプライトを複製する</title>
            <link>https://shamaton.dev/posts/123/</link>
            <pubDate>Tue, 01 Sep 2015 15:15:37 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/123/</guid>
            <description>&lt;p&gt;お世話になっております。&lt;br&gt;
しゃまとんです。&lt;/p&gt;
&lt;p&gt;ファミコンのドラクエやFFで使われていた、マップチップを利用したRPGを作成しようかと考えているのですが、
cocos2d-xではTiledというツールで作成したデータをそのまま利用することができるTMXTiledMapというクラスが用意されており、
簡単にマップ処理を実装することができます。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>ファミコンのドラクエやFFで使われていた、マップチップを利用したRPGを作成しようかと考えているのですが、
cocos2d-xではTiledというツールで作成したデータをそのまま利用することができるTMXTiledMapというクラスが用意されており、
簡単にマップ処理を実装することができます。</p>
<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fwww.mapeditor.org%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>基本的には、TMXTiledMap::createで生成したインスタンスをaddChildすれば、表示されるのですが、</p>
<ul>
<li>マップが大きい時の負荷が気になる（世界マップような時）</li>
<li>マップの回り込み表示をさせたい（右端に来た時に左端を表示する）</li>
</ul>
<p>というような理由から表示される領域のみ画像を生成する処理のメモです。<br>
こちらはドラクエのように、キャラが常に中心にいてマップが動くような事例に有効かと思います。
よって実現したい内容によっては、非効率かもしれません。</p>
<p>処理はgetTileAtを参考にしました。<br>
cocos2d-xのバージョンは3.7でした。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#66d9ef">auto</span> tile_map <span style="color:#f92672">=</span> TMXTiledMap<span style="color:#f92672">::</span>create(<span style="color:#e6db74">&#34;test.tmx&#34;</span>);
<span style="color:#66d9ef">auto</span> layer <span style="color:#f92672">=</span> tile_map<span style="color:#f92672">-&gt;</span>getLayer(<span style="color:#e6db74">&#34;レイヤー名&#34;</span>);

<span style="color:#66d9ef">auto</span> gid      <span style="color:#f92672">=</span> layer<span style="color:#f92672">-&gt;</span>getTileGIDAt(Vec2(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>)); <span style="color:#75715e">// x, y
</span><span style="color:#75715e"></span><span style="color:#66d9ef">auto</span> tile_set <span style="color:#f92672">=</span> layer<span style="color:#f92672">-&gt;</span>getTileSet();

Rect rect <span style="color:#f92672">=</span> tile_set<span style="color:#f92672">-&gt;</span>getRectForGID(gid);
rect <span style="color:#f92672">=</span> CC_RECT_PIXELS_TO_POINTS(rect);

<span style="color:#66d9ef">auto</span> tile <span style="color:#f92672">=</span> Sprite<span style="color:#f92672">::</span>createWithTexture(layer<span style="color:#f92672">-&gt;</span>getTexture(), rect);
tile<span style="color:#f92672">-&gt;</span>setBatchNode(layer);

<span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>addChild(tile);
</code></pre></div><p>ほぼgetTileAtと同じ処理です。こちらで1タイル分のスプライトを作ることができます。<br>
気になる方はCCTMXLayer.cppを読んでみるといいかと思います。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fgithub.com%2fMarkusPfundstein%2fCocos2DX-Extensions%2fblob%2fmaster%2fCCTMXLayer%2fCCTMXLayer.cpp" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>以上です。</p>
<p>参考







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fgpu-returns.tumblr.com%2fpost%2f101328220534%2f%25E3%2583%259E%25E3%2583%2583%25E3%2583%2597%25E3%2582%25A8%25E3%2583%2587%25E3%2582%25A3%25E3%2582%25BFtiled%25E3%2581%25A7%25E4%25BD%259C%25E3%2581%25A3%25E3%2581%259F%25E3%2583%259E%25E3%2583%2583%25E3%2583%2597%25E3%2582%2592cocos2d-x%25E3%2581%25A7%25E8%25AA%25AD%25E3%2581%25BF%25E8%25BE%25BC%25E3%2582%2580" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>








<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fwww.slideshare.net%2ftonosamart%2fe-semi-3620140304" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>]]></content>
        </item>
        
        <item>
            <title>テーマとページのレイアウトを更新しました。</title>
            <link>https://shamaton.dev/posts/116/</link>
            <pubDate>Fri, 28 Aug 2015 09:13:18 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/116/</guid>
            <description>お世話になっております。 しゃまとんです。 前回のURL変更に合わせて、wordpressのテーマをSimplicityに変更しました。 ブログ投</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>前回のURL変更に合わせて、wordpressのテーマをSimplicityに変更しました。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fwp-simplicity.com%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>ブログ投稿を始めてからずっとmonochromeにしていたのですが、
現在有料になっているようなので、事のついでということで変えてみました。</p>
<p>シンプルな構成で、SEO対策は広告も簡単に入れられました。<br>
またスキンの変更も手軽にできるみたいでよいですね。</p>
<p>worksとしていたページはTOPに変更しました。。<br>
ページ作成にあたってbootstrapを使いました。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fgetbootstrap.com%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>どうやったらいいかと思っていたのですが、ドットインストールで勉強することができたので、
興味のある方はのぞいてみるといいかなと思います。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fdotinstall.com%2flessons%2fbasic_twitter_bootstrap_v4" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>bootstrapを使ってさくさくページ作成していきたいですね。</p>
<p>以上です。</p>
]]></content>
        </item>
        
        <item>
            <title>wordpressのエイリアスをDBから変更する</title>
            <link>https://shamaton.dev/posts/105/</link>
            <pubDate>Tue, 04 Aug 2015 15:34:59 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/105/</guid>
            <description>&lt;p&gt;お世話になっております。&lt;br&gt;
しゃまとんです。&lt;/p&gt;
&lt;p&gt;自分のサイトですが、wordpressを使って、shamaton.orz.hmでアクセスするとTOPページが表示されるようにしていたのですが、
新たにTOPページをつくり、別のコンテンツページを簡単に用意できるようにしたかったので、&lt;/p&gt;
&lt;p&gt;shamaton.orz.hm&lt;/p&gt;
&lt;p&gt;↓&lt;/p&gt;
&lt;p&gt;shamaton.orz.hm/blog&lt;/p&gt;
&lt;p&gt;で表示されるように変更しました。&lt;br&gt;
変更するに辺り、色々なやり方があると思いますが、こちらではwordpress用に作成されたdatabase
に手を加えることによって変更する手順となります。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>自分のサイトですが、wordpressを使って、shamaton.orz.hmでアクセスするとTOPページが表示されるようにしていたのですが、
新たにTOPページをつくり、別のコンテンツページを簡単に用意できるようにしたかったので、</p>
<p>shamaton.orz.hm</p>
<p>↓</p>
<p>shamaton.orz.hm/blog</p>
<p>で表示されるように変更しました。<br>
変更するに辺り、色々なやり方があると思いますが、こちらではwordpress用に作成されたdatabase
に手を加えることによって変更する手順となります。</p>
<blockquote>
<p>注意！！</p>
<p>この手順ではデータベースのレコードを更新するため、動かなくなる可能性があります。<br>
実際に試す際は、データベースのバックアップ等を行ってからの作業をおすすめします。</p>
</blockquote>
<p>参考にされたサイトによっては、データベースの名前やテーブル名が違う可能性がありますが、
当方ではこちらのサイトを参考にwordpressを導入しました。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fcentossrv.com%2fwordpress.shtml" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>手順としては、割りと単純です。<br>
簡単な構成であればApache上でwordpressが動いていると思います。</p>
<p>■ 各テーブル内に記載されたURLを置換する<br>
投稿した記事はテーブルに保存されており、guidやpost_contentに現在動作しているURLが記載されていたりします。
それらを置換してやります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">-- wp_posts
UPDATE wp_posts SET guid = REPLACE (guid, &#39;http://shamaton.orz.hm&#39;, &#39;http://shamaton.orz.hm/blog&#39;);
UPDATE wp_posts SET post_content = REPLACE (post_content, &#39;http://shamaton.orz.hm&#39;, &#39;http://shamaton.orz.hm/blog&#39;);

-- wp_options
UPDATE wp_options SET option_value = REPLACE (option_value, &#39;http://shamaton.orz.hm&#39;, &#39;http://shamaton.orz.hm/blog/&#39;) where option_name = &#39;home&#39; OR option_name = &#39;siteurl&#39;;

-- wp_postmeta
UPDATE wp_postmeta SET meta_value = REPLACE (meta_value, &#39;http://shamaton.orz.hm&#39;, &#39;http://shamaton.orz.hm/blog/&#39;);
</code></pre></div><p>必要に応じてURLを入れ替えてください。</p>
<p>実行後は意図通りに更新されているかselectしてみると良いかと思います。<br>
ex.) select from wp_options where option_name = &lsquo;home&rsquo; OR option_name = &lsquo;siteurl&rsquo;;</p>
<p>■ apacheの設定ファイルを修正して、モジュール群を移動させる<br>
場合によってはこちらの作業は不要かもしれません。</p>
<p>当方のサイトでは記事が見つからない事象が発生したため、下記対応をしました。</p>
<ol>
<li>/etc/httpd/conf/httpd.confを編集</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">
DocumentRoot &#34;/var/www/wordpress&#34;  
↓  
DocumentRoot &#34;/var/www/html&#34;

&lt;Directory &#34;/var/www/wordpress&#34;&gt;  
↓  
&lt;Directory &#34;/var/www/html&#34;&gt;
</code></pre></div><ol start="2">
<li>/etc/httpd/conf.d/wordpress.confを編集</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Alias /blog /var/www/html/wordpress/
</code></pre></div><ol start="3">
<li>/var/www/wordpress を /war/www/html/wordpress に移動</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">mv /var/www/wordpress /var/www/html/wordpress
</code></pre></div><p>これで以前に記事に新しいURLから、表示できるか確認してみましょう。<br>
心配な方はVirtualBox等、利用して試してみてもよいかもしれません。</p>
<p>以上です。</p>
<p>■参考







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fnotnil-creative.com%2fblog%2farchives%2f446" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>








<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fwww.risewill.co.jp%2fblog%2farchives%2f1111" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>]]></content>
        </item>
        
        <item>
            <title>アプリ – つくてん – をリリースしました</title>
            <link>https://shamaton.dev/posts/98/</link>
            <pubDate>Sat, 23 May 2015 15:50:20 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/98/</guid>
            <description>&lt;p&gt;お世話になります。&lt;/p&gt;
&lt;p&gt;しゃまとんです。&lt;/p&gt;
&lt;p&gt;また、大したものではないですが、アプリをリリースしました。&lt;br&gt;
何か、本当にひまつぶしになるようなアプリってないかなーという短絡的発想から&lt;br&gt;
ただただタッチするだけのアプリを作りました。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>お世話になります。</p>
<p>しゃまとんです。</p>
<p>また、大したものではないですが、アプリをリリースしました。<br>
何か、本当にひまつぶしになるようなアプリってないかなーという短絡的発想から<br>
ただただタッチするだけのアプリを作りました。</p>
<p>赤い領域をタッチすると白くなります。<br>
全部白くします。</p>
<p>それだけです。</p>
<p>ただ、すすんでくると赤い領域がゴミのようになって、<br>
消えていく変な気持ちよさがあります。</p>
<p>もしよろしければ、触ってみてください。</p>
<p><figure class="left">
    <img src="/images/posts/2015/05/filldot.png"/> 
</figure>

つくてん</p>
<p><a href="https://itunes.apple.com/jp/app/tsukuten-filldot/id990607269?mt=8">iOSはこちら</a></p>
<p><a href="https://play.google.com/store/apps/details?id=com.shamaton.FillDot">Androidはこちら</a></p>]]></content>
        </item>
        
        <item>
            <title>アプリのアイコンを用意する</title>
            <link>https://shamaton.dev/posts/94/</link>
            <pubDate>Thu, 23 Apr 2015 15:40:45 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/94/</guid>
            <description>&lt;p&gt;お世話になります。&lt;/p&gt;
&lt;p&gt;しゃまとんです。&lt;/p&gt;
&lt;p&gt;アプリをリリースするときに、アイコンを用意しないといけないですよね。&lt;br&gt;
初めてリリースするときに知ったのですが、機種によって色々なサイズを用意しなければなりません。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>お世話になります。</p>
<p>しゃまとんです。</p>
<p>アプリをリリースするときに、アイコンを用意しないといけないですよね。<br>
初めてリリースするときに知ったのですが、機種によって色々なサイズを用意しなければなりません。</p>
<p>少し前にアプリをリリースしたのですが、iOSはAndroidよりも種類が多く面倒です。。</p>
<p>そんな中、一気にアイコンをつくってくれるサイトがあったので紹介させていただきます。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fwebfpc.com%2ftools%2fsmapho%2fapp_icon_maker%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>ベースのアイコンファイルさえ作れば、あとは必要なサイズを生成して保存するだけです。<br>
めちゃ便利です。</p>
<p>余談ですが、iOSのアイコンは角を丸くしなくても、OS側でいい感じにしてくれるんですね。<br>
そんなことを知らず、rを調べてやってました。。</p>
<p>是非試してみてください。</p>]]></content>
        </item>
        
        <item>
            <title>[cocos2dx]photonを使ってみた – その2</title>
            <link>https://shamaton.dev/posts/88/</link>
            <pubDate>Thu, 09 Apr 2015 13:22:43 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/88/</guid>
            <description>&lt;p&gt;お世話になります。&lt;/p&gt;
&lt;p&gt;しゃまとんです。&lt;/p&gt;
&lt;p&gt;photon使ってみたの続きです。&lt;br&gt;
こちらではcocos2d-xでのプログラミングを行っていきます。&lt;br&gt;
前回通り記事の手順にそって変更点を記載していきます。&lt;/p&gt;
&lt;p&gt;その前までの設定はこちら&lt;/p&gt;









&lt;iframe style=&#34;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&#34;
    src=&#34;https://hatenablog-parts.com/embed?url=https%3a%2f%2fshamaton.dev%2fposts%2f84&#34; title=&#34;&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34;&gt;
    &lt;span data-mce-type=&#34;bookmark&#34; style=&#34;display: inline-block; width: 0px; overflow: hidden; line-height: 0;&#34;
        class=&#34;mce_SELRES_start&#34;&gt;
    &lt;/span&gt;
&lt;/iframe&gt;</description>
            <content type="html"><![CDATA[<p>お世話になります。</p>
<p>しゃまとんです。</p>
<p>photon使ってみたの続きです。<br>
こちらではcocos2d-xでのプログラミングを行っていきます。<br>
前回通り記事の手順にそって変更点を記載していきます。</p>
<p>その前までの設定はこちら</p>









<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fshamaton.dev%2fposts%2f84" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>■Photonクライアントの作成</p>
<p>手順は全部で7つ記載されています。2,4,5が少し違います。</p>
<ol>
<li>
<p>説明の通り、NetworkLogic.cpp/.hをコピーします</p>
</li>
<li>
<p>OutputListenerを削除、としていますが、メッセージを削除してしまうと、実行がうまくいかない場合にわからなくなるので、面倒ですが、CCLOGに置き換えをオススメします。</p>
</li>
<li>
<p>説明の通り、インクルード</p>
</li>
<li>
<p>NetworkLogic.cppのL4にあるappIdを自分のIDにします <!-- raw HTML omitted -->static const ExitGames::Common::JString appId = L&quot;ここをIDにする&quot;;<!-- raw HTML omitted --></p>
</li>
<li>
<p>FQDNの設定は不要です</p>
</li>
<li>
<p>説明の通り、インクルードします</p>
</li>
<li>
<p>説明の通り、名前空間を指定します。</p>
</li>
</ol>
<p>これで、ビルドが通るようになります。</p>
<p>■アプリケーションへの組み込み</p>
<p>処理の概要については、変更はありません。</p>
<p>ソースの変更箇所については、記載されているのコード内の特殊文字がエスケープされてしまっているため、コピペしてもエラーになってしまいます。元サイトとコードが変わらない部分は、元サイトを参考にコピペしていただければ大丈夫です。</p>
<p>・NetworkLogic.h<br>
array,queueをインクルード</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;array&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;queue&gt;</span><span style="color:#75715e">
</span></code></pre></div><p>publicの最下位に追加</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#75715e">// ルームが存在するか否かを返すメソッド
</span><span style="color:#75715e"></span><span style="color:#66d9ef">bool</span> <span style="color:#a6e22e">isRoomExists</span>(<span style="color:#66d9ef">void</span>);
<span style="color:#75715e">// イベントを送信するメソッド
</span><span style="color:#75715e"></span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">sendEvent</span>(nByte code, ExitGames<span style="color:#f92672">::</span>Common<span style="color:#f92672">::</span>Hashtable<span style="color:#f92672">*</span> eventContent);

<span style="color:#75715e">// 自分のプレイヤー番号
</span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> playerNr <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
<span style="color:#75715e">// イベントキュー
</span><span style="color:#75715e"></span>std<span style="color:#f92672">::</span>queue<span style="color:#f92672">&lt;</span>std<span style="color:#f92672">::</span>array<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">float</span>, <span style="color:#ae81ff">3</span><span style="color:#f92672">&gt;&gt;</span> eventQueue;
</code></pre></div><p>・NetworkLogic.cpp<br>
ファイルの最下部にでも追加する</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#66d9ef">bool</span> NetworkLogic<span style="color:#f92672">::</span>isRoomExists(<span style="color:#66d9ef">void</span>)
{
	<span style="color:#66d9ef">if</span> (mLoadBalancingClient.getRoomList().getIsEmpty()) {
		<span style="color:#66d9ef">return</span> false;
	}

	<span style="color:#66d9ef">return</span> true;
}

<span style="color:#66d9ef">void</span> NetworkLogic<span style="color:#f92672">::</span>sendEvent(nByte code, ExitGames<span style="color:#f92672">::</span>Common<span style="color:#f92672">::</span>Hashtable<span style="color:#f92672">*</span> eventContent)
{
	mLoadBalancingClient.opRaiseEvent(true, eventContent, <span style="color:#ae81ff">1</span>, code);
}
</code></pre></div><p>customEventActionを下記のように上書きする</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#66d9ef">void</span> NetworkLogic<span style="color:#f92672">::</span>customEventAction(<span style="color:#66d9ef">int</span> playerNr, nByte eventCode, <span style="color:#66d9ef">const</span> ExitGames<span style="color:#f92672">::</span>Common<span style="color:#f92672">::</span>Object<span style="color:#f92672">&amp;</span> eventContent)
{
	ExitGames<span style="color:#f92672">::</span>Common<span style="color:#f92672">::</span>Hashtable<span style="color:#f92672">*</span> event;

	<span style="color:#66d9ef">switch</span> (eventCode) {
		<span style="color:#66d9ef">case</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">:</span>
			event <span style="color:#f92672">=</span> ExitGames<span style="color:#f92672">::</span>Common<span style="color:#f92672">::</span>ValueObject<span style="color:#f92672">&lt;</span>ExitGames<span style="color:#f92672">::</span>Common<span style="color:#f92672">::</span>Hashtable<span style="color:#f92672">*&gt;</span>(eventContent).getDataCopy();
			<span style="color:#66d9ef">float</span> x <span style="color:#f92672">=</span> ExitGames<span style="color:#f92672">::</span>Common<span style="color:#f92672">::</span>ValueObject<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">float</span><span style="color:#f92672">&gt;</span>(event<span style="color:#f92672">-&gt;</span>getValue(<span style="color:#ae81ff">1</span>)).getDataCopy();
			<span style="color:#66d9ef">float</span> y <span style="color:#f92672">=</span> ExitGames<span style="color:#f92672">::</span>Common<span style="color:#f92672">::</span>ValueObject<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">float</span><span style="color:#f92672">&gt;</span>(event<span style="color:#f92672">-&gt;</span>getValue(<span style="color:#ae81ff">2</span>)).getDataCopy();
			eventQueue.push({<span style="color:#66d9ef">static_cast</span><span style="color:#f92672">&lt;</span><span style="color:#66d9ef">float</span><span style="color:#f92672">&gt;</span>(playerNr), x, y});
			<span style="color:#66d9ef">break</span>;
	}
}
</code></pre></div><p>createRoomReturn(), joinRoomReturn(), joinRandomRoomReturn() にlocalPlayerNrを追加<br>
こちらは元記事のままでOKです。各functionの最下部に記入すると良いと思います。</p>
<p>・HelloWorldScene.h<br>
タップ処理が漏れているので、元記事の部分と合わせて追記します。<br>
public</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#66d9ef">virtual</span> <span style="color:#66d9ef">bool</span> <span style="color:#a6e22e">onTouchBegan</span>(cocos2d<span style="color:#f92672">::</span>Touch <span style="color:#f92672">*</span>touch, cocos2d<span style="color:#f92672">::</span>Event <span style="color:#f92672">*</span>unused_event);
<span style="color:#66d9ef">virtual</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">onTouchMoved</span>(cocos2d<span style="color:#f92672">::</span>Touch <span style="color:#f92672">*</span>touch, cocos2d<span style="color:#f92672">::</span>Event <span style="color:#f92672">*</span>unused_event);
<span style="color:#66d9ef">virtual</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">onTouchEnded</span>(cocos2d<span style="color:#f92672">::</span>Touch <span style="color:#f92672">*</span>touch, cocos2d<span style="color:#f92672">::</span>Event <span style="color:#f92672">*</span>unused_event);
<span style="color:#66d9ef">virtual</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">onTouchCancelled</span>(cocos2d<span style="color:#f92672">::</span>Touch <span style="color:#f92672">*</span>touch, cocos2d<span style="color:#f92672">::</span>Event <span style="color:#f92672">*</span>unused_event);
</code></pre></div><p>private</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#66d9ef">virtual</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">update</span>(<span style="color:#66d9ef">float</span> delta);

<span style="color:#66d9ef">void</span> <span style="color:#a6e22e">addParticle</span>(<span style="color:#66d9ef">int</span> playerNr, <span style="color:#66d9ef">float</span> x, <span style="color:#66d9ef">float</span> y);

NetworkLogic<span style="color:#f92672">*</span> networkLogic;
</code></pre></div><p>・HelloWorldScene.cpp<br>
各タッチイベント処理を追加します。Beganには、イベント送信処理を記載します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#66d9ef">bool</span> HelloWorld<span style="color:#f92672">::</span>onTouchBegan(cocos2d<span style="color:#f92672">::</span>Touch<span style="color:#f92672">*</span> touch, cocos2d<span style="color:#f92672">::</span>Event<span style="color:#f92672">*</span> event)
{

	<span style="color:#66d9ef">if</span> (networkLogic<span style="color:#f92672">-&gt;</span>playerNr) {
		<span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>addParticle(networkLogic<span style="color:#f92672">-&gt;</span>playerNr, touch<span style="color:#f92672">-&gt;</span>getLocation().x, touch<span style="color:#f92672">-&gt;</span>getLocation().y);

		<span style="color:#75715e">// イベント（タッチ座標）を送信
</span><span style="color:#75715e"></span>		ExitGames<span style="color:#f92672">::</span>Common<span style="color:#f92672">::</span>Hashtable<span style="color:#f92672">*</span> eventContent <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ExitGames<span style="color:#f92672">::</span>Common<span style="color:#f92672">::</span>Hashtable();
		eventContent<span style="color:#f92672">-&gt;</span>put<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span>, <span style="color:#66d9ef">float</span><span style="color:#f92672">&gt;</span>(<span style="color:#ae81ff">1</span>, touch<span style="color:#f92672">-&gt;</span>getLocation().x);
		eventContent<span style="color:#f92672">-&gt;</span>put<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span>, <span style="color:#66d9ef">float</span><span style="color:#f92672">&gt;</span>(<span style="color:#ae81ff">2</span>, touch<span style="color:#f92672">-&gt;</span>getLocation().y);
		networkLogic<span style="color:#f92672">-&gt;</span>sendEvent(<span style="color:#ae81ff">1</span>, eventContent);
	}

	<span style="color:#66d9ef">return</span> true;
}

<span style="color:#66d9ef">void</span> HelloWorld<span style="color:#f92672">::</span>onTouchMoved(cocos2d<span style="color:#f92672">::</span>Touch <span style="color:#f92672">*</span>touch, cocos2d<span style="color:#f92672">::</span>Event <span style="color:#f92672">*</span>unused_event) {

}

<span style="color:#66d9ef">void</span> HelloWorld<span style="color:#f92672">::</span>onTouchEnded(cocos2d<span style="color:#f92672">::</span>Touch <span style="color:#f92672">*</span>touch, cocos2d<span style="color:#f92672">::</span>Event <span style="color:#f92672">*</span>unused_event) {

}

<span style="color:#66d9ef">void</span> HelloWorld<span style="color:#f92672">::</span>onTouchCancelled(cocos2d<span style="color:#f92672">::</span>Touch <span style="color:#f92672">*</span>touch, cocos2d<span style="color:#f92672">::</span>Event <span style="color:#f92672">*</span>unused_event){

}
</code></pre></div><p>描画更新処理(update)は下記のようにします。Inputのところが少し違います。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#66d9ef">void</span> HelloWorld<span style="color:#f92672">::</span>update(<span style="color:#66d9ef">float</span> delta)
{
	networkLogic<span style="color:#f92672">-&gt;</span>run();

	<span style="color:#66d9ef">switch</span> (networkLogic<span style="color:#f92672">-&gt;</span>getState()) {
		<span style="color:#66d9ef">case</span> STATE_CONNECTED:
		<span style="color:#66d9ef">case</span> STATE_LEFT:
			<span style="color:#75715e">// ルームが存在すればジョイン、なければ作成する
</span><span style="color:#75715e"></span>			<span style="color:#66d9ef">if</span> (networkLogic<span style="color:#f92672">-&gt;</span>isRoomExists()) {
				networkLogic<span style="color:#f92672">-&gt;</span>setLastInput(INPUT_2);
			} <span style="color:#66d9ef">else</span> {
				networkLogic<span style="color:#f92672">-&gt;</span>setLastInput(INPUT_1);
			}
			<span style="color:#66d9ef">break</span>;
		<span style="color:#66d9ef">case</span> STATE_DISCONNECTED:
			<span style="color:#75715e">// 接続が切れたら再度接続
</span><span style="color:#75715e"></span>			networkLogic<span style="color:#f92672">-&gt;</span>connect();
			<span style="color:#66d9ef">break</span>;
		<span style="color:#66d9ef">case</span> STATE_CONNECTING:
		<span style="color:#66d9ef">case</span> STATE_JOINING:
		<span style="color:#66d9ef">case</span> STATE_JOINED:
		<span style="color:#66d9ef">case</span> STATE_LEAVING:
		<span style="color:#66d9ef">case</span> STATE_DISCONNECTING:
		<span style="color:#66d9ef">default</span><span style="color:#f92672">:</span>
			<span style="color:#66d9ef">break</span>;
	}

	<span style="color:#66d9ef">while</span> (<span style="color:#f92672">!</span>networkLogic<span style="color:#f92672">-&gt;</span>eventQueue.empty()) {
		std<span style="color:#f92672">::</span>array<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">float</span>, <span style="color:#ae81ff">3</span><span style="color:#f92672">&gt;</span> arr <span style="color:#f92672">=</span> networkLogic<span style="color:#f92672">-&gt;</span>eventQueue.front();
		networkLogic<span style="color:#f92672">-&gt;</span>eventQueue.pop();

		<span style="color:#66d9ef">int</span> playerNr <span style="color:#f92672">=</span> <span style="color:#66d9ef">static_cast</span><span style="color:#f92672">&lt;</span><span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span>(arr[<span style="color:#ae81ff">0</span>]);
		<span style="color:#66d9ef">float</span> x <span style="color:#f92672">=</span> arr[<span style="color:#ae81ff">1</span>];
		<span style="color:#66d9ef">float</span> y <span style="color:#f92672">=</span> arr[<span style="color:#ae81ff">2</span>];
		CCLOG(<span style="color:#e6db74">&#34;%d, %f, %f&#34;</span>, playerNr, x, y);

		<span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>addParticle(playerNr, x, y);
	}
}
</code></pre></div><p>パーティクル処理(addParticle)はそのまま使えるので、コピーして使いましょう。</p>
<p>init()にタッチ処理の設定とupdate処理の設定を追加します。<br>
NetworkLogicの生成も少しだけ違っています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#75715e">// シングルタップリスナーを用意する
</span><span style="color:#75715e"></span><span style="color:#66d9ef">auto</span> listener <span style="color:#f92672">=</span> EventListenerTouchOneByOne<span style="color:#f92672">::</span>create();
listener<span style="color:#f92672">-&gt;</span>setSwallowTouches(_swallowsTouches);

<span style="color:#75715e">// 各イベントの割り当て
</span><span style="color:#75715e"></span>listener<span style="color:#f92672">-&gt;</span>onTouchBegan     <span style="color:#f92672">=</span> CC_CALLBACK_2(HelloWorld<span style="color:#f92672">::</span>onTouchBegan, <span style="color:#66d9ef">this</span>);
listener<span style="color:#f92672">-&gt;</span>onTouchMoved     <span style="color:#f92672">=</span> CC_CALLBACK_2(HelloWorld<span style="color:#f92672">::</span>onTouchMoved, <span style="color:#66d9ef">this</span>);
listener<span style="color:#f92672">-&gt;</span>onTouchEnded     <span style="color:#f92672">=</span> CC_CALLBACK_2(HelloWorld<span style="color:#f92672">::</span>onTouchEnded, <span style="color:#66d9ef">this</span>);
listener<span style="color:#f92672">-&gt;</span>onTouchCancelled <span style="color:#f92672">=</span> CC_CALLBACK_2(HelloWorld<span style="color:#f92672">::</span>onTouchCancelled, <span style="color:#66d9ef">this</span>);

<span style="color:#75715e">// イベントディスパッチャにシングルタップ用リスナーを追加する
</span><span style="color:#75715e"></span>_eventDispatcher<span style="color:#f92672">-&gt;</span>addEventListenerWithSceneGraphPriority(listener, <span style="color:#66d9ef">this</span>);

<span style="color:#75715e">// Photonネットワーククラスのインスタンスを作成
</span><span style="color:#75715e"></span>networkLogic <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> NetworkLogic();

<span style="color:#75715e">// 毎フレームでupdateを実行させる
</span><span style="color:#75715e"></span><span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>schedule(schedule_selector(HelloWorld<span style="color:#f92672">::</span>update));
<span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>scheduleUpdate();
</code></pre></div><p>これでビルドできれば、photon realtimeを利用した、マルチプレイヤーのサンプルが動作すると思います。<br>
Androidでもビルドできると思いますので、やってみてください。</p>
<figure>
    <img src="/images/posts/2015/03/2015_0329_photon_test_exec.png"/> 
</figure>

<p>お疲れ様でした。</p>
<p>参考サイト：<br>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2frecruit.gmo.jp%2fengineer%2fjisedai%2fblog%2fcocos2d-x_photon%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>]]></content>
        </item>
        
        <item>
            <title>[cocos2dx]photonを使ってみた – その1</title>
            <link>https://shamaton.dev/posts/84/</link>
            <pubDate>Wed, 08 Apr 2015 01:25:13 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/84/</guid>
            <description>&lt;p&gt;お世話になります。&lt;/p&gt;
&lt;p&gt;しゃまとんです。&lt;/p&gt;
&lt;p&gt;すこし前ですが、CEDECに行ってきた際にphoton cloudの存在に興味を引かれまして、
セッションに参加してきたのですが、あまりの手軽さに驚きました。&lt;/p&gt;
&lt;p&gt;ちなみにphotonというのは、オンラインゲーム(マルチプレイヤーゲーム)を簡単に作ることができる、ネットワークエンジンです。&lt;/p&gt;







&lt;iframe style=&#34;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&#34;
    src=&#34;https://hatenablog-parts.com/embed?url=https%3a%2f%2fwww.photonengine.com%2fja%2fphoton&#34; title=&#34;&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34;&gt;
    &lt;span data-mce-type=&#34;bookmark&#34; style=&#34;display: inline-block; width: 0px; overflow: hidden; line-height: 0;&#34;
        class=&#34;mce_SELRES_start&#34;&gt;
    &lt;/span&gt;
&lt;/iframe&gt;

&lt;p&gt;その時はUnityでのチュートリアルだったのですが、cocos2d-xでもやってくれないかなと思っていたところ、
GMOでサンプルを記事にしてくださっていました。(SDKはもともとあった)&lt;/p&gt;







&lt;iframe style=&#34;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&#34;
    src=&#34;https://hatenablog-parts.com/embed?url=http%3a%2f%2frecruit.gmo.jp%2fengineer%2fjisedai%2fblog%2fcocos2d-x_photon%2f&#34; title=&#34;&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34;&gt;
    &lt;span data-mce-type=&#34;bookmark&#34; style=&#34;display: inline-block; width: 0px; overflow: hidden; line-height: 0;&#34;
        class=&#34;mce_SELRES_start&#34;&gt;
    &lt;/span&gt;
&lt;/iframe&gt;

&lt;p&gt;上記の記事では、version3のSDKを使っていますが、4がリリースされていたので、今後は4が使われるだろうと思い、version4を使いました。&lt;br&gt;
合わせて、そのままやっていくと、ビルドできなかったり、Androidでうまく実行できなかったりしたので、ハマった部分をメモしておきます。&lt;/p&gt;
&lt;p&gt;cocos2d-xのバージョンはv3.2でした。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>お世話になります。</p>
<p>しゃまとんです。</p>
<p>すこし前ですが、CEDECに行ってきた際にphoton cloudの存在に興味を引かれまして、
セッションに参加してきたのですが、あまりの手軽さに驚きました。</p>
<p>ちなみにphotonというのは、オンラインゲーム(マルチプレイヤーゲーム)を簡単に作ることができる、ネットワークエンジンです。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fwww.photonengine.com%2fja%2fphoton" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>その時はUnityでのチュートリアルだったのですが、cocos2d-xでもやってくれないかなと思っていたところ、
GMOでサンプルを記事にしてくださっていました。(SDKはもともとあった)</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2frecruit.gmo.jp%2fengineer%2fjisedai%2fblog%2fcocos2d-x_photon%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>上記の記事では、version3のSDKを使っていますが、4がリリースされていたので、今後は4が使われるだろうと思い、version4を使いました。<br>
合わせて、そのままやっていくと、ビルドできなかったり、Androidでうまく実行できなかったりしたので、ハマった部分をメモしておきます。</p>
<p>cocos2d-xのバージョンはv3.2でした。</p>
<p>■photonとは　〜　photonダッシュボード</p>
<p>ここまでは、同様です。手順通りにすすめてください。</p>
<p>■photon SDKのダウンロード</p>
<p>こちらはクライアントSDK（v4）をダウンロードします。</p>
<figure>
    <img src="/images/posts/2015/03/2015_0329_sdk.png"/> 
</figure>

<p>ダウンロード以外の手順は同じです。cocos2d-xでプロジェクトを作成し、SDKのフォルダをリネームして、同じ位置に格納しましょう。</p>
<p>■プロジェクトのセットアップ</p>
<p>iOSのセットアップは１〜３まで行ってください。4の64bitアーキテクチャの除外は設定しません。(2015/02から64bit対応は必須のはず)</p>
<p>Androidの設定ですが、手順のとおりにAndroid.mkを編集してもうまくいかなかったので、下記のように設定しました。主にcall周りの設定を変更しています。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">LOCAL_PATH := $(call my-dir)
LOCAL_PHOTON_ROOT := $(LOCAL_PATH)/../Photon-AndroidNDK_SDK

include $(CLEAR_VARS)

$(call import-add-path,$(LOCAL_PATH)/../../cocos2d)
$(call import-add-path,$(LOCAL_PATH)/../../cocos2d/external)
$(call import-add-path,$(LOCAL_PATH)/../../cocos2d/cocos)

LOCAL_MODULE := cocos2dcpp_shared

LOCAL_MODULE_FILENAME := libcocos2dcpp

LOCAL_SRC_FILES_JNI_PREFIXED := \
    $(wildcard $(LOCAL_PATH)/../../Classes/*.cpp) \
    $(wildcard $(LOCAL_PATH)/../../Classes/**/*.c*)

LOCAL_SRC_FILES_JNI_UNPREFIXED := $(subst jni/,, $(LOCAL_SRC_FILES_JNI_PREFIXED))

LOCAL_SRC_FILES := hellocpp/main.cpp \
                   $(LOCAL_SRC_FILES_JNI_UNPREFIXED)

LOCAL_C_INCLUDES := $(LOCAL_PATH)/../../Classes
LOCAL_C_INCLUDES += $(LOCAL_PATH)/../Photon-AndroidNDK_SDK

LOCAL_WHOLE_STATIC_LIBRARIES := cocos2dx_static
LOCAL_WHOLE_STATIC_LIBRARIES += cocosdenshion_static

# LOCAL_WHOLE_STATIC_LIBRARIES += box2d_static
# LOCAL_WHOLE_STATIC_LIBRARIES += cocosbuilder_static
# LOCAL_WHOLE_STATIC_LIBRARIES += spine_static
# LOCAL_WHOLE_STATIC_LIBRARIES += cocostudio_static
# LOCAL_WHOLE_STATIC_LIBRARIES += cocos_network_static
# LOCAL_WHOLE_STATIC_LIBRARIES += cocos_extension_static

LOCAL_CFLAGS := -DEG_DEBUGGER -D__STDINT_LIMITS -D_EG_ANDROID_PLATFORM

LOCAL_STATIC_LIBRARIES := common-cpp-static-prebuilt
LOCAL_STATIC_LIBRARIES += photon-cpp-static-prebuilt
LOCAL_STATIC_LIBRARIES += loadbalancing-cpp-static-prebuilt

LOCAL_LDLIBS := -llog

LOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH)

include $(BUILD_SHARED_LIBRARY)

$(call import-module,.)
$(call import-module,audio/android)

# $(call import-module,Box2D)
# $(call import-module,editor-support/cocosbuilder)
# $(call import-module,editor-support/spine)
# $(call import-module,editor-support/cocostudio)
# $(call import-module,network)
# $(call import-module,extensions)

$(call import-add-path-optional, $(LOCAL_PHOTON_ROOT)/Common-cpp/lib)
$(call import-add-path-optional, $(LOCAL_PHOTON_ROOT)/Common-cpp)
$(call import-module,common-cpp-prebuilt)
$(call import-add-path-optional, $(LOCAL_PHOTON_ROOT)/Photon-cpp/lib)
$(call import-add-path-optional, $(LOCAL_PHOTON_ROOT)/Photon-cpp)
$(call import-module,photon-cpp-prebuilt)
$(call import-add-path-optional, $(LOCAL_PHOTON_ROOT)/LoadBalancing-cpp/lib)
$(call import-add-path-optional, $(LOCAL_PHOTON_ROOT)/LoadBalancing-cpp)
$(call import-module,loadbalancing-cpp-prebuilt)
</code></pre></div><p>■サンプルアプリケーション</p>
<p>画面のとおりに表示されるようにします！</p>
<figure>
    <img src="/images/posts/2015/03/2015_0329_photon_test_exec.png"/> 
</figure>

<p>次はコードの修正をします。<br>
ここまでお疲れ様でした。</p>]]></content>
        </item>
        
        <item>
            <title>[cocos2dx]Androidのdebug,releaseビルドの切り替え</title>
            <link>https://shamaton.dev/posts/89/</link>
            <pubDate>Sun, 29 Mar 2015 13:40:09 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/89/</guid>
            <description>&lt;p&gt;お世話になります。&lt;/p&gt;
&lt;p&gt;しゃまとんです。&lt;/p&gt;
&lt;p&gt;以前に[こちらの記事][1]でリリースビルドについて書いたのですが、&lt;br&gt;
Androidについて切り替えがプロジェクトのプロパティから切り替えが可能なようです。&lt;/p&gt;









&lt;iframe style=&#34;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&#34;
    src=&#34;https://hatenablog-parts.com/embed?url=https%3a%2f%2fshamaton.dev%2fposts%2f49&#34; title=&#34;&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34;&gt;
    &lt;span data-mce-type=&#34;bookmark&#34; style=&#34;display: inline-block; width: 0px; overflow: hidden; line-height: 0;&#34;
        class=&#34;mce_SELRES_start&#34;&gt;
    &lt;/span&gt;
&lt;/iframe&gt;

&lt;p&gt;こちらもメモしておこうと思います。&lt;br&gt;
cocos2d-xのver3.2を使用しています。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>お世話になります。</p>
<p>しゃまとんです。</p>
<p>以前に[こちらの記事][1]でリリースビルドについて書いたのですが、<br>
Androidについて切り替えがプロジェクトのプロパティから切り替えが可能なようです。</p>









<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fshamaton.dev%2fposts%2f49" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>こちらもメモしておこうと思います。<br>
cocos2d-xのver3.2を使用しています。</p>
<p>下記のようにプロジェクトを右クリックして、プロパティを開き、C/C++ビルドを選択してください。</p>
<figure>
    <img src="/images/posts/2015/03/2015_0328_android_build.png"/> 
</figure>

<p>以上です。</p>]]></content>
        </item>
        
        <item>
            <title>アプリ – 決めろ武神覇斬 – をリリースしました</title>
            <link>https://shamaton.dev/posts/76/</link>
            <pubDate>Sun, 15 Mar 2015 09:35:06 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/76/</guid>
            <description>&lt;p&gt;お世話になります。&lt;/p&gt;
&lt;p&gt;しゃまとんです。&lt;/p&gt;
&lt;p&gt;cocos2dxに関する記事を書いておりましたが、その過程を経てアプリをリリースすることができました。&lt;/p&gt;
&lt;p&gt;そんなに凝ったものではありませんが、自分の思い描いていたものを少しだけ形にすることができました。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>お世話になります。</p>
<p>しゃまとんです。</p>
<p>cocos2dxに関する記事を書いておりましたが、その過程を経てアプリをリリースすることができました。</p>
<p>そんなに凝ったものではありませんが、自分の思い描いていたものを少しだけ形にすることができました。</p>
<p>タイトルは「決めろ武神覇斬」です。<br>
iOSのリリースに少し時間がかかったので、心配していましたが、リジェクトもなく無事リリースできました。</p>
<p>タイトルにもありますが、武神覇斬についてのゲームを作れたらなと思い、作ってみました。<br>
ゲーム性は至って単純で、直感的にプレーできるようにしてみました。</p>
<p>少しでも懐かしさを感じていただければ幸いです。<br>
もしよかったらプレーしてみてください。</p>
<table>
<thead>
<tr>
<th><figure class="center">
    <img src="/images/posts/2015/03/omnislash.png"/> 
</figure>
</th>
</tr>
</thead>
<tbody>
<tr>
<td>決めろ武神覇斬</td>
</tr>
</tbody>
</table>
<p><a href="http://wk.tk/nC1BNU">iOSはこちら</a></p>
<p><a href="%22http://wk.tk/jvAt4A">Androidはこちら</a></p>]]></content>
        </item>
        
        <item>
            <title>[cocos2dx]内部でテクスチャを作成して、クリッピングする</title>
            <link>https://shamaton.dev/posts/73/</link>
            <pubDate>Mon, 02 Mar 2015 09:46:29 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/73/</guid>
            <description>&lt;p&gt;お世話になっております。&lt;/p&gt;
&lt;p&gt;しゃまとんです。&lt;/p&gt;
&lt;p&gt;cocos2dxをいじっていて、画面の一定領域を流れるメッセージを作りたいなぁと思い、
クリッピング処理はできないだろうかと模索していたときのメモです。&lt;br&gt;
この時は横に流れるメッセージを作ろうとしていました。&lt;/p&gt;
&lt;p&gt;cocosのバージョンは3.2です。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>お世話になっております。</p>
<p>しゃまとんです。</p>
<p>cocos2dxをいじっていて、画面の一定領域を流れるメッセージを作りたいなぁと思い、
クリッピング処理はできないだろうかと模索していたときのメモです。<br>
この時は横に流れるメッセージを作ろうとしていました。</p>
<p>cocosのバージョンは3.2です。</p>
<p>クリッピングのやり方に関するwebページはいろいろと出てくるのですが、
マスク用の画像を用意して、クリッピング処理するようなやり方だったのですが、
これのためだけに画像用意するのもなぁ・・・と思い調べていたら、プログラムでスプライトを合成して 、
一枚のスプライトを生成できるみたいなので、利用してみました。</p>
<p>RenderTextureを利用して、テクスチャを生成し、スプライトを作成します。<br>
流れるメッセージはそのままLabelを利用し、クリッピング処理をして、addChildします。</p>
<p>下記サンプルコードです。作成しているSceneから呼び出せば、表示される(はず)と思います。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#75715e">// ヘッダへの定義も忘れずに
</span><span style="color:#75715e"></span><span style="color:#66d9ef">void</span> HelloWorld<span style="color:#f92672">::</span>_clippingTest() {

    <span style="color:#66d9ef">auto</span> layer_size <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>getContentSize();
    <span style="color:#66d9ef">auto</span> pos_y <span style="color:#f92672">=</span> layer_size.height <span style="color:#f92672">-</span> <span style="color:#ae81ff">50.0f</span>;

    <span style="color:#66d9ef">auto</span> font_size <span style="color:#f92672">=</span> <span style="color:#ae81ff">30</span>;

    <span style="color:#66d9ef">auto</span> label <span style="color:#f92672">=</span> Label<span style="color:#f92672">::</span>createWithSystemFont(<span style="color:#e6db74">&#34;abcdefghijklmnopqrstuvwxvz&#34;</span>, <span style="color:#e6db74">&#34;Arial&#34;</span>, font_size);
    <span style="color:#66d9ef">auto</span> init_pos <span style="color:#f92672">=</span> Vec2(layer_size.width <span style="color:#f92672">*</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">/</span><span style="color:#ae81ff">4</span>, pos_y);
    label<span style="color:#f92672">-&gt;</span>setPosition(init_pos);
    label<span style="color:#f92672">-&gt;</span>setAnchorPoint(Vec2(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0.5</span>));

    <span style="color:#75715e">// 説明文を右から左に流す
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">auto</span> move <span style="color:#f92672">=</span> MoveTo<span style="color:#f92672">::</span>create(<span style="color:#ae81ff">12.0f</span>, Vec2(layer_size.width<span style="color:#f92672">/</span><span style="color:#ae81ff">4</span> <span style="color:#f92672">-</span> label<span style="color:#f92672">-&gt;</span>getContentSize().width, pos_y));
    <span style="color:#66d9ef">auto</span> res  <span style="color:#f92672">=</span> MoveTo<span style="color:#f92672">::</span>create(<span style="color:#ae81ff">0.0f</span>, init_pos);
    <span style="color:#66d9ef">auto</span> seq  <span style="color:#f92672">=</span> RepeatForever<span style="color:#f92672">::</span>create(Sequence<span style="color:#f92672">::</span>create(move, res, <span style="color:#66d9ef">nullptr</span>));
    label<span style="color:#f92672">-&gt;</span>runAction(seq);

    <span style="color:#75715e">// クリッピングマスク用のテクスチャ作成
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// NOTE:addChildしないものはretainする
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">auto</span> render_tex <span style="color:#f92672">=</span> RenderTexture<span style="color:#f92672">::</span>create(layer_size.width, layer_size.height);
    render_tex<span style="color:#f92672">-&gt;</span>retain();
    {
        render_tex<span style="color:#f92672">-&gt;</span>begin();

        <span style="color:#75715e">// 表示しない領域(透明画像)
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">auto</span> invisible <span style="color:#f92672">=</span> Sprite<span style="color:#f92672">::</span>create();
        invisible<span style="color:#f92672">-&gt;</span>setTextureRect(Rect(<span style="color:#ae81ff">0.0f</span> ,<span style="color:#ae81ff">0.0f</span> ,layer_size.width, font_size));
        invisible<span style="color:#f92672">-&gt;</span>setColor(Color3B<span style="color:#f92672">::</span>GREEN);
        invisible<span style="color:#f92672">-&gt;</span>setOpacity(<span style="color:#ae81ff">0</span>);
        invisible<span style="color:#f92672">-&gt;</span>setPosition(layer_size.width<span style="color:#f92672">/</span><span style="color:#ae81ff">2</span>, layer_size.height<span style="color:#f92672">/</span><span style="color:#ae81ff">2</span>);
        invisible<span style="color:#f92672">-&gt;</span>retain();

        <span style="color:#75715e">// 表示する領域(黒)
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">auto</span> visible <span style="color:#f92672">=</span> Sprite<span style="color:#f92672">::</span>create();
        visible<span style="color:#f92672">-&gt;</span>setTextureRect(Rect(<span style="color:#ae81ff">0.0f</span> ,<span style="color:#ae81ff">0.0f</span> ,layer_size.width<span style="color:#f92672">/</span><span style="color:#ae81ff">4</span>, font_size));
        visible<span style="color:#f92672">-&gt;</span>setColor(Color3B<span style="color:#f92672">::</span>BLACK);
        visible<span style="color:#f92672">-&gt;</span>setPosition(layer_size.width<span style="color:#f92672">/</span><span style="color:#ae81ff">2</span>, layer_size.height<span style="color:#f92672">/</span><span style="color:#ae81ff">2</span>);
        visible<span style="color:#f92672">-&gt;</span>retain();

        <span style="color:#75715e">// render_texに焼き付ける
</span><span style="color:#75715e"></span>        invisible<span style="color:#f92672">-&gt;</span>visit();
        visible<span style="color:#f92672">-&gt;</span>visit();

        render_tex<span style="color:#f92672">-&gt;</span>end();
    }
    <span style="color:#75715e">// 生成したテクスチャでスプライト作成
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">auto</span> stencil <span style="color:#f92672">=</span> Sprite<span style="color:#f92672">::</span>createWithTexture(render_tex<span style="color:#f92672">-&gt;</span>getSprite()<span style="color:#f92672">-&gt;</span>getTexture());
    stencil<span style="color:#f92672">-&gt;</span>setPosition(layer_size.width<span style="color:#f92672">/</span><span style="color:#ae81ff">2</span>, pos_y);

    <span style="color:#75715e">// クリッピング処理
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">auto</span> clipping <span style="color:#f92672">=</span> ClippingNode<span style="color:#f92672">::</span>create();
    clipping<span style="color:#f92672">-&gt;</span>setAnchorPoint(Vec2(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>));
    clipping<span style="color:#f92672">-&gt;</span>setPosition(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>);

    <span style="color:#75715e">// くり抜く設定
</span><span style="color:#75715e"></span>    clipping<span style="color:#f92672">-&gt;</span>setStencil(stencil);
    clipping<span style="color:#f92672">-&gt;</span>setInverted(false); <span style="color:#75715e">// 変数visibleの部分を可視化する
</span><span style="color:#75715e"></span>    clipping<span style="color:#f92672">-&gt;</span>setAlphaThreshold(<span style="color:#ae81ff">0.01f</span>);

    <span style="color:#75715e">// クリッピングして表示したいもの
</span><span style="color:#75715e"></span>    clipping<span style="color:#f92672">-&gt;</span>addChild(label);
    <span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>addChild(clipping, <span style="color:#ae81ff">100</span>);
}
</code></pre></div><p>こちらのようにクリッピングされるかと思います。</p>
<figure>
    <img src="/images/posts/2015/03/cliping_test.png"/> 
</figure>

<p>ちなみにAndroidではクリッピング処理がうまくいかない場合があるようですので、
下記のサイトを参考にさせていただきました。</p>
<p>






<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fanz-note.tumblr.com%2fpost%2f90781838271%2fcocos2dx-clippingnode-for-android" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>








<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fhamken100.blogspot.jp%2f2014%2f08%2fcocos2d-x-androidstencil.html" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
<p>以上です。</p>
<p>■参考リンク</p>
<p>Clipping<br>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fqiita.com%2fsenchan05%2fitems%2f67e03d8b4dcb5eb30fdf" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>








<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fjoujaku845.blog.fc2.com%2fblog-category-32.html" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>








<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fbefool.co.jp%2fblog%2fchainzhang%2fcocos2dx-clipping-mask%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
<p>RenderTexture<br>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fqiita.com%2fU-TAS%2fitems%2f39f21a78e99c1fcc7545" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>]]></content>
        </item>
        
        <item>
            <title>windowsのキーボードをmacで使う</title>
            <link>https://shamaton.dev/posts/61/</link>
            <pubDate>Tue, 06 Jan 2015 04:43:28 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/61/</guid>
            <description>&lt;p&gt;MacでSierraをお使いの方は使えないのでこちらを参照してください〜&lt;/p&gt;









&lt;iframe style=&#34;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&#34;
    src=&#34;https://hatenablog-parts.com/embed?url=https%3a%2f%2fshamaton.dev%2fposts%2f446&#34; title=&#34;&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34;&gt;
    &lt;span data-mce-type=&#34;bookmark&#34; style=&#34;display: inline-block; width: 0px; overflow: hidden; line-height: 0;&#34;
        class=&#34;mce_SELRES_start&#34;&gt;
    &lt;/span&gt;
&lt;/iframe&gt;

&lt;p&gt;お世話になっております。&lt;/p&gt;
&lt;p&gt;しゃまとんです。&lt;/p&gt;
&lt;p&gt;ちょっと前からmacを使いはじめました。&lt;br&gt;
その前まではwindowsPCを使っていて、filcoのMajestouchを使用していたのですが、macでも使えたらいいなーと思いつつ、
公式ではサポートしていないとのこと。&lt;/p&gt;







&lt;iframe style=&#34;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&#34;
    src=&#34;https://hatenablog-parts.com/embed?url=http%3a%2f%2fwww.diatec.co.jp%2fproducts%2fdet.php%3fprod_c%3d760&#34; title=&#34;&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34;&gt;
    &lt;span data-mce-type=&#34;bookmark&#34; style=&#34;display: inline-block; width: 0px; overflow: hidden; line-height: 0;&#34;
        class=&#34;mce_SELRES_start&#34;&gt;
    &lt;/span&gt;
&lt;/iframe&gt;

&lt;p&gt;でも使いたい！とのことで、調べておりましたら、カスタマイズしている方もちらほらいたみたいなので、
参考にしながら、設定してみました。&lt;/p&gt;
&lt;p&gt;キーボード環境としては&lt;br&gt;
mac : JIS配列(スペースの横に英数・かながあるやつ)&lt;br&gt;
使いたいキーボード : flico majestouch(ちなみに茶軸)&lt;br&gt;
となります。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>MacでSierraをお使いの方は使えないのでこちらを参照してください〜</p>









<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fshamaton.dev%2fposts%2f446" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>お世話になっております。</p>
<p>しゃまとんです。</p>
<p>ちょっと前からmacを使いはじめました。<br>
その前まではwindowsPCを使っていて、filcoのMajestouchを使用していたのですが、macでも使えたらいいなーと思いつつ、
公式ではサポートしていないとのこと。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fwww.diatec.co.jp%2fproducts%2fdet.php%3fprod_c%3d760" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>でも使いたい！とのことで、調べておりましたら、カスタマイズしている方もちらほらいたみたいなので、
参考にしながら、設定してみました。</p>
<p>キーボード環境としては<br>
mac : JIS配列(スペースの横に英数・かながあるやつ)<br>
使いたいキーボード : flico majestouch(ちなみに茶軸)<br>
となります。</p>
<p>やりたいこととしては</p>
<ul>
<li>macのJIS配列にキーアサインする</li>
</ul>
<p>これだけです。</p>
<p>キーアサインの変更に伴いインストールが必要なアプリケーションがあるので、インストールしてください。</p>
<p><a href="https://pqrs.org/osx/karabiner/seil.html.ja">Seil(旧PCKeyboardHack)</a><br>
<a href="https://pqrs.org/osx/karabiner/index.html.ja">Karabiner(旧KeyRemap4MacBook)</a></p>
<p>高機能キーボードカスタマイズツールです。</p>
<p>では、順番に設定していきます。<br>
初めてキーボードを接続する場合、macから設定するように求められますので、言われた通りに入力すればOKです。</p>
<p>■CapsLockとCtrlを入れ替え<br>
何も接続していないとctrlがcapslockになっているので入れ替えます。</p>
<p>システム環境設定　→　キーボード　→　修飾キー<br>
として、Caps LockとControlを入れ替えます。キーボードはUSB Keyboardを選択してください。</p>
<figure>
    <img src="/images/posts/2015/01/keyboard.png"/> 
</figure>

<p>■変換/無変換/カタカナキーを有効にする<br>
下図のようにチェックをいれると、変換/無変換キーが英数・かな切り替えになり、カタカナキーが右Commandキーになります。</p>
<figure>
    <img src="/images/posts/2015/01/seil.png"/> 
</figure>

<p>■左右のOption, Commandキーの設定<br>
各キーで変更したいアサインに設定します。</p>
<p>Windowsキー(左Command)を左Optionに<br>
※図が間違ってました。Command_L to Option_Lでした。</p>
<figure>
    <img src="/images/posts/2015/01/kara1.png"/> 
</figure>

<p>左Altを左Commandに</p>
<figure>
    <img src="/images/posts/2015/01/kara2.png"/> 
</figure>

<p>右Altをfnにする</p>
<figure>
    <img src="/images/posts/2015/01/kara3.png"/> 
</figure>

<p>右Altをfnキーにする。(音量とか操作できるように)<br>
<figure>
    <img src="/images/posts/2015/01/kara5.png"/> 
</figure>
</p>
<p>■半角/全角キーも有効に(ついで)<br>
デフォルトだとバッククォートになっているので、ついでに変更しておきます。</p>
<figure>
    <img src="/images/posts/2015/01/kara4.png"/> 
</figure>

<p>■外部キーボードだけ有効にする<br>
忘れずに設定しておかないと、内蔵キーボードにも設定が反映されてしまうので、チェックしておきます。</p>
<p><figure>
    <img src="/images/posts/2015/01/kara.png"/> 
</figure>

[<!-- raw HTML omitted -->][8]</p>
<p>これでmacと同じ配列にキーボードを設定することができました。<br>
できれば、キーボードの刻印も変更できたらいいのですが、ここは我慢ですねヽ(´ｴ`)ﾉ<br>
以上です。</p>
<p>■参考リンク<br>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2ffree3.seesaa.net%2farticle%2f237110319.html" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>]]></content>
        </item>
        
        <item>
            <title>[cocos2dx]ver3.xへのUpdate時の注意</title>
            <link>https://shamaton.dev/posts/56/</link>
            <pubDate>Sun, 24 Aug 2014 15:23:58 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/56/</guid>
            <description>&lt;p&gt;お世話になります。&lt;/p&gt;
&lt;p&gt;しゃまとんです。&lt;/p&gt;
&lt;p&gt;最近、めっきり遠のいていましたが、cocos2d-xも知らぬ間に3.x系の安定版が出ているということで、
ダウンロードして、素のプロジェクトをビルドしてみることにしました。&lt;/p&gt;
&lt;p&gt;他のサイト様を参考にさせていただいたのですが、つまずいたところがあったので、メモ書きしておきます。&lt;/p&gt;
&lt;p&gt;versionは3.2への乗り換えでした。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>お世話になります。</p>
<p>しゃまとんです。</p>
<p>最近、めっきり遠のいていましたが、cocos2d-xも知らぬ間に3.x系の安定版が出ているということで、
ダウンロードして、素のプロジェクトをビルドしてみることにしました。</p>
<p>他のサイト様を参考にさせていただいたのですが、つまずいたところがあったので、メモ書きしておきます。</p>
<p>versionは3.2への乗り換えでした。</p>
<p>公式サイトからダウンロードして、プロジェクトを作成まではすんなりいけたのですが、ビルドを実行すると失敗していました。</p>
<p>エラーコードは</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/libtool failed with exit code <span style="color:#ae81ff">1</span>

</code></pre></div><p>となっていました。</p>
<p>どうやら、こちらXcodeのバージョンが古いとエラーとなってしまうようでした。<br>
なので、同じような現状になった方はXcodeを更新するとよいかと思います。</p>
<p>以上です。</p>
<p>■ 参考<br>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fdiscuss.cocos2d-x.org%2ft%2fsolved-cocos2d-x-3-2-ios-build-errors%2f16226" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>]]></content>
        </item>
        
        <item>
            <title>cocos2dxのリリースビルド設定</title>
            <link>https://shamaton.dev/posts/49/</link>
            <pubDate>Tue, 01 Apr 2014 15:38:54 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/49/</guid>
            <description>&lt;p&gt;お世話になります。&lt;/p&gt;
&lt;p&gt;しゃまとんです。&lt;/p&gt;
&lt;p&gt;アプリを公開する前にリリースビルドして問題ないか確認する必要があります。&lt;br&gt;
毎回、検索してしまうので、参考にさせて頂いているリンクとメモをしておきます。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>お世話になります。</p>
<p>しゃまとんです。</p>
<p>アプリを公開する前にリリースビルドして問題ないか確認する必要があります。<br>
毎回、検索してしまうので、参考にさせて頂いているリンクとメモをしておきます。</p>
<p>iOSとAndroidで設定が別々です。</p>
<p>■iOS</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2falbatrus.com%2fentry%2fmain%2fios%2f5173" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>■Android</p>
<p><strong>Android側の切り替えに関して、別記事を追加しています。</strong><br>









<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fshamaton.dev%2fposts%2f89" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<strong>[こちら][1]を参考にしてください。</strong></p>
<p><del>Androidは、jni/Application.mk内で下記の記載を変更するといいです。<br>
-DCOCOS2D_DEBUG=1<br>
↓<br>
-DCOCOS2D_DEBUG=0</del></p>
<p>以上です。</p>]]></content>
        </item>
        
        <item>
            <title>cocos2dxのプロジェクトを複製する</title>
            <link>https://shamaton.dev/posts/48/</link>
            <pubDate>Fri, 28 Mar 2014 10:57:08 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/48/</guid>
            <description>&lt;p&gt;どうもお世話になります。&lt;/p&gt;
&lt;p&gt;しゃまとんです。&lt;/p&gt;
&lt;p&gt;Cocos2dxのプロジェクトは作成しっぱなしだと、MyAppとなっているので、
自分が決めたプロジェクト名に変えたいと思い、色々調べた時の備忘録です。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>どうもお世話になります。</p>
<p>しゃまとんです。</p>
<p>Cocos2dxのプロジェクトは作成しっぱなしだと、MyAppとなっているので、
自分が決めたプロジェクト名に変えたいと思い、色々調べた時の備忘録です。</p>
<p>■iOS</p>
<p>こちらのサイトがわかりやすかったのでリンクだけ。<br>
ついでのこのタイミングでBundle Identiferも変えておく。あとで色々ややこしいだろうから…</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fwebhoric.com%2fapple%2fmac%2fxcode-mac%2fxcode-project-copy" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>Xcodeのプロジェクト名、Bundle Identifier、アプリ名の関係<br>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fd.hatena.ne.jp%2fparaches%2f20130211" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
<p>■Android</p>
<p>Androidは手動で色々と変更した。</p>
<p><strong>1. AndroidManifest.xml</strong><br>
<code>package=&quot;jp.co.mydomain&quot;</code><br>
↓<br>
<code>package=&quot;com.shamaton.NewAppName&quot;</code></p>
<p><code>&lt;activity android:name=&quot;.MyApp&quot;</code><br>
↓<br>
<code>&lt;activity android:name=&quot;.NewAppName&quot;</code></p>
<p><strong>2. build.xml</strong><br>
<code>&lt;project name=&quot;MyApp&quot; default=&quot;help&quot;&gt;</code><br>
↓<br>
<code>&lt;project name=&quot;NewAppName&quot; default=&quot;help&quot;&gt;</code></p>
<p><strong>3. build_native.sh</strong><br>
<code>APPNAME=&quot;MyApp&quot;</code><br>
<code>APPNAME=&quot;NewAppName&quot;</code></p>
<p><strong>4. res/values/string.xml</strong><br>
<code>&lt;string name=&quot;app_name&quot;&gt;MyApp&lt;/string&gt;</code><br>
↓<br>
<code>&lt;string name=&quot;app_name&quot;&gt;NewAppName&lt;/string&gt;</code></p>
<p><strong>5. jp/co/mydomainパッケージからcom/shamaton/xxxxx(プロジェクト名)に変更</strong><br>
パッケージ内に置かれている、MyApp.javaをxxxxx.javaにする</p>
<p>このとき、Classes内のファイルでAndroid個別の処理をしている場合は、そちらも忘れないように変更する。<br>
<code>#define CLASS_NAME &quot;jp/co/mydomain/MyApp&quot;</code><br>
↓<br>
<code>#define CLASS_NAME &quot;com/shamaton/xxxxx/NewAppName&quot;</code></p>
<p>これらを行って、Xcodeならプロジェクトファイルをクリック、
eclipseなら既存のandroidプロジェクトの取り込みでビルドできるようになります。</p>]]></content>
        </item>
        
        <item>
            <title>cocos2dxで作ったアプリのアイコンを変更するには</title>
            <link>https://shamaton.dev/posts/46/</link>
            <pubDate>Tue, 25 Mar 2014 01:18:03 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/46/</guid>
            <description>&lt;p&gt;どうもお世話になります。&lt;/p&gt;
&lt;p&gt;しゃまとんです。&lt;/p&gt;
&lt;p&gt;cocos2dxでアプリの作成をしているのですが、アイコンをそろそろ変えようと思い、調べた時のメモです。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>どうもお世話になります。</p>
<p>しゃまとんです。</p>
<p>cocos2dxでアプリの作成をしているのですが、アイコンをそろそろ変えようと思い、調べた時のメモです。</p>
<p>プロジェクトを作成した際に、デフォルトのアイコンを用意してくれるので、そこを上書きします。</p>
<p>アイコンの変更はOSごとのフォルダ内にアイコンが設定されているので、個別に変更する必要があります。<br>
また、OSによって必要なサイズか違うようなので、リサイズなどして用意しましょう。</p>
<p>■iOS</p>
<p>下記フォルダに格納されています。<br>
(プロジェクト名)/proj.ios</p>
<p>デフォルトで設定されているアイコンサイズを用意して、新しいアイコンで上書きします。<br>
ファイル名に付いている数字のサイズでよいです。<br>
Icon-144.png<br>
Icon-114.png<br>
Icon-72.png<br>
Icon-57.png</p>
<p>■Android</p>
<p>Androidではアイコンを指定サイズのフォルダで上書きします。<br>
(プロジェクト名)/proj.android</p>
<p>drawable-ldpi/icon.png (36×36)<br>
drawable-mdpi/icon.png (48×48)<br>
drawable-hdpi/icon.png (72×72)</p>
<p>これでインストールしてみるとアイコンが新しいものに変更されていると思います。</p>
<p>■参考サイト







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2falbatrus.com%2fentry%2fmain%2fios%2f5083" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fblog.livedoor.jp%2felss%2farchives%2f23375717.html" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>]]></content>
        </item>
        
        <item>
            <title>XcodeをVer5.1にしたらCocos2dxをビルドできない</title>
            <link>https://shamaton.dev/posts/44/</link>
            <pubDate>Thu, 13 Mar 2014 02:51:14 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/44/</guid>
            <description>&lt;p&gt;お世話になっております。&lt;/p&gt;
&lt;p&gt;しゃまとんです。&lt;/p&gt;
&lt;p&gt;先日、使っているmacを更新した時にXcodeが、updateされました。&lt;br&gt;
特に気にせず更新したら、cocos2dxのビルドができなくなりました。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>お世話になっております。</p>
<p>しゃまとんです。</p>
<p>先日、使っているmacを更新した時にXcodeが、updateされました。<br>
特に気にせず更新したら、cocos2dxのビルドができなくなりました。</p>
<p>cocos2dx内のソースでエラー(Semantic issue)が出るようになります。<br>
version2.2.0を使用されている方はご注意ください。</p>
<p>間違ってXcodeをupdateしてしまった、もしくはinstallしたらversion5.1のときは5.0系をインストールするようにしたほうがよいです。
(※apple審査でリジェクトされる…かも？)</p>
<p>戻す手順は簡単です。</p>
<ol>
<li>Finderからアプリケーションを開く</li>
<li>Xcode.appをゴミ箱へ</li>
<li><a href="https://developer.apple.com/downloads/index.action">apple developer</a>にアクセス</li>
<li>Xcodeで検索して、Xcode 5.0.2をダウンロード</li>
<li>クリックしてinstall</li>
</ol>
<p>これで、元通りビルドできるようになります。</p>]]></content>
        </item>
        
        <item>
            <title>cocos2dxでnendを実装するためのリンク集</title>
            <link>https://shamaton.dev/posts/41/</link>
            <pubDate>Tue, 25 Feb 2014 14:12:50 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/41/</guid>
            <description>&lt;p&gt;どうもお世話になります。&lt;/p&gt;
&lt;p&gt;しゃまとんです。&lt;/p&gt;
&lt;p&gt;cocos2dxを使って、アプリを作成しているのですが、広告を実装してみたのでその時に参考になったリンク集です。&lt;/p&gt;
&lt;p&gt;まずはこれを見て、その通りに実装する。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>どうもお世話になります。</p>
<p>しゃまとんです。</p>
<p>cocos2dxを使って、アプリを作成しているのですが、広告を実装してみたのでその時に参考になったリンク集です。</p>
<p>まずはこれを見て、その通りに実装する。</p>
<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fwww.appbank.net%2f2013%2f08%2f29%2fiphone-news%2f647273.php" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>次に、こちらでAndroid側の対応をする</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fkishi777.blog.fc2.com%2fblog-entry-836.html" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>多分このままでビルドしようとするとライブラリでエラーしてビルドできない。<br>
iPhoneはこちらを参考にする。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2falbatrus.com%2fentry%2fmain%2fcocos2d%2f5286" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>Androidはこの辺を参考に。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2finujirushi123.blog.fc2.com%2fblog-entry-73.html" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>やっていて、よくわからなかったが、eclipseを再起動したりするとビルド通りました。</p>
<p>これらの記事を作ってくださってる皆様に感謝です。</p>
<p>追記：Androidで画面最下部に置きたい場合は下記のようにする。</p>
<p>MyApp.java</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">adView <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> NendAdView<span style="color:#f92672">(</span>activity<span style="color:#f92672">,</span> 140270<span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;4d2662319ead5ff52dc13a863ab12bde6501b492&#34;</span><span style="color:#f92672">);</span>

<span style="color:#66d9ef">final</span> FrameLayout<span style="color:#f92672">.</span><span style="color:#a6e22e">LayoutParams</span> adParams <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> FrameLayout<span style="color:#f92672">.</span><span style="color:#a6e22e">LayoutParams</span><span style="color:#f92672">(</span>WC<span style="color:#f92672">,</span>WC<span style="color:#f92672">);</span>
activity<span style="color:#f92672">.</span><span style="color:#a6e22e">addContentView</span><span style="color:#f92672">(</span>adView<span style="color:#f92672">,</span> adParams<span style="color:#f92672">);</span>

adView<span style="color:#f92672">.</span><span style="color:#a6e22e">loadAd</span><span style="color:#f92672">();</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>git管理用メモ</title>
            <link>https://shamaton.dev/posts/38/</link>
            <pubDate>Mon, 28 Oct 2013 12:15:45 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/38/</guid>
            <description>&lt;p&gt;どうもお世話になります。&lt;br&gt;
しゃまとんです。&lt;/p&gt;
&lt;p&gt;完全にメモ用です。&lt;br&gt;
よろしくお願い致します。&lt;/p&gt;
&lt;p&gt;メモなので、追記しまくるかもしれません。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>どうもお世話になります。<br>
しゃまとんです。</p>
<p>完全にメモ用です。<br>
よろしくお願い致します。</p>
<p>メモなので、追記しまくるかもしれません。</p>
<p>[Git] Gitで指定したファイルを管理下から外す<br>
<a href="http://p.tl/yZJm!">http://p.tl/yZJm!</a></p>
<p>githubでリポジトリを削除する方法<br>
<a href="http://qiita.com/MERON/items/4d164eff7bff2243cf06">http://qiita.com/MERON/items/4d164eff7bff2243cf06</a></p>]]></content>
        </item>
        
        <item>
            <title>cocos2d-html5の開発する環境を作る@win</title>
            <link>https://shamaton.dev/posts/30/</link>
            <pubDate>Wed, 11 Sep 2013 00:39:04 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/30/</guid>
            <description>&lt;p&gt;お世話になります。&lt;br&gt;
しゃまとんです。&lt;/p&gt;
&lt;p&gt;ちょっと前にcocos2d-xの開発環境をwindowsで作成をしてみました。&lt;br&gt;
それはこちら。&lt;/p&gt;









&lt;iframe style=&#34;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&#34;
    src=&#34;https://hatenablog-parts.com/embed?url=https%3a%2f%2fshamaton.dev%2fposts%2f24&#34; title=&#34;&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34;&gt;
    &lt;span data-mce-type=&#34;bookmark&#34; style=&#34;display: inline-block; width: 0px; overflow: hidden; line-height: 0;&#34;
        class=&#34;mce_SELRES_start&#34;&gt;
    &lt;/span&gt;
&lt;/iframe&gt;

&lt;p&gt;で、今回はブラウザ上でcocos2dを使ったアプリが公開できるcocos2d-html5があるというこで、まずはHello worldまでやってみました。&lt;br&gt;
お手軽に出力までいけました。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>お世話になります。<br>
しゃまとんです。</p>
<p>ちょっと前にcocos2d-xの開発環境をwindowsで作成をしてみました。<br>
それはこちら。</p>









<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fshamaton.dev%2fposts%2f24" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>で、今回はブラウザ上でcocos2dを使ったアプリが公開できるcocos2d-html5があるというこで、まずはHello worldまでやってみました。<br>
お手軽に出力までいけました。</p>
<p>■cocos2dのページで一式を取得<br>
下記ページからcocos2d-html5うんたらかんたらとある場所のダウンロードリンクから取得。</p>
<p><a href="http://cocos2d-x.googlecode.com/files/cocos2d-x-3.0alpha0-pre.zip">http://cocos2d-x.googlecode.com/files/cocos2d-x-3.0alpha0-pre.zip</a><br>
↑2013.09時点ではコレ</p>
<p>取得したら、任意の場所に解凍します。</p>
<p>■サンプル実行<br>
解凍したディレクトリからサンプルのある場所まで、以下の通りにアクセス。<br>
<code>Cocos2d-html5-v2.1.5\Cocos2d-html5-v2.1.5\HelloHTML5World</code><br>
そのディレクトリの中にいかにもなファイルindex.htmlがあります。</p>
<p>実行の際、ローカルファイルにある状態で実行するにはchromeでは動かないようなので、firefox or safariが必要となります。</p>
<p>






<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fwww.mozilla.jp%2ffirefox%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>








<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fwww.apple.com%2fjp%2fsafari%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
<p>ブラウザをインストールし、起動したら、index.htmlをドラッグ&amp;ドロップしてみましょう。</p>
<p>以下のような画面がでればサンプル実行完了です。</p>
<figure>
    <img src="/images/posts/2013/09/hello_html5.jpg"/> 
</figure>

<p>■ここまで来たら<br>
次は開発していきたい。<br>
現在は英語のチュートリアルしかないので、ここを読んでいくしかないか・・・<br>
<!-- raw HTML omitted --><a href="http://www.cocos2d-x.org/projects/cocos2d-x/wiki/Cocos2d-html5">http://www.cocos2d-x.org/projects/cocos2d-x/wiki/Cocos2d-html5</a><!-- raw HTML omitted --></p>]]></content>
        </item>
        
        <item>
            <title>macでgitを導入するときにやっておくこと。</title>
            <link>https://shamaton.dev/posts/28/</link>
            <pubDate>Tue, 03 Sep 2013 16:16:22 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/28/</guid>
            <description>&lt;p&gt;お世話になります。&lt;br&gt;
しゃまとんです。&lt;/p&gt;
&lt;p&gt;macで何か開発をしているときにGitを使って管理したいときに、見るメモというかリンク集です。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>お世話になります。<br>
しゃまとんです。</p>
<p>macで何か開発をしているときにGitを使って管理したいときに、見るメモというかリンク集です。</p>
<p>■Gitコマンドを使えるように。<br>
流れとしては<br>
<a href="http://weble.org/2010/06/17/macports">MacPortsのインストール</a><br>
↓<br>
<a href="http://www.cse.kyoto-su.ac.jp/~oomoto/lecture/program/tips/Xcode_install/">Xcodeのインストール</a><br>
↓<br>
Xcode　⇒　Preferences　⇒　Downloads　⇒　Command Line Tools　⇒　install<br>
↓<br>
<a href="http://weble.org/2011/02/14/git-mac-install">Gitのインストール</a><br>
↓<br>
Gitがコマンドラインで使える</p>
<p>■git-completionでGitコマンドをタブ補完させる<br>
下記サイトを参考に設定。findして、~/.bashrcに追記しておけばOK。<br>
<a href="http://mawatari.jp/archives/git-completion-bash">Gitコマンドをタブキーで補完できるようにする</a></p>
<p>■git configでgit環境を色々便利にする。<br>
タブ補完されるので、いい感じだけど、さらに省略できる。<br>
あと、表示をカラーリングしたい。<br>
<a href="http://transitive.info/article/git/command/config/">git configの使い方</a></p>
<p>■番外編：wgetコマンドを使いたい<br>
なんかmacはwgetコマンドが入ってないみたいなので、もし必要にならば下記サイトを参考にする。<br>
<a href="http://rdstyle.cocolog-nifty.com/gm/2013/01/maclionwget-63f.html">Mac(Lion)に”wget”をインストールする</a></p>
<p>■その後のこと<br>
git cloneとかpushとか。githubな事。<br>
<a href="http://transitive.info/article/git/command/config/">gitリモートリポジトリの作り方</a></p>
<p>以上であります。</p>]]></content>
        </item>
        
        <item>
            <title>Cocos2dx@WinでサンプルのJSゲームをビルドする#2</title>
            <link>https://shamaton.dev/posts/25/</link>
            <pubDate>Thu, 29 Aug 2013 05:02:41 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/25/</guid>
            <description>&lt;p&gt;お世話になります。&lt;br&gt;
しゃまとんです。&lt;/p&gt;
&lt;p&gt;ビルドする#1の続きです。&lt;br&gt;
JSを読みに行くようにCppを修正し、実機転送できるように各所を修正していきます。&lt;/p&gt;
&lt;p&gt;以下手順です。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>お世話になります。<br>
しゃまとんです。</p>
<p>ビルドする#1の続きです。<br>
JSを読みに行くようにCppを修正し、実機転送できるように各所を修正していきます。</p>
<p>以下手順です。</p>
<p>■Cppファイルの整理<br>
プロジェクト作成時に、サンプルができているがJSに切り替えるので、HelloWorldScene.*を削除します。<br>
AppDelegate.cppを既存サンプルのCrystalCrazeからコピーして上書きます。<br>
場所は<code>cocos2d-x-2.1.4\samples\Javascript\CrystalCraze\Classes</code></p>
<p>■Android.mkの修正<br>
いろいろとビルド時に必要なものがあるので下記のように修正します。<br>
これで、プロジェクトのビルドまでは通ります。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">LOCAL_PATH := $(call my-dir)

include $(CLEAR_VARS)

LOCAL_MODULE := game_shared

LOCAL_MODULE_FILENAME := libgame

LOCAL_SRC_FILES := hellocpp/main.cpp \
                   ../../Classes/AppDelegate.cpp

LOCAL_C_INCLUDES := $(LOCAL_PATH)/../../Classes                   

LOCAL_WHOLE_STATIC_LIBRARIES := cocos2dx_static
LOCAL_WHOLE_STATIC_LIBRARIES += cocosdenshion_static
LOCAL_WHOLE_STATIC_LIBRARIES += cocos_extension_static
LOCAL_WHOLE_STATIC_LIBRARIES += chipmunk_static
LOCAL_WHOLE_STATIC_LIBRARIES += spidermonkey_static
LOCAL_WHOLE_STATIC_LIBRARIES += scriptingcore-spidermonkey

LOCAL_EXPORT_CFLAGS := -DCOCOS2D_DEBUG=2 -DCOCOS2D_JAVASCRIPT

include $(BUILD_SHARED_LIBRARY)

$(call import-module,CocosDenshion/android)
$(call import-module,cocos2dx)
$(call import-module,extensions)

$(call import-module,scripting/javascript/spidermonkey-android)
$(call import-module,scripting/javascript/bindings)
</code></pre></div><p>■ライブラリの追加<br>
プロジェクト右クリック → プロパティ → C/C++一般 → パスおよびシンボル</p>
<p>タブ：インクルード<br>
追加時「すべての言語に追加」にチェック<br>
下記2つを追加する。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">${NDK_ROOT}/platforms/android-8/arch-arm/usr/include
${ProjDirPath}/../../cocos2dx/include
</code></pre></div><p>タブ：ソースロケーション<br>
リンク・フォルダーを押す。変数ボタンを押して、変数をに新しく追加する。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">変数：COCOS2DX_ROOT
値C:\adt-bundle-windows\cocos2d-x-2.1.4\cocos2d-x-2.1.4

変数：PROJECT_ROOT
値：C:\adt-bundle-windows\cocos2d-x-2.1.4\cocos2d-x-2.1.4\(プロジェクトの名前)&lt;/pre&gt;

追加したら、ファイル・システム内のフォルダーにリンクをチェックし、下記に通りに2つ入力する。

&lt;pre class=&#34;brush: text; gutter: false&#34;&gt;PROJECT_ROOT/Classes
COCOS2DX_ROOT/cocos2dx
</code></pre></div><p>すると、<br>
Project/Classes<br>
Project/cocos2dx</p>
<p>というフォルダーがプロジェクト内に作成されている。</p>
<p>■確認<br>
最後に、jni/hellocpp/main.cppを開いて、エラーが何も無ければOK</p>
<p>これで実行を押すと、実機へのアプリ転送ができます(　´∀｀)bｸﾞｯ!</p>]]></content>
        </item>
        
        <item>
            <title>Cocos2dx@WinでサンプルのJSゲームをビルドする#1</title>
            <link>https://shamaton.dev/posts/24/</link>
            <pubDate>Fri, 23 Aug 2013 16:56:33 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/24/</guid>
            <description>&lt;p&gt;お世話になります。&lt;br&gt;
しゃまとんです。&lt;/p&gt;
&lt;p&gt;この前コチラにて開発環境を作成を備忘録として記載しました。&lt;/p&gt;









&lt;iframe style=&#34;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&#34;
    src=&#34;https://hatenablog-parts.com/embed?url=https%3a%2f%2fshamaton.dev%2fposts%2f21&#34; title=&#34;&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34;&gt;
    &lt;span data-mce-type=&#34;bookmark&#34; style=&#34;display: inline-block; width: 0px; overflow: hidden; line-height: 0;&#34;
        class=&#34;mce_SELRES_start&#34;&gt;
    &lt;/span&gt;
&lt;/iframe&gt;

&lt;p&gt;とあるところで、JavaScript bindingな開発ができるようになったほうがいいよ！との意見をいただきました。&lt;/p&gt;
&lt;p&gt;その意見を踏まえ、やってみるか！となったら、create-project.batを実行してもCpp用のファイルしか生成できない…&lt;br&gt;
ということで、サンプルで入っているJSプロジェクトを使って何とか出来ないかと模索しました。&lt;/p&gt;
&lt;p&gt;いろいろと試行錯誤したので、その時の備忘録です。&lt;br&gt;
もしかしたら技術書にのっててサクッできることかも(´・ω・｀)&lt;/p&gt;
&lt;p&gt;以下、自分の作ったプロジェクトでJSゲーム制作環境を用意する手順です。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>お世話になります。<br>
しゃまとんです。</p>
<p>この前コチラにて開発環境を作成を備忘録として記載しました。</p>









<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=https%3a%2f%2fshamaton.dev%2fposts%2f21" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>とあるところで、JavaScript bindingな開発ができるようになったほうがいいよ！との意見をいただきました。</p>
<p>その意見を踏まえ、やってみるか！となったら、create-project.batを実行してもCpp用のファイルしか生成できない…<br>
ということで、サンプルで入っているJSプロジェクトを使って何とか出来ないかと模索しました。</p>
<p>いろいろと試行錯誤したので、その時の備忘録です。<br>
もしかしたら技術書にのっててサクッできることかも(´・ω・｀)</p>
<p>以下、自分の作ったプロジェクトでJSゲーム制作環境を用意する手順です。</p>
<p>■下準備</p>
<p>今回はサンプルJSゲームとしてはいっているCrystalCrazeを使います。(cocos2dxのバージョンは2.1.4)<br>
cocos2d-x-2.1.4/samples/Javascript/Shared/games/CrystalCraze/Published-Androidを<br>
cocos2d-x-2.1.4/MyScript/TestGameとしてコピーします。</p>
<p>■プロジェクト作成・インポート<br>
create-android-project.batを実行し、通常通りプロジェクトを作成。<br>
作成したら、adb bundleを立ち上げ、Androidプロジェクトとしてインポートします。<br>
メニュー　→　ファイル　→　インポート　→　Existing Android…</p>
<p>■C/C++プロジェクト変換<br>
ビルドできるように変換します。<br>
エクスプローラーウインドウのプロジェクトを右クリック　→　新規　→　C/C++プロジェクトへ変換</p>
<p>■ビルド設定<br>
プロジェクト右クリック　→プロパティ　→　C/C++ビルド<br>
「デフォルトビルドコマンドを使用する」のチェックを外し、ビルド・コマンドを下記に設定。</p>
<!-- raw HTML omitted -->
<p>ビルドに必要な変数を追加します。<br>
プロジェクト右クリック　→プロパティ　→　C/C++ビルド　→　環境</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>■icon.pngの追加(エラー対処)<br>
iconがないよ！とエラーができるので、アイコンを用意して、res/drawable-xxx辺りに追加しておく。<br>
コンソールからエラー表示が消えるのを確認。</p>
<p>■Application.mk(NDKエラー対処)<br>
下記を最下行に追記する。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">APP_PLATFORM := android-8
</code></pre></div><p>■build_native.shの編集<br>
以下の用に変更。JSファイルをビルド時にassetsに持ってくるようにする。<br>
デフォルトのbuild_native.shに加筆なので、もっと整理できるかも。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">APPNAME=&#34;アプリ名(おそらくプロジェクト名)&#34;

# options

buildexternalsfromsource=
PARALLEL_BUILD_FLAG=

usage(){
cat &amp;lt;&amp;lt; EOF
usage: $0 [options]

Build C/C++ code for $APPNAME using Android NDK

OPTIONS:
-s	Build externals from source
-h	this help
EOF
}

while getopts &#34;sh&#34; OPTION; do
case &#34;$OPTION&#34; in
s)
buildexternalsfromsource=1
;;
p)
PARALLEL_BUILD_FLAG=\-j8
;;
h)
usage
exit 0
;;
esac
done

# exit this script if any commmand fails
set -e

# paths

if [ -z &#34;${NDK_ROOT+aaa}&#34; ];then
echo &#34;please define NDK_ROOT&#34;
exit 1
fi

DIR=&#34;$( cd &#34;$( dirname &#34;${BASH_SOURCE[0]}&#34; )&#34; &amp;&amp; pwd )&#34;
# ... use paths relative to current directory
COCOS2DX_ROOT=&#34;$DIR/../..&#34;
APP_ROOT=&#34;$DIR/..&#34;
APP_ANDROID_ROOT=&#34;$DIR&#34;
RESROUCE_ROOT=&#34;$APP_ROOT/../MyScript/TestGame&#34;
BINDINGS_JS_ROOT=&#34;$APP_ROOT/../scripting/javascript/bindings/js&#34;

echo &#34;----------- Paths -----------------&#34;
echo &#34;NDK_ROOT         = $NDK_ROOT&#34;
echo &#34;COCOS2DX_ROOT    = $COCOS2DX_ROOT&#34;
echo &#34;APP_ROOT         = $APP_ROOT&#34;
echo &#34;APP_ANDROID_ROOT = $APP_ANDROID_ROOT&#34;
echo &#34;RESROUCE_ROOT    = $RESROUCE_ROOT&#34;
echo &#34;BINDINGS_JS_ROOT = $BINDINGS_JS_ROOT&#34;
echo &#34;-----------------------------------&#34;

# Debug
# set -x

# make sure assets is exist
if [ -d &#34;$APP_ANDROID_ROOT&#34;/assets ]; then
    rm -rf &#34;$APP_ANDROID_ROOT&#34;/assets
fi

mkdir &#34;$APP_ANDROID_ROOT&#34;/assets

# copy resources
for file in &#34;$APP_ROOT&#34;/Resources/*
do
if [ -d &#34;$file&#34; ]; then
    cp -rf &#34;$file&#34; &#34;$APP_ANDROID_ROOT&#34;/assets
fi

if [ -f &#34;$file&#34; ]; then
    cp &#34;$file&#34; &#34;$APP_ANDROID_ROOT&#34;/assets
fi
done

# copy project js files
cp -rf &#34;$RESROUCE_ROOT&#34;/* &#34;$APP_ANDROID_ROOT&#34;/assets

# copy bindings/*.js into assets&amp;#039; root
cp -f &#34;$BINDINGS_JS_ROOT&#34;/*.js &#34;$APP_ANDROID_ROOT&#34;/assets

# copy icons (if they exist)
file=&#34;$APP_ANDROID_ROOT&#34;/assets/Icon-72.png
if [ -f &#34;$file&#34; ]; then
	cp &#34;$file&#34; &#34;$APP_ANDROID_ROOT&#34;/res/drawable-hdpi/icon.png
fi
file=&#34;$APP_ANDROID_ROOT&#34;/assets/Icon-48.png
if [ -f &#34;$file&#34; ]; then
	cp &#34;$file&#34; &#34;$APP_ANDROID_ROOT&#34;/res/drawable-mdpi/icon.png
fi
file=&#34;$APP_ANDROID_ROOT&#34;/assets/Icon-32.png
if [ -f &#34;$file&#34; ]; then
	cp &#34;$file&#34; &#34;$APP_ANDROID_ROOT&#34;/res/drawable-ldpi/icon.png
fi

if [[ &#34;$buildexternalsfromsource&#34; ]]; then
    echo &#34;Building external dependencies from source&#34;
    &#34;$NDK_ROOT&#34;/ndk-build -C &#34;$APP_ANDROID_ROOT&#34; $* \
        &#34;NDK_MODULE_PATH=${COCOS2DX_ROOT}:${COCOS2DX_ROOT}/cocos2dx/platform/third_party/android/source&#34;
else
    echo &#34;Using prebuilt externals&#34;
    &#34;$NDK_ROOT&#34;/ndk-build -C &#34;$APP_ANDROID_ROOT&#34; $* \
        &#34;NDK_MODULE_PATH=${COCOS2DX_ROOT}:${COCOS2DX_ROOT}/cocos2dx/platform/third_party/android/prebuilt&#34;
fi
</code></pre></div><p>ここまでで、既存のCppファイルでビルドが通るようになる。そのときに必要なJSファイルをassetsに持ってくるようになる。<br>
次はAppDelegate.cppからJSファイルを読み込んで、実機転送できるようにする。</p>]]></content>
        </item>
        
        <item>
            <title>Cocos2d-xのAndroidアプリ開発環境をWindowsに作成する</title>
            <link>https://shamaton.dev/posts/21/</link>
            <pubDate>Tue, 20 Aug 2013 15:43:17 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/21/</guid>
            <description>&lt;p&gt;開発環境の構築はよくmacの文献では見るけど、Winはあまり見られない。&lt;br&gt;
Macでの開発が主流なのかな…?&lt;/p&gt;
&lt;p&gt;ということで、かなり自分用だと思うけどメモ。&lt;br&gt;
eclipseを使用して、ビルド環境を作成する。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>開発環境の構築はよくmacの文献では見るけど、Winはあまり見られない。<br>
Macでの開発が主流なのかな…?</p>
<p>ということで、かなり自分用だと思うけどメモ。<br>
eclipseを使用して、ビルド環境を作成する。</p>
<p>下記サイトを参考にしつつ、構築してみた。<br>
Cocos2dxとは何か？についても説明してくれている。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fwww.atmarkit.co.jp%2fait%2farticles%2f1302%2f25%2fnews017.html" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>■各種インストール</p>
<p>Androidでの開発に各種必要なライブラリを取得する。<br>
現在(2013/08)はandroid sdkでの配布ではなくADB bundleという、eclipseをAndroidアプリ開発用にチューニングしてあるものを使用する。<br>
また、jdk(java development kit)のバージョンは6を推奨しているため、どこかからバージョン6を取得する。<br>
※現在、バージョン6の取得にはユーザー登録が必要となっている。</p>
<p>jdk(x86が32bit版)<br>
<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p>
<p>adb bundle(32bitと64bitを確認する)<br>
<a href="http://developer.android.com/sdk/index.html">http://developer.android.com/sdk/index.html</a></p>
<p>Android NDK<br>
<a href="http://developer.android.com/tools/sdk/ndk/index.html">http://developer.android.com/tools/sdk/ndk/index.html</a></p>
<p>cocos2d-x
<a href="http://www.cocos2d-x.org/">http://www.cocos2d-x.org/</a></p>
<p>cygwin(プロジェクト作成時に必要)<br>
<a href="http://www.cygwin.com/">http://www.cygwin.com/</a></p>
<p>jdkはインストール。cygwinもsetup.exeをそのまま実行すればOK。<br>
他3つは解凍するだけなので、自分はadb-bundleをcドライブ直下に置き、その中にNDKとCocos2d-xを置いた。</p>
<p>■create-android-project.batの修正</p>
<p>そのままだと使えないので、インストールした状況に応じて適宜変更する。<br>
batを適当なテキストエディタで開き、該当箇所を修正する。</p>
<ul>
<li>set _CYGBIN=c:\cygwin\bin</li>
<li>set _ANDROIDTOOLS=c:\adt-bundle-windows\sdk\tools</li>
<li>set _NDKROOT=c:\adt-bundle-windows\android-ndk-r8e</li>
</ul>
<p>■アイコンの追加</p>
<p>プロジェクト作成時にアイコンが入ってないので、/res/drawable-xxx/に格納する。<br>
ココを参照。<br>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fblog.livedoor.jp%2fsaladismaindish%2farchives%2f3988308.html" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
<p>ここまで設定できたら後は下のページ通りにプロジェクトをインポートしたら、ビルドできるはず。<br>
Eclipseへのインポートから参照<br>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fwww.atmarkit.co.jp%2fait%2farticles%2f1302%2f25%2fnews017_2.html" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>]]></content>
        </item>
        
        <item>
            <title>WordPressを入れたら最初にすること</title>
            <link>https://shamaton.dev/posts/19/</link>
            <pubDate>Mon, 19 Aug 2013 15:52:15 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/19/</guid>
            <description>&lt;p&gt;最初にすることメモ。&lt;/p&gt;
&lt;p&gt;入れっぱなしだと、セキュリティ的にまずいので下記サイトを参考に各種プラグインを導入する。&lt;br&gt;
結構あるけど大事。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>最初にすることメモ。</p>
<p>入れっぱなしだと、セキュリティ的にまずいので下記サイトを参考に各種プラグインを導入する。<br>
結構あるけど大事。</p>
<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fdesign-plus1.com%2ftcd-w%2f2011%2f04%2fwp-liteuser.html" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>あと、見た目でやる気も変わるはず。ということでテーマも記事を作成する前に決めちゃう。<br>
無料で素晴らしいテーマを作成してくださっている方がいるみたいなので、そちらのテーマを使わせていただく。</p>
<p>自分のサイトではmonochromeというテーマを使わせていただいている。</p>
<p><a href="http://themes.gallery.cx/featured/excellent-free-wptheme-created-japanese-designers/">日本人デザイナーが作成したハイクオリティな無料ワードプレステーマ</a></p>]]></content>
        </item>
        
        <item>
            <title>ServersMan VPSでWebサーバー構築#5(WordPress)</title>
            <link>https://shamaton.dev/posts/16/</link>
            <pubDate>Sat, 17 Aug 2013 15:55:35 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/16/</guid>
            <description>&lt;p&gt;さて、いよいよ最後のステップWordPressの導入です。&lt;br&gt;
WordPressは導入するだけで簡単にブログサイトを開設できるソフトウェアです。&lt;/p&gt;
&lt;p&gt;様々なプラグインやテーマがあり、個性的なブログを作ることができます。&lt;/p&gt;
&lt;p&gt;最後も同様にスーパーユーザで作業を行います。&lt;br&gt;
それでは以下、手順です。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>さて、いよいよ最後のステップWordPressの導入です。<br>
WordPressは導入するだけで簡単にブログサイトを開設できるソフトウェアです。</p>
<p>様々なプラグインやテーマがあり、個性的なブログを作ることができます。</p>
<p>最後も同様にスーパーユーザで作業を行います。<br>
それでは以下、手順です。</p>
<ol>
<li>データベース作成<br>
まずはWordPress用のデータベースを作成します。</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">mysql -u root -p <span style="color:#75715e"># rootでログイン</span>
</code></pre></div><p>パスワードを入力して、mysqlに入ったら下記の通りに実行します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">mysql&gt; create database wordpress;　<span style="color:#75715e"># wordpress用データベース作成</span>
Query OK, <span style="color:#ae81ff">1</span> row affected <span style="color:#f92672">(</span>0.00 sec<span style="color:#f92672">)</span>

mysql&gt; grant all privileges on wordpress.* to wordpress@localhost identified by <span style="color:#e6db74">&#39;*******&#39;</span>;　<span style="color:#75715e"># wordpressユーザー作成、******にはパスワードを入れる</span>

Query OK, <span style="color:#ae81ff">0</span> rows affected <span style="color:#f92672">(</span>0.00 sec<span style="color:#f92672">)</span>

mysql&gt; exit
Bye&lt;
</code></pre></div><ol start="2">
<li>WordPressインストール<br>
下記を順番に実行。wordpressをダウンロードして/var/wwwに置きます。</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">yum -y install php-mysql
wget http://ja.wordpress.org/latest-ja.zip
unzip latest-ja.zip
mv wordpress /var/www/
chown -R apache:apache /var/www/wordpress/
</code></pre></div><ol start="3">
<li>WordPress設定<br>
まずは設定ファイルをコピーします。</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">cp /var/www/wordpress/wp-config-sample.php /var/www/wordpress/wp-config.php
vim /var/www/wordpress/wp-config.php
</code></pre></div><p>下記のように設定します。<br>
秘密鍵は<a href="https://api.wordpress.org/secret-key/1.1/salt/">こちら</a>にアクセスして生成し、出力されているものを貼り付けましょう。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">/** WordPress のためのデータベース名 */
define(&#39;DB_NAME&#39;, &#39;wordpress&#39;);

/** MySQL データベースのユーザー名 */
define(&#39;DB_USER&#39;, &#39;wordpress&#39;);

/** MySQL データベースのパスワード */
define(&#39;DB_PASSWORD&#39;, &#39;******&#39;); # wordpressユーザーのパスワード

/**#@+
 * 認証用ユニークキー
 *
 * それぞれを異なるユニーク (一意) な文字列に変更してください。
 * {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org の秘密鍵サービス} で自動生成することもできます。
 * 後でいつでも変更して、既存のすべての cookie を無効にできます。これにより、すべてのユーザーを強制的に再ログインさせることに
なります。
 *
 * @since 2.6.0
 */
# ここをまるっと上書きする
define(&#39;AUTH_KEY&#39;,         &#39;****************************************************************&#39;);
define(&#39;SECURE_AUTH_KEY&#39;,  &#39;****************************************************************&#39;);
define(&#39;LOGGED_IN_KEY&#39;,    &#39;****************************************************************&#39;);
define(&#39;NONCE_KEY&#39;,        &#39;****************************************************************&#39;);
define(&#39;AUTH_SALT&#39;,        &#39;****************************************************************&#39;);
define(&#39;SECURE_AUTH_SALT&#39;, &#39;****************************************************************&#39;);
define(&#39;LOGGED_IN_SALT&#39;,   &#39;****************************************************************&#39;);
define(&#39;NONCE_SALT&#39;,       &#39;****************************************************************&#39;);
/**#@-*/
</code></pre></div><ol start="4">
<li>httpd設定<br>
wordpress用のconfを作成して設定します。<br>
とりあえず、下記の設定でアクセスできるようになります。<br>
もし、トップでアクセスしたい場合は
<code>/etc/httpd/conf/httpd.conf</code>の中のDocumentRootと<!-- raw HTML omitted -->を<code>/var/www/wordpress</code>
に変更すればOKです。</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">echo Alias /wordpress /var/www/wordpress &gt; /etc/httpd/conf.d/wordpress.conf
</code></pre></div><!-- raw HTML omitted -->
<p>設定を反映させましょう。</p>
<!-- raw HTML omitted -->
<ol start="5">
<li>wordpress開設<br>
http://設定したアドレス/wordpressにアクセスしてみましょう。<br>
画面に表示されている通りにインストールボタンを押せば開設できます！<br>
これでひと通り完了です。お疲れ様でした！</li>
</ol>]]></content>
        </item>
        
        <item>
            <title>ServersMan VPSでWebサーバー構築#4(MySQL)</title>
            <link>https://shamaton.dev/posts/15/</link>
            <pubDate>Thu, 15 Aug 2013 15:19:01 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/15/</guid>
            <description>&lt;p&gt;Webサーバーができたところで、次にWordPressをいざ導入…の前にWordPressにはMySQLというデータベースが必要なので、MySQLを使えるようにします。&lt;/p&gt;
&lt;p&gt;ここでも基本的にスーパーユーザ(su)で作業を行なっていきます。&lt;/p&gt;
&lt;p&gt;それでは手順です。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Webサーバーができたところで、次にWordPressをいざ導入…の前にWordPressにはMySQLというデータベースが必要なので、MySQLを使えるようにします。</p>
<p>ここでも基本的にスーパーユーザ(su)で作業を行なっていきます。</p>
<p>それでは手順です。</p>
<p>1 .. MySQLインストール<br>
シンプルプランではMySQLがインストールされていないので、インストールします。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">yum -y install mysql-server
</code></pre></div><p>2 .. 設定ファイル編集</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">vim /etc/my.cnf
</code></pre></div><p>行末に追加しましょう。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">character-set-server = utf8 #文字コードをUTF-8にする
</code></pre></div><p>3 .. MySQL起動</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">/etc/init.d/mysqld start

MySQL データベースを初期化中:  Installing MySQL system tables...
OK
Filling help tables...
OK

...<span style="color:#f92672">(</span>省略<span style="color:#f92672">)</span>...

mysqld を起動中:                                           <span style="color:#f92672">[</span>  OK  <span style="color:#f92672">]</span>
</code></pre></div><p>サーバー再起動時に自動で立ち上がるようにしましょう。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">chkconfig --level <span style="color:#ae81ff">3</span> mysqld on
</code></pre></div><p>4 .. MySQL初期設定</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">mysql_secure_installation <span style="color:#75715e"># MySQL初期設定</span>
</code></pre></div><p>下記の通りに設定していきましょう。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MySQL
      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!

In order to log into MySQL to secure it, we&amp;#039;ll need the current
password for the root user.  If you&amp;#039;ve just installed MySQL, and
you haven&amp;#039;t set the root password yet, the password will be blank,
so you should just press enter here.

Enter current password for root (enter for none): 　# 何も入力せずENTER
OK, successfully used password, moving on...

Setting the root password ensures that nobody can log into the MySQL
root user without the proper authorisation.

Set root password? [Y/n] 　Y # yes
New password: 　# rootのパスワードを設定
Re-enter new password: 　# 再度入力
Password updated successfully!
Reloading privilege tables..
 ... Success!

By default, a MySQL installation has an anonymous user, allowing anyone
to log into MySQL without having to have a user account created for
them.  This is intended only for testing, and to make the installation
go a bit smoother.  You should remove them before moving into a
production environment.

Remove anonymous users? [Y/n] 　# 何も入力せずENTER
 ... Success!

Normally, root should only be allowed to connect from &amp;#039;localhost&amp;#039;.  This
ensures that someone cannot guess at the root password from the network.

Disallow root login remotely? [Y/n] 　# 何も入力せずENTER
 ... Success!

By default, MySQL comes with a database named &amp;#039;test&amp;#039; that anyone can
access.  This is also intended only for testing, and should be removed
before moving into a production environment.

Remove test database and access to it? [Y/n] 　# 何も入力せずENTER
 - Dropping test database...
 ... Success!
 - Removing privileges on test database...
 ... Success!

Reloading the privilege tables will ensure that all changes made so far
will take effect immediately.

Reload privilege tables now? [Y/n] 　# 何も入力せずENTER
 ... Success!

Cleaning up...

All done!  If you&amp;#039;ve completed all of the above steps, your MySQL
installation should now be secure.

Thanks for using MySQL!
</code></pre></div><p>これでインストールと設定が完了です。</p>
<p>次はいよいよWordPressです！</p>]]></content>
        </item>
        
        <item>
            <title>ServersMan VPSでWebサーバー構築#3(Apache)</title>
            <link>https://shamaton.dev/posts/14/</link>
            <pubDate>Wed, 14 Aug 2013 15:44:47 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/14/</guid>
            <description>&lt;p&gt;ドメインの取得もできたので、次にWebサーバーを構築していきます。&lt;/p&gt;
&lt;p&gt;Webサーバーでよく知られているApache(httpd)を導入します。&lt;br&gt;
作業は初期設定同様、基本的にスーパーユーザ(su)で行います。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>ドメインの取得もできたので、次にWebサーバーを構築していきます。</p>
<p>Webサーバーでよく知られているApache(httpd)を導入します。<br>
作業は初期設定同様、基本的にスーパーユーザ(su)で行います。</p>
<p>1 .. インストール<br>
まずはインストールされているか確認。ServerMansは最初から入ってたかも。。。
なのでまずはインストールされているか確認。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">rpm -qa | grep httpd
</code></pre></div><p>インストールされていなければ、下記コマンドを実行する</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">yum -y install httpd
</code></pre></div><p>合わせてphpもインストールしておきましょう。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">yum -y install php php-mbstring
</code></pre></div><p>2 .. httpd.confの設定<br>
インストールができたら、設定ファイルを編集します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">vim /etc/httpd/conf/httpd.conf
</code></pre></div><p>ファイル内、該当箇所を編集します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">ServerTokens Prod　# エラーページ等でOS名を表示しない

ServerName shamaton.orz.hm:80　# 取得したドメインにする

&lt;Directory &#34;/var/www/html&#34;&gt;

...(省略)...

# http://httpd.apache.org/docs-2.0/mod/core.html#options
# for more information.
#
    Options Includes ExecCGI FollowSymLinks　# CGI,SSIの許可

#
# AllowOverride controls what directives may be placed in .htaccess files.
# It can be &#34;All&#34;, &#34;None&#34;, or any combination of the keywords:
#   Options FileInfo AuthConfig Limit
#
    AllowOverride All　# .htaccessを許可する

...(省略)...

ServerSignature Off　＃ エラーページでサーバー情報を表示しない

#AddDefaultCharset UTF-8　# 文字化けするのでコメントアウト

AddHandler cgi-script .cgi .pl　＃ CGIスクリプトに.plを追加する

&lt;Directory &#34;/var/www/icons&#34;&gt;
    Options MultiViews　＃ iconsのファイル一覧を表示しない
    AllowOverride None
    Order allow,deny
    Allow from all
&lt;/Directory&gt;
</code></pre></div><p>3 .. 不要ページ削除<br>
これらのページは使わないので削除します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">rm -f /etc/httpd/conf.d/welcome.conf
rm -f /var/www/error/noindex.html
</code></pre></div><p>4 .. ドキュメントルートの所有者を変更<br>
ホームページを置く場所の所有者を自分にします。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">chown hoge. /var/www/html/   <span style="color:#75715e"># 所有者をユーザー:hogeにする</span>
ls-al <span style="color:#75715e"># 所有者が変更されているか確認</span>
</code></pre></div><p>5 .. httpd起動<br>
Webサーバーを起動しましょう。すでにしてるならrestartでOK。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">/etc/init.d/httpd start  <span style="color:#75715e"># apache(httpd)起動</span>
/etc/init.d/httpd restart  <span style="color:#75715e"># 再起動</span>
</code></pre></div><p>テストページを作成して、<a href="http://www.websitepulse.com/help/tools.php">こちら</a>でアクセスできるかチェックしましょう。<br>
WebsiteTestのラジオボタンにチェックを入れ、サーバーのアドレスを入力しましょう。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">echo test &gt;&gt; /var/www/html/index.html
</code></pre></div><p>結果のStatusにOKと表示されれば、外部からのアクセスが可能です。</p>
<ul>
<li>
<p>後始末<br>
最後にテストページを削除して完了です。<br>
<code>rm -f /var/www/html/index.html</code></p>
</li>
<li>
<p>その他のテスト…<br>
試してみたい、もしくは必要ならば行いましょう。<br>
下記サイトが参考になります。<br>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fcentossrv.com%2fapache.shtml" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
</li>
</ul>]]></content>
        </item>
        
        <item>
            <title>ServersMan VPSでWebサーバー構築#2(ドメイン取得)</title>
            <link>https://shamaton.dev/posts/13/</link>
            <pubDate>Tue, 13 Aug 2013 16:31:22 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/13/</guid>
            <description>&lt;p&gt;では次にWebサーバーを構築…の前にドメインを取得しましょう。&lt;br&gt;
ドメインがないと、ホームページに名前でアクセスすることができません。&lt;/p&gt;
&lt;p&gt;私の環境は、有料ドメインを使用せず、無料ドメインを取得して使用しています。&lt;/p&gt;







&lt;iframe style=&#34;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&#34;
    src=&#34;https://hatenablog-parts.com/embed?url=http%3a%2f%2fieserver.net&#34; title=&#34;&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34;&gt;
    &lt;span data-mce-type=&#34;bookmark&#34; style=&#34;display: inline-block; width: 0px; overflow: hidden; line-height: 0;&#34;
        class=&#34;mce_SELRES_start&#34;&gt;
    &lt;/span&gt;
&lt;/iframe&gt;

&lt;p&gt;こだわりのある方はお名前.comなどのサービスを利用するとよいでしょう。&lt;/p&gt;







&lt;iframe style=&#34;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&#34;
    src=&#34;https://hatenablog-parts.com/embed?url=%20http%3a%2f%2fwww.onamae.com%2f&#34; title=&#34;&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34;&gt;
    &lt;span data-mce-type=&#34;bookmark&#34; style=&#34;display: inline-block; width: 0px; overflow: hidden; line-height: 0;&#34;
        class=&#34;mce_SELRES_start&#34;&gt;
    &lt;/span&gt;
&lt;/iframe&gt;

&lt;p&gt;ここで、VPSのサーバーのIPアドレスをieServerに通知してやる必要があります。&lt;br&gt;
DiCEという、IPが変更された時に通知するサービスを利用します。&lt;br&gt;
VPSなので、基本IPは固定ですが、使用しても問題ありません。&lt;/p&gt;
&lt;p&gt;以下、インストールと設定手順です。&lt;br&gt;
作業は基本的にスーパーユーザ(su)で行います。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>では次にWebサーバーを構築…の前にドメインを取得しましょう。<br>
ドメインがないと、ホームページに名前でアクセスすることができません。</p>
<p>私の環境は、有料ドメインを使用せず、無料ドメインを取得して使用しています。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fieserver.net" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>こだわりのある方はお名前.comなどのサービスを利用するとよいでしょう。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=%20http%3a%2f%2fwww.onamae.com%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<p>ここで、VPSのサーバーのIPアドレスをieServerに通知してやる必要があります。<br>
DiCEという、IPが変更された時に通知するサービスを利用します。<br>
VPSなので、基本IPは固定ですが、使用しても問題ありません。</p>
<p>以下、インストールと設定手順です。<br>
作業は基本的にスーパーユーザ(su)で行います。</p>
<p>1 .. DiCEのインストール</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">cd /usr/local/bin
wget http://www.hi-ho.ne.jp/cgi-bin/user/yoshihiro_e/download.cgi?p<span style="color:#f92672">=</span>diced019
tar zxvf diced01913.tar.gz
rm -f diced01913.tar.gz
</code></pre></div><p>2 .. DiCE設定<br>
スクリプト実行時に文字化けしてしまうので、ターミナルの文字コードをEUC-JPに一時的に変更し、設定が終了したら元に戻しましょう。<!-- raw HTML omitted --> <!-- raw HTML omitted -->setarch <code>uname -m</code> /usr/local/bin/DiCE/diced<!-- raw HTML omitted --></p>
<p>下記の通りに設定。<br>
IPアドレスがとれない場合は[ここ][3]を参照する。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">=-=-=- DiCE DynamicDNS Client -=-=-=
Version 0.19 for Japanese
Copyright(c) 2001 sarad

:setup
IPアドレスの検出方法を指定してください
(0) 自動検出
(1) ローカルのネットワークアダプタから検出
(2) 外部のスクリプトから検出
&lt;現在:0&gt;
(N)変更しない  (P)戻る
&gt;n
-------------------------------------------------
プライベートIPアドレスも検出対象ですか？ (Y/N)
&lt;現在:いいえ&gt;
(P)戻る
&gt;n
-------------------------------------------------
IPアドレスの検出をテストしますか？ (Y/N)
(P)戻る
&gt;y
検出IPアドレス&gt;XXX.XXX.XXX.XXX #IPが正しいか確認
-------------------------------------------------
IPアドレスの検出をテストしますか？ (Y/N)
(P)戻る
&gt;n
-------------------------------------------------
IPアドレスをチェックする間隔を指定してください(分)
設定可能範囲は5分以上です
&lt;現在:10&gt;
(N)変更しない  (P)戻る
&gt;n
=================================================
DNSサーバーの負荷を軽減するために頻繁なDNS更新を防ぐ必要があります
前回の更新から一定時間DNS更新処理を行わないように保護時間を設定して
ください(分)  設定可能範囲は10分から1440分です
&lt;現在:60&gt;
(N)変更しない  (P)戻る
&gt;N
=================================================
設定を保存しますか? (Y/N)
(P)戻る
&gt;y
設定を保存しました
=================================================
:add　←　IPアドレスの自動更新イベントを追加する
新しくイベントを追加します

DynamicDNSサービス名を入力してください
&#34;?&#34;で対応しているサービスを一覧表示します
(P)戻る
&gt;ieServer
&lt;&lt; ieServer Project &gt;&gt;
URL: http://www.ieserver.net/
*** 情報 ***
IPアドレスはサーバー側で自動検出します。
IPアドレスの指定は出来ません。
（入力しても無視されます）
=================================================
ドメイン名を入力してください
&#34;?&#34;でドメイン一覧を表示します
(P)戻る
&gt;orz.hm　# ドメイン名(各自変更して下さい)
ホスト名を入力してください
(P)戻る
&gt;空ENTER
=================================================
ログインユーザ名を入力してください
(P)戻る
&gt;shamaotn　#　サブドメイン名(各自変更してください)
=================================================
ログインパスワードを入力してください
(P)戻る
&gt;xxxxxxxx　←　ユーザ登録時に入力したパスワード
=================================================
登録するIPアドレスを入力してください
空白にすると現在のIPアドレスを自動検出します
(P)戻る
&gt;空ENTER
=================================================
このイベントに題名を付けてください
(P)戻る
&gt;IPアドレス更新
=================================================
このイベントを実行するスケジュールを設定します
-------------------------------------------------
実行する頻度を指定してください (番号入力)
(0)１回のみ (1)１日１回 (2)１週間に１回 (3)１ヵ月に１回
(4)その他の周期 (5)IPアドレス変化時 (6)起動時
(P)戻る
&gt;5
-------------------------------------------------
IPアドレスがあまり変化しない環境の場合、更新せずに一定期間を過ぎると
アカウントを削除されてしまうことがあります
IPアドレスの変化が無い時に実行する間隔を指定してください
(0)7日毎   (1)14日毎  (2)21日毎  (3)28日毎
(4)35日毎  (5)56日毎  (6)84日毎
(P)戻る
&gt;0
=================================================
詳細オプションを設定します
-------------------------------------------------
[ オフライン ]
(0)No (1)Yes 
番号&gt;0
=================================================
このイベントを有効にしますか? (Y/N)
(イベントの有効/無効は&#34;EN/DIS&#34;コマンドで切替えられます)
&gt;y
=================================================
イベントを保存しますか? (Y/N)
&gt;y
イベント&#34;IPアドレス更新&#34;を保存しました
=================================================
:list　#　イベントを確認
(No.)   (イベント名)                   (スケジュール)             (次回予定) 
  0 *  Pアドレス更新 IPアドレス変化時 (７日毎)   12/09 18:32 
:ex 0
+ 12/2 18:33 にIPアドレス更新が実行されました
  IPアドレスを更新しました
:exit
</code></pre></div><p>3 .. DiCE起動</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">setarch <span style="color:#e6db74">`</span>uname -m<span style="color:#e6db74">`</span> /usr/local/bin/DiCE/diced -d -l
</code></pre></div><p>4 .. 自動起動設定</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">echo <span style="color:#e6db74">&#34;setarch `uname -m` /usr/local/bin/DiCE/diced -d -l&#34;</span> &gt;&gt; /etc/rc.local
</code></pre></div><p>5 .. ドメイン確認<br>
ここを参考に確認してみる。<br>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fblog.aburami.net%2farchives%2f53915071.html" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
<p>これで設定完了です。<br>
下記のサイトが参考になりました。<br>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fcentossrv.com%2fdomain-ieserver.shtml" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
<p>次にWebサーバーを構築していきます。</p>]]></content>
        </item>
        
        <item>
            <title>ServersMan VPSでWebサーバー構築#1(CentOS:初期設定)</title>
            <link>https://shamaton.dev/posts/12/</link>
            <pubDate>Sun, 11 Aug 2013 14:51:05 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/12/</guid>
            <description>&lt;p&gt;お世話になっております。&lt;br&gt;
しゃまとんです。&lt;/p&gt;
&lt;p&gt;VPSという存在を最近知り、気になっていたので使ってみることにしました。&lt;br&gt;
さくらなどVPSのサービスは色々とありますが、なるべく費用がかからないようにしたいと思い、ServersManにしました。&lt;br&gt;
契約したサービスはEntryプランなので、設定するためにCUIを使って構築していきます。&lt;/p&gt;
&lt;p&gt;






&lt;iframe style=&#34;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&#34;
    src=&#34;https://hatenablog-parts.com/embed?url=http%3a%2f%2fdream.jp%2fvps%2f&#34; title=&#34;&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34;&gt;
    &lt;span data-mce-type=&#34;bookmark&#34; style=&#34;display: inline-block; width: 0px; overflow: hidden; line-height: 0;&#34;
        class=&#34;mce_SELRES_start&#34;&gt;
    &lt;/span&gt;
&lt;/iframe&gt;

※今なら１ヶ月無料キャンペーンやってるそうです！(2013/08/01〜2013/09/30)&lt;/p&gt;
&lt;p&gt;自分への備忘録も兼ねてWordPressによるボームページ公開までの手順を書いていこうと思います。
OSはCentOS 64bitにしました。&lt;br&gt;
※加筆修正は必要があれば行なっていきます。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>お世話になっております。<br>
しゃまとんです。</p>
<p>VPSという存在を最近知り、気になっていたので使ってみることにしました。<br>
さくらなどVPSのサービスは色々とありますが、なるべく費用がかからないようにしたいと思い、ServersManにしました。<br>
契約したサービスはEntryプランなので、設定するためにCUIを使って構築していきます。</p>
<p>






<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fdream.jp%2fvps%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

※今なら１ヶ月無料キャンペーンやってるそうです！(2013/08/01〜2013/09/30)</p>
<p>自分への備忘録も兼ねてWordPressによるボームページ公開までの手順を書いていこうと思います。
OSはCentOS 64bitにしました。<br>
※加筆修正は必要があれば行なっていきます。</p>
<p>1 .. 一般ユーザーの作成
rootで直接ログインできる状態で今後作業を行うのは危険なので、一般ユーザーを作成します。<br>
例として、hogeというユーザーを作成します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">adduser hoge
passwd hoge <span style="color:#75715e"># このあとパスワード入力する、なにも出力されないが入力されている。</span>
</code></pre></div><p>2 .. sudoの設定<br>
sudoは指定した一般ユーザに対して特定のrootコマンドを付与することで代理のrootユーザとして
サーバーを管理させる事ができるようになります。
毎回rootのログインをするのが手間なときに活用することができます。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">rpm -qa | grep sudo
yum install sudo <span style="color:#75715e"># インストールされてなければ</span>
su -
visudo
</code></pre></div><p>下記の該当箇所にhogeユーザーを追加すれば、sudoを実行できるようになります。<br>
こちらのサイトが参考になりました。</p>
<p>CentOS:sudoを設定する







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fd.hatena.ne.jp%2fa__z%2f20071011" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>
</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text"># Allow root to run any commands anywhere
root         ALL=(ALL)       ALL
hoge        ALL=(ALL)       NOPASSWD:ALL
</code></pre></div><p>3 .. vimをインストールする<br>
私の環境では、もらった状態でvimはインストール済みでした。
もし入っていなければインストールしましょう。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">yum -y install vim-enhanced
</code></pre></div><p>4 .. sshのポートを確認する。<br>
serversmanのデフォルト設定はsshのポート:22を使用していないようですが、22はセキュリティ上使わないように設定しましょう。
ポート番号の確認は/etc/ssh/sshd_configで確認できます。<br>
rootでログインしてない場合は<code>sudo vim /etc/ssh/sshd_config</code>で確認してもよいです。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Port 10022 # ここが22の場合、別のポートに変更する。
</code></pre></div><p>もし変更した場合はsshdの再起動を行いましょう。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">/etc/init.d/sshd restart
</code></pre></div><p>5 .. ssh接続を鍵認証に変更する。<br>
接続を行なっている、自分のパソコンで鍵作成を行います。
macならばターミナルが入っていますが、winの場合はTera Termなどを入れるとよいでしょう。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fsourceforge.jp%2fprojects%2fttssh2%2f" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key <span style="color:#f92672">(</span>/Users/hoge/.ssh/id_rsa<span style="color:#f92672">)</span>: <span style="color:#75715e"># ファイルの出来る場所</span>
Enter passphrase <span style="color:#f92672">(</span>empty <span style="color:#66d9ef">for</span> no passphrase<span style="color:#f92672">)</span>: <span style="color:#75715e"># パスを入力</span>
Enter same passphrase again: <span style="color:#75715e"># パスをもう一度入力</span>
</code></pre></div><p>id_rsa.pubというファイルが出来上がるので、サーバー上の.sshディレクトリにauthorized_keysというファイル名に変更して格納しましょう。
ターム上からコピペでも、ファイル転送でも良いです。.sshディレクトリがなければhogeユーザーのホームディレクトリに作成しましょう。<br>
ファイルのパーミッション変更も忘れずに。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">cd
mkdir .ssh
chmod <span style="color:#ae81ff">700</span> ~/.ssh
chmod <span style="color:#ae81ff">600</span> ~/.ssh/authorized_keys
</code></pre></div><p>ここまで設定を行うと、鍵認証による接続が行えるはずです。<br>
続いて、sshの設定も行いましょう。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">#LoginGraceTime 2m
PermitRootLogin no # rootでのログイン禁止

…省略…

# To disable tunneled clear text passwords, change to no here!
#PasswordAuthentication no
PermitEmptyPasswords no # 空パスワードの禁止
PasswordAuthentication no # パスワード認証しない
</code></pre></div><p>設定できたらsshdの再起動も忘れずに行いましょう。この際、誤ってログインができなくならないよう、
接続されているタームを1つ以上用意しておきましょう。</p>
<p>6 .. ファイアウォールの構築<br>
まずは設定ファイルを作成します。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">vim /etc/sysconfig/iptables
</code></pre></div><p>設定するファイルはこちらのサイトの設定ファイルを使わせて頂きました。
sshのポートは人によって違うかもしれないので注意してください。</p>







<iframe style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"
    src="https://hatenablog-parts.com/embed?url=http%3a%2f%2fweble.org%2f2011%2f05%2f16%2fsakura-vps-and-centos" title="" scrolling="no" frameborder="0">
    <span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;"
        class="mce_SELRES_start">
    </span>
</iframe>

<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">*filter
:INPUT   ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT  ACCEPT [0:0]
:RH-Firewall-1-INPUT - [0:0]

-A INPUT -j RH-Firewall-1-INPUT
-A FORWARD -j RH-Firewall-1-INPUT
-A RH-Firewall-1-INPUT -i lo -j ACCEPT
-A RH-Firewall-1-INPUT -p icmp --icmp-type any -j ACCEPT
-A RH-Firewall-1-INPUT -p 50 -j ACCEPT
-A RH-Firewall-1-INPUT -p 51 -j ACCEPT
-A RH-Firewall-1-INPUT -p udp --dport 5353 -d 224.0.0.251 -j ACCEPT
-A RH-Firewall-1-INPUT -p udp -m udp --dport 631 -j ACCEPT
-A RH-Firewall-1-INPUT -p tcp -m tcp --dport 631 -j ACCEPT
-A RH-Firewall-1-INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

# SSH, HTTP, FTP1, FTP2, MySQL
-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 10022 -j ACCEPT
-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 80    -j ACCEPT
-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 20    -j ACCEPT
-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 21    -j ACCEPT
-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 3306  -j ACCEPT

-A RH-Firewall-1-INPUT -j REJECT --reject-with icmp-host-prohibited

COMMIT
</code></pre></div><p>設定できたら、再起動しましょう。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">/etc/init.d/iptables restart
</code></pre></div><p>7 .. yumのアップデート<br>
いわゆるOSのアップデートです。最後に忘れずに行いましょう。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">yum update <span style="color:#75715e"># rootなら</span>
sudo yum update <span style="color:#75715e"># hoge(一般ユーザーなら)</span>
</code></pre></div><p>参考にさせていただいたサイトでは、他にも確認や設定を行なっていますが、serversmanの環境では不要っぽいものもあるので、
ここまで設定できれば初期設定はとりあえずOKだと思います。</p>
<p>次はApache(Webサーバー)のインストールと設定を行なっていきます。</p>]]></content>
        </item>
        
        <item>
            <title>テスト</title>
            <link>https://shamaton.dev/posts/11/</link>
            <pubDate>Fri, 09 Aug 2013 00:58:36 +0000</pubDate>
            
            <guid>https://shamaton.dev/posts/11/</guid>
            <description>投稿テストです。</description>
            <content type="html"><![CDATA[<p>投稿テストです。</p>
]]></content>
        </item>
        
    </channel>
</rss>
